<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一句代码解决bootstrap栅格几个设置5等分</title>
    <url>/2019/01/04/bootstrap-offset/</url>
    <content><![CDATA[<p>HTML<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col-xs-offset-1 col-xs-2 text-center"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col-xs-2 text-center"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col-xs-2 text-center"</span>&gt;</span>番茄<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col-xs-2 text-center"</span>&gt;</span>石榴<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col-xs-2 text-center"</span>&gt;</span>芒果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>正常设置每个栅格2等分，最后会在末尾空余出2等分（共12等分），然后第一个栅格设置col-xs-offset-1，意思是偏移一格，等于把最后的2等分其中一份放在最前面了。<br>这样做可以解决bootstrap栅格5等分的问题，但是最终宽度会比正常窄，可以单独设置container的宽来解决。</p>
]]></content>
      <categories>
        <category>HTML</category>
        <category>BOOTSTRAP</category>
      </categories>
      <tags>
        <tag>bootstrap</tag>
        <tag>offset</tag>
      </tags>
  </entry>
  <entry>
    <title>统计数组中相同值的个数</title>
    <url>/2018/12/19/Array-of-the-same-kind/</url>
    <content><![CDATA[<h3 id="统计数组中相同值的个数"><a href="#统计数组中相同值的个数" class="headerlink" title="统计数组中相同值的个数"></a>统计数组中相同值的个数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrCheck</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">	<span class="keyword">var</span> newJson = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> temp=arr[i];</span><br><span class="line">    <span class="keyword">var</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr.length;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j]==temp)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        arr[j]=<span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(temp != <span class="number">-1</span>)&#123;</span><br><span class="line">			newJson.name = temp;</span><br><span class="line">			</span><br><span class="line">			newJson.num = count;</span><br><span class="line">      newArr.push(temp+<span class="string">":"</span>+count)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line">arrCheck([&#123;<span class="string">"name"</span>:<span class="string">""</span>&#125;,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">document</span>.write(arrCheck([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]));</span><br></pre></td></tr></table></figure>
<p>将数字改为JSON可统计相同JSON值出现的次数</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>数组</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>PNG格式小图标的CSS任意颜色赋色技术</title>
    <url>/2018/12/19/css3-add-color/</url>
    <content><![CDATA[<h3 id="PNG格式小图标的CSS任意颜色赋色技术"><a href="#PNG格式小图标的CSS任意颜色赋色技术" class="headerlink" title="PNG格式小图标的CSS任意颜色赋色技术"></a>PNG格式小图标的CSS任意颜色赋色技术</h3><p><code>**注意**：PC某些浏览器不支持，请勿使用，手机端可以使用</code></p>
<a id="more"></a>
<h1 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">drop-shadow</span>(<span class="selector-tag">rgb</span>(62, 243, 52) 20<span class="selector-tag">px</span> 0<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>原理其实很简单，使用了CSS3滤镜filter中的drop-shadow，drop-shadow滤镜可以给元素或图片非透明区域添加投影。</p>
<p>如果对drop-shadow不是很了解，建议先看看前些时间写的“CSS3 filter:drop-shadow滤镜与box-shadow区别应用”一文！</p>
<p>对于背景透明的png小图标而言，如果我们施加一个不带模糊的投影，不就等同于生成了另外一个颜色的小图标了吗？</p>
<p>然后，我们把原始图标隐藏在容器外面，投影图标在容器中间，不见给人感觉是赋色效果了？</p>
<p>比方说本文的demo，如果把icon父级的的 <em>overflow:hidden</em> 去掉，原始的图标就暴露出来啦！</p>
<p><img src="https://image.zhangxinxu.com/image/blog/201606/2016-06-08_004748.png" alt="效果图"></p>
<h1 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-del"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-class">.icon</span> &#123; <span class="comment">/*图标元素必须是块级元素，有宽高，切必须溢出隐藏*/</span></span><br><span class="line">    <span class="attribute">display</span>: inline-block;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.icon</span> &gt; <span class="selector-class">.icon</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">20px</span>; <span class="comment">/*-20px为图标宽度，必须是负值*/</span></span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">drop-shadow</span>(rgb(<span class="number">62</span>, <span class="number">243</span>, <span class="number">52</span>) <span class="number">20px</span> <span class="number">0px</span>); <span class="comment">/*20px为图标宽度*/</span></span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(rgb(<span class="number">62</span>, <span class="number">243</span>, <span class="number">52</span>) <span class="number">20px</span> <span class="number">0px</span>);  <span class="comment">/*20px为图标宽度*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(delete.png) no-repeat center;   <span class="comment">/*图标png文件设置在包裹内的div中切必须是块级元素，有宽高*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>IE13+支持，Chrome和FireFox浏览器支持，移动端iOS支持，Android4.4+支持。也就是，基本上，移动端现在可以使用这种技术了。<br>既节约了流量，也让我们的开发更简单，维护更方便了。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title>css3曲线投影</title>
    <url>/2018/12/19/css3-curve-shadow/</url>
    <content><![CDATA[<h3 id="模仿纸张曲线投影"><a href="#模仿纸张曲线投影" class="headerlink" title="模仿纸张曲线投影"></a>模仿纸张曲线投影</h3><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="https://image.zhangxinxu.com/image/blog/201012/2010-12-12_215403.png" alt="效果图"><br><a id="more"></a></p>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>首先，曲线投影的终效果其实是多投影重叠的效果：一点点倾斜的投影重叠一个直直的投影。<br>一般的直来直往的投影显然是使用box-shadow属性就可以搞定了。至于那个倾斜的投影，如果是现代浏览器，则需要就是CSS3变换属性transform（具体参见之前的“CSS3 Transitions, Transforms和Animation使用简介与应用展示”一文）。首先是倾斜，5度左右的样子，然后让其在主投影的后面显示就可以了。然后，单单只有倾斜是不够的，因为有一个脚会从一侧露出来，这很好理解。假设两个矩形一样大，位置完全重叠，如果发生旋转，则必定有边角不重合而露出来。即使矩形尺寸不一样，只要其以一个公共的边角旋转，至少会有两个角露出来，而实际上我们只需要一个，也就是斜边投影的哪个角。那么这个问题该如何解决呢，也很简单，同样是transform，不过这回不是旋转，而是拉伸(skew)，将规整的矩形拉伸成平行四边形，可避免旋转的时候多余的角露出来。</p>
<p>对于不支持CSS3的IE浏览器，按照上面的原理，理论上也是可以模拟出曲线投影效果的。因为IE下的投影效果可以使用投影滤镜（效果生硬不推荐）实现，或是模糊滤镜实现（推荐），至于旋转也有旋转滤镜。但是，就性能和成本而言，是否应该使用很值得商榷。</p>
<h1 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 图片的宽高可以在CSS里更改 --&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    *display: inline;</span><br><span class="line">    <span class="selector-tag">width</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 248<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">margin</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#eee</span>;</span><br><span class="line">    <span class="selector-tag">-webkit-box-shadow</span>: 0 1<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.27</span>), 0 0 60<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.06</span>) <span class="selector-tag">inset</span>;</span><br><span class="line">    <span class="selector-tag">-moz-box-shadow</span>: 0 1<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.27</span>), 0 0 40<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.06</span>) <span class="selector-tag">inset</span>; </span><br><span class="line">    <span class="selector-tag">box-shadow</span>: 0 1<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.27</span>), 0 0 40<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.06</span>) <span class="selector-tag">inset</span>;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">    *<span class="selector-tag">zoom</span>: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">skew</span>(-<span class="number">15deg</span>) <span class="built_in">rotate</span>(-<span class="number">6deg</span>);</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">skew</span>(-<span class="number">15deg</span>) <span class="built_in">rotate</span>(-<span class="number">6deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skew</span>(-<span class="number">15deg</span>) <span class="built_in">rotate</span>(-<span class="number">6deg</span>);</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">skew</span>(<span class="number">15deg</span>) <span class="built_in">rotate</span>(<span class="number">6deg</span>);</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">skew</span>(<span class="number">15deg</span>) <span class="built_in">rotate</span>(<span class="number">6deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">15deg</span>) <span class="built_in">rotate</span>(<span class="number">6deg</span>);</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.img</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">55%</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">' '</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>); </span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h1><p>这里的斜边投影使用的是负值z-index定位到本体阴影的后面的。由于使用的是z-index负值，所以，请务必保证当前投影元素的所有父标签均没有背景图片或背景色（body标签除外），否则，斜边投影是看不到的。</p>
<h6 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h6><p><a href="https://www.zhangxinxu.com/wordpress/2010/12/css3-box-shadow%E5%AE%9E%E7%8E%B0%E7%BA%B8%E5%BC%A0%E7%9A%84%E6%9B%B2%E7%BA%BF%E6%8A%95%E5%BD%B1%E6%95%88%E6%9E%9C/" target="_blank" rel="noopener">CSS3 box-shadow实现纸张的曲线投影效果</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css3</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>This is dobby!</title>
    <url>/2019/01/03/dobby/</url>
    <content><![CDATA[<p><video src="/2019/01/03/dobby/3bc53ac5ca4fde47810af8abb0c0a601.mp4" controls style="display:block;margin:auto"></video><br>这就是Dobby Orz.</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
  </entry>
  <entry>
    <title>如何使用fonts.googleapis.com使自己的网站增加更多字体</title>
    <url>/2019/01/02/fonts-googleapis/</url>
    <content><![CDATA[<p>首先，fonts.googleapis.com解决的是客户端电脑没有安装字体，但是网站主又想客户看到自己想要的字体，通常的做法就是网站的css调用网站内部的字体文件，但是这样做非常不灵活，我们需要更换字体时，不然需要修改css，还需要替换字体文件，于是fonts.googleapis.com就可以解决这个问题。<br><a id="more"></a></p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>CSS引入<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//fonts.googleapis.com/css?family=Monda:300,300italic,400,400italic,700,700italic|PT Mono:300,300italic,400,400italic,700,700italic&amp;subset=latin,latin-ext"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>链接的具体构成就是：<br>fonts.googleapis.com/css?family=<strong>字体名称</strong>:<strong>加粗程度</strong>,<strong>加粗程度+是否斜体</strong>&amp;subset=latin,latin-ext<br>其中如果需要多种字体用  <strong>|</strong>  隔开，如果有多种加粗程度<br>最后在需要使用的元素上加入font-family属性即可<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Monda'</span>, <span class="string">'PT Mono'</span> , serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>fonts.googleapis.com还有一种ajax请求方式，这里不推荐使用，css是最快也最容易维护的方式。</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>googleapis</tag>
        <tag>字体</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Github上传并引用video资源</title>
    <url>/2018/12/21/github-video/</url>
    <content><![CDATA[<blockquote>
<p>很多网站都有背景视频的元素，利用的是【HTML5】的新特性————【video】标签<br>例如：<a href="http://www.hearttrip.net/tourlist.html" target="_blank" rel="noopener">点击打开</a> 里面的banner背景，就是一个视频</p>
</blockquote>
<a id="more"></a>
<p>具体代码：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"video.mp4"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">您的浏览器不支持 video 标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>但是对于很多服务器来说，视频太站资源，太耗流量，但是将视频上传到优酷、腾讯视频上又无法获得视频真实地址（video标签中的视频必须是视频的物理地址，即必须以.mp4等的拓展名结束的地址），而且还有广告<br>这里推荐一个简单的方法：</p>
<blockquote>
<p>使用GitHub等git托管网站上传视频</p>
</blockquote>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>首先注册一个GitHub账号 <a href="https://github.com/" target="_blank" rel="noopener">点我注册</a><br><img src="/2018/12/21/github-video/01.jpg"></p>
<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>点击New新建一个项目，名称可以随便取，但是不能写中文,填写好后点击【Create repository】</p>
<blockquote>
<p>需要注意的是 必须选中Initialize this repository with a README这个选项，否则你需要安装git使用指令将视频传上去。</p>
</blockquote>
<img src="/2018/12/21/github-video/02.jpg">
<img src="/2018/12/21/github-video/03.jpg">
<h3 id="上传视频"><a href="#上传视频" class="headerlink" title="上传视频"></a>上传视频</h3><p>新建号项目你将看到这样的界面，点击【Upload files】上传你的视频就可以，最后上传完了之后点击【Commit changes】<br><img src="/2018/12/21/github-video/04.jpg"><br><img src="/2018/12/21/github-video/05.jpg"></p>
<h3 id="引用视频"><a href="#引用视频" class="headerlink" title="引用视频"></a>引用视频</h3><p>上传完毕后就能在项目中看到你的视频，点击视频后再复制【View Raw】的连接就可以获得视频的真实地址了，例如我的连接是：<a href="https://github.com/HakunaMatata052/video/blob/master/a.mp4?raw=true" target="_blank" rel="noopener">https://github.com/HakunaMatata052/video/blob/master/a.mp4?raw=true</a><br>注意：视频最后的 ?raw=true 不能删除，否则视频无法播放<br><img src="/2018/12/21/github-video/06.jpg"></p>
<p>最后放在代码里看一下<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"https://github.com/HakunaMatata052/video/blob/master/a.mp4?raw=true"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">您的浏览器不支持 video 标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<video src="https://github.com/HakunaMatata052/video/blob/master/a.mp4?raw=true" controls="controls" autoplay="autoplay"><br>您的浏览器不支持 video 标签。<br></video>

<blockquote>
<p>如果想让视频当背景用的话，需要设video为自动播放，可以设置autoplay=”autoplay”具体代码如下</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"https://github.com/HakunaMatata052/video/blob/master/a.mp4?raw=true"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>  <span class="attr">autoplay</span>=<span class="string">"autoplay"</span>&gt;</span></span><br><span class="line">您的浏览器不支持 video 标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果需要隐藏播放控件可以去掉 controls=”controls” ，也可以使用css<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">video</span><span class="selector-pseudo">::-webkit-media-controls</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加置顶功能和标识</title>
    <url>/2018/12/29/hexo-top/</url>
    <content><![CDATA[<p>首先看下效果<br><img src="https://i.loli.net/2018/12/29/5c273ed38214d.png" alt="效果图"><br><a id="more"></a></p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>
<h3 id="新建-修改-文章"><a href="#新建-修改-文章" class="headerlink" title="新建/修改 文章"></a>新建/修改 文章</h3><p>新建或修改文章时在文章<strong>Front-matter</strong>中加入<strong>top: true</strong>即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 无JS实现在线客服的切换效果</span><br><span class="line">date: 2018-12-20 15:05:17</span><br><span class="line">tags:</span><br><span class="line">    - css</span><br><span class="line">    - css3</span><br><span class="line">categories: CSS</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>到此为止，文章的置顶功能就实现了,但是我们还需要给置顶的文章加个标识，如<br><img src="https://i.loli.net/2018/12/29/5c2740bd13582.png" alt><br>So，我们需要加一个图标或者文字标签<br>这里我做了一个简单的，你可以修改一下，做一个好看的图标</p>
</blockquote>
<h3 id="添加标识"><a href="#添加标识" class="headerlink" title="添加标识"></a>添加标识</h3><p>如果你使用的是<strong>next</strong>的主题，打开目录<strong>themes/next/layout/_macro</strong>，找到文件post.swig，搜索<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;/&#123;% if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;% endif %&#125;&gt;</span><br></pre></td></tr></table></figure></p>
<p>大概在65行，在他上面添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">    &lt;span style=&quot;color:#f00;border:1px solid #f00;padding:2px 5px;font-size:12px;&quot;&gt;置顶&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>
<p>这是你会发现标识出现了，但是高度有些错位，在<strong>themes/next/source/_custom</strong>中找到<strong>custom.styl</strong>文件，添加一行<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-title</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这时你就可以看到具体的效果了</p>
<blockquote>
<p>当然你可以添加更好看的图标，只需要修改HTML和CSS即可。</p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>jQueryAjax请求完全版</title>
    <url>/2018/12/19/jquery-ajax/</url>
    <content><![CDATA[<h3 id="jQueryAjax请求完全版"><a href="#jQueryAjax请求完全版" class="headerlink" title="jQueryAjax请求完全版"></a>jQueryAjax请求完全版</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">true</span>, <span class="comment">//true异步，false同步</span></span><br><span class="line">    url: <span class="string">'/uploads/rs/419/nvhogkww/data.json'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params">XHR, TS</span>) </span>&#123; alert(<span class="string">'complete'</span>); &#125;, <span class="comment">//完成回调函数(XHR, TS)</span></span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//XMLHttpRequest.readyState:</span></span><br><span class="line">        <span class="comment">//0 － （未初始化）还没有调用send()方法</span></span><br><span class="line">        <span class="comment">//1 － （载入）已调用send()方法，正在发送请求</span></span><br><span class="line">        <span class="comment">//2 － （载入完成）send()方法执行完成，已经接收到全部响应内容</span></span><br><span class="line">        <span class="comment">//3 － （交互）正在解析响应内容</span></span><br><span class="line">        <span class="comment">//4 － （完成）响应内容解析完成，可以在客户端调用了</span></span><br><span class="line">        <span class="comment">//XMLHttpRequest.status:</span></span><br><span class="line">        <span class="comment">//textStatus: "timeout", "error", "notmodified" 和 "parsererror"。</span></span><br><span class="line">        <span class="comment">//（0）null</span></span><br><span class="line">        <span class="comment">//（1）timeout 超时</span></span><br><span class="line">        <span class="comment">//（2）error</span></span><br><span class="line">        <span class="comment">//（3）notmodified 未修改</span></span><br><span class="line">        <span class="comment">//（4）parsererror 解析错误</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'错误1：'</span> + XMLHttpRequest.readyState);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'错误2：'</span> + textStatus);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'错误3：'</span> + errorThrown);</span><br><span class="line">    &#125;, <span class="comment">//默认值: 自动判断 (xml 或 html)。请求失败时调用此函数。有以下三个参数：XMLHttpRequest 对象、错误信息、（可选）捕获的异常对象。</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123; alert(<span class="string">'success'</span>); &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>html转jsx</title>
    <url>/2020/08/31/html2jsx/</url>
    <content><![CDATA[<h1 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h1><p>之前做的一个阿里需求，是将原有的HTML的静态页面重构成前后分离的项目，要求是用dva-cli脚手架来开发<br>那么就牵扯到一个问题就是这么多的HTML页面肯定不能手动转成jsx语法啊。<br>毕竟差别还是有很多的，尤其是写div的类名<br>我们知道，在普通HTML中是这样写div和类名的<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>但是在jsx语法中尤其是同一div上应用了多个类名，jsx写起来会很让热挠头<br><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div className=&#123;[styles.demo,styles.div1].join(<span class="string">' '</span>)&#125;&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>于是乎就做了一个小工具，可以将html转换为jsx语法，这里需要注意一下styles是我引入的less后赋值的变量名<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'../assets/css/index.css'</span></span><br></pre></td></tr></table></figure></p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>左边输入html点击转换会自动生成在右边的文本域中</p>
<iframe src="/2020/08/31/html2jsx/html2jsx.html" width="600" height="300" frameborder="no" border="0" marginwidth="0" marginheight="0" allowtransparency="yes"></iframe>

<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>这个小Demo的原理非常简单，就是通过正则匹配到所有<code>class=“”</code>里的内容，然后通过<code>replace</code>方法替换<br>值得注意的是<code>replace</code>方法的第二个参数可以传一个固定的字符串，也可以传一个函数，函数的返回值作为替换的内容<br>这里我们不能把类名替换成固定的值，而是需要将类名做处理，所有在<code>replace</code>第二个参数中传入一个函数，函数的参数，就是匹配到的内容<br>获得内容就很好办了，先把类名用空格拆分成数组，然后写个jsx中的格式即可</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>).value            </span><br><span class="line">    con = con.replace(<span class="regexp">/class=".*?"/ig</span>, value =&gt;&#123;</span><br><span class="line">        value = value.replace(<span class="string">'class="'</span>,<span class="string">''</span>).replace(<span class="string">'"'</span>,<span class="string">''</span>)</span><br><span class="line">        value = value.split(<span class="string">' '</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(value)</span><br><span class="line">        <span class="keyword">if</span>(value.length&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            value = value.map(<span class="function"><span class="params">item</span>=&gt;</span><span class="string">`styles.<span class="subst">$&#123;item&#125;</span>`</span>)</span><br><span class="line">            value = <span class="string">`[<span class="subst">$&#123;value.join(<span class="string">','</span>)&#125;</span>].join(' ')`</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            value = <span class="string">`styles.<span class="subst">$&#123;value&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`className=&#123;<span class="subst">$&#123;value&#125;</span>&#125;`</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'text2'</span>).value = con</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>react jsx</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript思维导图</title>
    <url>/2018/12/20/js-mind-map/</url>
    <content><![CDATA[<p>下面附上十张javascript思维导图，如果把里面的内容全部掌握，那就是高手了。思维导图提供给我们一个整体的知识体系，也可以说是一种工具，废话不多说，上图：<br><a id="more"></a></p>
<h2 id="javascript数据类型"><a href="#javascript数据类型" class="headerlink" title="javascript数据类型"></a>javascript数据类型</h2><img src="/2018/12/20/js-mind-map/01.gif">
<h2 id="javascript数组"><a href="#javascript数组" class="headerlink" title="javascript数组"></a>javascript数组</h2><img src="/2018/12/20/js-mind-map/02.gif">
<h2 id="javascript运算符"><a href="#javascript运算符" class="headerlink" title="javascript运算符"></a>javascript运算符</h2><img src="/2018/12/20/js-mind-map/03.gif">
<h2 id="javascript正则表达式"><a href="#javascript正则表达式" class="headerlink" title="javascript正则表达式"></a>javascript正则表达式</h2><img src="/2018/12/20/js-mind-map/04.gif">
<h2 id="javascript字符串函数"><a href="#javascript字符串函数" class="headerlink" title="javascript字符串函数"></a>javascript字符串函数</h2><img src="/2018/12/20/js-mind-map/05.gif">
<h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><img src="/2018/12/20/js-mind-map/06.gif">
<h2 id="DOM基本操作"><a href="#DOM基本操作" class="headerlink" title="DOM基本操作"></a>DOM基本操作</h2><img src="/2018/12/20/js-mind-map/07.gif">
<h2 id="javascript变量"><a href="#javascript变量" class="headerlink" title="javascript变量"></a>javascript变量</h2><img src="/2018/12/20/js-mind-map/08.gif">
<h2 id="javascript函数基础"><a href="#javascript函数基础" class="headerlink" title="javascript函数基础"></a>javascript函数基础</h2><img src="/2018/12/20/js-mind-map/09.gif">
<h2 id="javascript流程控制"><a href="#javascript流程控制" class="headerlink" title="javascript流程控制"></a>javascript流程控制</h2><img src="/2018/12/20/js-mind-map/10.gif">
<blockquote>
<p>本文转自<a href="https://www.cnblogs.com/xianyulaodi/p/5886128.html" target="_blank" rel="noopener">咸鱼老弟https://www.cnblogs.com/xianyulaodi/p/5886128.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>利用iconfont.cn快速制作前端图标</title>
    <url>/2018/12/22/iconfont/</url>
    <content><![CDATA[<blockquote>
<p>以前不会用iconfont.cn的时候，只知道这是个图标库，可以吧图片下载下来，然后制作成图片，在写入HTML。<br>其实没有这么麻烦，iconfont支持三种图片引入方式——Unicode，字体，svg</p>
</blockquote>
<a id="more"></a>
<h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>首先登录<a href="https://iconfont.cn" target="_blank" rel="noopener">iconfont</a> 这里我使用的是Github账号直接登录，你可以使用微博账号登录<br><img src="/2018/12/22/iconfont/01.jpg"></p>
<h2 id="搜索图标"><a href="#搜索图标" class="headerlink" title="搜索图标"></a>搜索图标</h2><p>然后再首页搜索你需要的图标，可以使用中文搜索（建议英文）<br><img src="/2018/12/22/iconfont/02.jpg"></p>
<p>找到想要的图标之后不要点击下载按钮，要点击购物车按钮，这样才能将多个图片集合到一个项目里<br><img src="/2018/12/22/iconfont/03.jpg"></p>
<p>通常一个项目或网站肯定不止一个图，这时你可以继续搜素其他图标并加入购物车<br>当你需要将所有图标制作成网站需要的字体文件或者svg文件引入时，点击右上角的购物车按钮<br><img src="/2018/12/22/iconfont/04.jpg"></p>
<p>这里的三个选项分别是：<br><img src="/2018/12/22/iconfont/05.jpg"></p>
<table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>添加至项目</td>
<td style="text-align:center">添加到新建或已有的项目（后期可继续添加图标）</td>
</tr>
<tr>
<td>下载素材</td>
<td style="text-align:center">下载购物车里的图标素材，最后可以下载AI，SVG,PNG格式的图片文件</td>
</tr>
<tr>
<td>下载代码</td>
<td style="text-align:center">下载生成的引入文件 包含CSS，font，svg等，与添加项目类似，但是后期无法继续添加图标</td>
</tr>
</tbody>
</table>
<p>这里为了后期能够继续增加或删除图标，我们尽量选择添加至项目，如果没有项目，他会提示你新建项目，根据提示操作就好，这里不再赘述。</p>
<h2 id="引用图标"><a href="#引用图标" class="headerlink" title="引用图标"></a>引用图标</h2><p>制作好的图标可以在我的项目中看到,可以选择引用iconfont的远程地址（CDN方式），也可以下载到本地引入，如果是使用CDN方式，需要依次点击查看在线链接–生成链接<br><img src="/2018/12/22/iconfont/06.jpg"></p>
<h3 id="Unicode方式"><a href="#Unicode方式" class="headerlink" title="Unicode方式"></a>Unicode方式</h3><p>需要在你的css中加入上面的代码<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'iconfont'</span>;  <span class="comment">/* project id 978636 */</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_978636_9jco6oz9c8i.eot'</span>);</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_978636_9jco6oz9c8i.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_978636_9jco6oz9c8i.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_978636_9jco6oz9c8i.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_978636_9jco6oz9c8i.svg#iconfont'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果某个地方需要使用图标，HTML和CSS分别是这样</p>
<h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dome"</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;#xe654;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.dome</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'iconfont'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的&amp; # x e 6 5 4;就是图标对应代码<br><img src="/2018/12/22/iconfont/07.jpg"></p>
<h3 id="Font-class"><a href="#Font-class" class="headerlink" title="Font class"></a>Font class</h3><p>font class是一个链接，需要用link引入</p>
<h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//at.alicdn.com/t/font_978636_9jco6oz9c8i.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dome"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="css-1"><a href="#css-1" class="headerlink" title="css"></a>css</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.dome</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'iconfont'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="symbol引用"><a href="#symbol引用" class="headerlink" title="symbol引用"></a>symbol引用</h3><p>拷贝项目下面生成的symbol代码：</p>
<h4 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js</span><br></pre></td></tr></table></figure>
<p>加入通用css代码：</p>
<h4 id="css-2"><a href="#css-2" class="headerlink" title="css"></a>css</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.icon</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">1em</span>; <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">       <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span><br><span class="line">       <span class="attribute">fill</span>: currentColor;</span><br><span class="line">       <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>挑选相应图标并获取类名，应用于页面</p>
<h4 id="html-1"><a href="#html-1" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">"icon"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#icon-xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里的#icon-XXX对应图标代码 如icon-menu</p>
<blockquote>
<p>最后，墙裂建议使用Font class方式引入，兼容度最高，图标大小可以通过font-size控制，颜色可以通过color控制，很方便。</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>inconfont</tag>
        <tag>图标</tag>
      </tags>
  </entry>
  <entry>
    <title>制作菱形图片遮罩</title>
    <url>/2019/03/01/mark/</url>
    <content><![CDATA[<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>使用box-shadow制作菱形遮罩</p>
<p>需要在原有结构内增加一个shaow遮罩层</p>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/300/300"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shadow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>外层div设置相对定位position: relative;<br>将shadow层旋转45度，并设置阴影；<br>box-shadow中的值分别是：<br>box-shadow：水平位移 垂直位移 阴影宽度 模糊程度 颜色<br>这里水平和垂直位移这只为0，即从中间开始向四周出现阴影。 阴影宽度一定要宽于外框，模糊程度可以填0，即不模糊，颜色填白色。</p>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shadow</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">200px</span> <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><iframe src="/2019/03/01/mark/mark.html" width="600" height="600" frameborder="no" border="0" marginwidth="0" marginheight="0" allowtransparency="yes"></iframe>

<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>使用两次旋转达到菱形效果</p>
<h3 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/300/300"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><iframe src="/2019/03/01/mark/mark2.html" width="650" height="500" frameborder="no" border="0" marginwidth="0" marginheight="0" allowtransparency="yes"></iframe>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>科学上网（翻墙）神器【蓝灯】</title>
    <url>/2019/01/21/lantern/</url>
    <content><![CDATA[<p>给大家介绍一款免费限制流量的科学上网神器<strong>蓝灯lantren</strong><br>下载地址：<a href="https://github.com/HakunaMatata052/lantern-binaries" target="_blank" rel="noopener">Github</a><br>里面包含Windows，Android，macOS三个版本。<br>点击对应拓展名文件进入下载即可<br><a id="more"></a></p>
<h2 id="以Windows为例"><a href="#以Windows为例" class="headerlink" title="以Windows为例"></a>以Windows为例</h2><p>点击3.0最新版的exe文件<br><img src="/2019/01/21/lantern/01.png"></p>
<p>点击download下载<br></p>
<p>下载先来后双击安装即可。<br><img src="/2019/01/21/lantern/03.jpg"><br>速度还可以~~</p>
<p>每个月有500MB的免费流量，可以升级到专业版，不限制流量。<br>博主500MB基本足够。<br>而且他采用的是只能切换线路，如果访问的是国内站点，是不通过VPN的，也不会消耗流量。只有当你访问被墙网站的时候才会切换vpn线路。</p>
]]></content>
      <tags>
        <tag>科学上网</tag>
        <tag>翻墙</tag>
      </tags>
  </entry>
  <entry>
    <title>无JS实现在线客服的切换效果</title>
    <url>/2018/12/20/nojs-toggle/</url>
    <content><![CDATA[<p>首先可以看下效果<br><a href="http://www.lofly.cn/" target="_blank" rel="noopener">点我查看</a></p>
<p>这里利用HTML的 【checkbox】类型的【input】和【label】元素的【for】属性<br>和CSS的【:checked】选择器以及【~】选择器</p>
<p>主要的原理是点击【label】使【label】的【for】属性指定id【input】改变选中状态（【:checked】），<br>【input】选中状态改变后，使用css改变【input】后面的元素的显示或隐藏（或定位）。</p>
<a id="more"></a>
<h1 id="首先你必须知道元素的for属性可以控制【checkbox】类型的【input】"><a href="#首先你必须知道元素的for属性可以控制【checkbox】类型的【input】" class="headerlink" title="首先你必须知道元素的for属性可以控制【checkbox】类型的【input】"></a>首先你必须知道<label>元素的for属性可以控制【checkbox】类型的【input】</label></h1><blockquote>
<p>例如：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"dome"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"dome"</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果:</p>
</blockquote>
<iframe src="/2018/12/20/nojs-toggle/01.html" width="600" height="100" frameborder="no" border="0" marginwidth="0" marginheight="0" allowtransparency="yes"></iframe>

<h1 id="然后利用CSS的-选择器-设置input被选中后紧跟的元素的样式"><a href="#然后利用CSS的-选择器-设置input被选中后紧跟的元素的样式" class="headerlink" title="然后利用CSS的 ~ 选择器 设置input被选中后紧跟的元素的样式"></a>然后利用CSS的 ~ 选择器 设置input被选中后紧跟的元素的样式</h1><blockquote>
<p>多提一句<br>~ 选择器表示元素后的同胞元素<br>如：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>~<span class="selector-tag">ul</span>&#123;</span><br><span class="line">　　<span class="attribute">background</span>:<span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>快乐生活<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">li</span>&gt;</span>生活<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">li</span>&gt;</span>生活<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">li</span>&gt;</span>生活<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>会给p元素后所有的ul元素加背景</p>
<p>那么我们需要做的就是为input后的元素做隐藏显示（或改变定位）<br>如何判断需要显示还是隐藏呢？<br>需要用到input的checked属性</p>
<blockquote>
<p>如果需要改变默认状态可以给input加checked=”checked”</p>
</blockquote>
<h1 id="最后具体代码如下"><a href="#最后具体代码如下" class="headerlink" title="最后具体代码如下"></a>最后具体代码如下</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dome"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"toggle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"open"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"toggle"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        打开以后你看到的</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"toggle"</span>&gt;</span>打开<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        关闭以后你看到的</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#toggle</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#toggle</span>~<span class="selector-class">.open</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#toggle</span>~<span class="selector-class">.close</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#toggle</span><span class="selector-pseudo">:checked</span>~<span class="selector-class">.open</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#toggle</span><span class="selector-pseudo">:checked</span>~<span class="selector-class">.close</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果：</p>
</blockquote>
<iframe src="/2018/12/20/nojs-toggle/02.html" width="600" height="500" frameborder="no" border="0" marginwidth="0" marginheight="0" allowtransparency="yes"></iframe>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css3</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Three.js 入门</title>
    <url>/2020/08/24/three.js/</url>
    <content><![CDATA[<h3 id="安装three-js"><a href="#安装three-js" class="headerlink" title="安装three.js"></a>安装three.js</h3><p>使用npm安装three.js<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i three -S</span><br></pre></td></tr></table></figure></p>
<p>导入场景、相机、灯光、渲染器等类<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Scene, PerspectiveCamera, WebGLRenderer ,AmbientLight ,DirectionalLight&#125; <span class="keyword">from</span> <span class="string">"three"</span></span><br></pre></td></tr></table></figure></p>
<p>创建并暴露一个类，定义场景、相机、灯光等，并设置渲染的DOM容器</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Three</span> </span>&#123;</span><br><span class="line">    private scene: Scene</span><br><span class="line">    private camera: PerspectiveCamera</span><br><span class="line">    private renderer: WebGLRenderer</span><br><span class="line">    private $<span class="built_in">window</span>: HTMLElement</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$<span class="built_in">window</span> = <span class="built_in">document</span>.querySelector(<span class="string">"#app"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建场景"><a href="#创建场景" class="headerlink" title="创建场景"></a>创建场景</h3><p>初始化一个场景,这里我设置了一个私有方法，之后会在constructor中调用<br>scene.position.set可以设置场景在坐标系的位置<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建场景</span></span><br><span class="line">private initScene(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.scene = <span class="keyword">new</span> Scene();</span><br><span class="line">    <span class="keyword">this</span>.scene.position.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">this</span>.scene.lookAt(<span class="keyword">this</span>.scene.position);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="创建相机"><a href="#创建相机" class="headerlink" title="创建相机"></a>创建相机</h3><p>接着初始化相机,这里使用的是透视相机PerspectiveCamera，相机接受4个参数，分别是</p>
<ul>
<li>PerspectiveCamera(fov, aspect, near, far)</li>
<li>Fov – 相机的视锥体的垂直视野角</li>
<li>Aspect – 相机视锥体的长宽比</li>
<li>Near – 相机视锥体的近平面</li>
<li>Far – 相机视锥体的远平面<br>相机的位置可以使用camera.position.x，camera.position.y，camera.position.z进行赋值来改变<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建相机</span></span><br><span class="line">private initCamera(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.camera = <span class="keyword">new</span> PerspectiveCamera(</span><br><span class="line">        <span class="number">25</span>,</span><br><span class="line">        <span class="keyword">this</span>.$<span class="built_in">window</span>.clientWidth / <span class="keyword">this</span>.$<span class="built_in">window</span>.clientHeight,</span><br><span class="line">        <span class="number">0.1</span>,</span><br><span class="line">        <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">this</span>.camera.lookAt(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建光源"><a href="#创建光源" class="headerlink" title="创建光源"></a>创建光源</h3><p>接着初始化灯光,这里添加了两个灯光，一个环境光，一个平行光，可添加多个光源<br>灯光的构造函数中传入灯光颜色和透明度，颜色必须是0x+16进制色<br>环境光没有位置属性，平行光可以添加光源的位置，使用light.position.set来设置位置，传入三个参数分别是x坐标，y坐标，z坐标<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建光源</span></span><br><span class="line">private initLight(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="comment">// 环境光</span></span><br><span class="line">    <span class="keyword">this</span>.scene.add(<span class="keyword">new</span> AmbientLight(<span class="number">0xd29c96</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 平行光</span></span><br><span class="line">    <span class="keyword">let</span> light = <span class="keyword">new</span> DirectionalLight(<span class="number">0xffffff</span>, <span class="number">0.6</span>);</span><br><span class="line">    light.position.set(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">this</span>.scene.add(light);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="创建3D渲染器"><a href="#创建3D渲染器" class="headerlink" title="创建3D渲染器"></a>创建3D渲染器</h3><p>接着创建渲染器,使用three内置的WebGLRenderer渲染器来渲染，渲染器可以通过setSize方法设置大小，这里我们设置一个和画布一样大的渲染器，如果渲染尺寸小于画布大小，则超出渲染器大小的位置将不被渲染<br>使用setClearColor方法可以设置渲染区域的背景色<br>最后将渲染器的domElement属性appendChild进需要的DOM标签内即可<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建3D渲染器</span></span><br><span class="line">private initThree(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.renderer = <span class="keyword">new</span> WebGLRenderer();</span><br><span class="line">    <span class="keyword">this</span>.renderer.setSize(</span><br><span class="line">        <span class="keyword">this</span>.$<span class="built_in">window</span>.clientWidth,</span><br><span class="line">        <span class="keyword">this</span>.$<span class="built_in">window</span>.clientHeight</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">this</span>.renderer.setClearColor(<span class="number">0xb34149</span>, <span class="number">1</span>); <span class="comment">//设置背景颜色</span></span><br><span class="line">    <span class="keyword">this</span>.$<span class="built_in">window</span>.appendChild(<span class="keyword">this</span>.renderer.domElement);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接着将这些方法添加进constructor内，让实例创建时自动执行<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Three</span> </span>&#123;</span><br><span class="line">    private scene: Scene</span><br><span class="line">    private camera: PerspectiveCamera</span><br><span class="line">    private renderer: WebGLRenderer</span><br><span class="line">    private $<span class="built_in">window</span>: HTMLElement</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$<span class="built_in">window</span> = <span class="built_in">document</span>.querySelector(<span class="string">"#app"</span>);        </span><br><span class="line">        <span class="keyword">this</span>.initScene();</span><br><span class="line">        <span class="keyword">this</span>.initThree();</span><br><span class="line">        <span class="keyword">this</span>.initCamera();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="开启控制器"><a href="#开启控制器" class="headerlink" title="开启控制器"></a>开启控制器</h3><p>接着使用renderer.render方法就可以渲染了，但是这样只能渲染一帧画面，我们需要做鼠标控制，或者3D动画是需要实时渲染的<br>例如加一个鼠标控制<br>首先导入控制器<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; OrbitControls &#125; <span class="keyword">from</span> <span class="string">'three/examples/jsm/controls/OrbitControls'</span>;</span><br></pre></td></tr></table></figure></p>
<p>接着初始化这个控制器，这里依然使用一个方法,然后添加进constructor<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启控制器</span></span><br><span class="line">private initControls(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.controls = <span class="keyword">new</span> OrbitControls(<span class="keyword">this</span>.camera, <span class="keyword">this</span>.renderer.domElement);</span><br><span class="line">    <span class="keyword">this</span>.controls.enableDamping = <span class="literal">true</span>; <span class="comment">// 惯性滑动，滑动大小默认0.25</span></span><br><span class="line">    <span class="keyword">this</span>.controls.dampingFactor = <span class="number">0.05</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// //控制</span></span><br><span class="line">    <span class="keyword">this</span>.controls.enableZoom = <span class="literal">false</span>; <span class="comment">// 缩放</span></span><br><span class="line">    <span class="keyword">this</span>.controls.enableKeys = <span class="literal">false</span>; <span class="comment">// 键盘</span></span><br><span class="line">    <span class="keyword">this</span>.controls.enablePan = <span class="literal">false</span>; <span class="comment">// 是否开启右键拖拽</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旋转速度</span></span><br><span class="line">    <span class="keyword">this</span>.controls.rotateSpeed = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动旋转</span></span><br><span class="line">    <span class="keyword">this</span>.controls.autoRotate = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.controls.autoRotateSpeed = <span class="number">-0.01</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置仰视角和俯视角,后续进行重置</span></span><br><span class="line">    <span class="keyword">this</span>.controls.maxPolarAngle = <span class="built_in">Math</span>.PI / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.controls.minPolarAngle = <span class="built_in">Math</span>.PI / <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">this</span>.controls.zoomSpeed = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//设置相机距离原点的最远距离</span></span><br><span class="line">    <span class="comment">// controls.minDistance = 120;</span></span><br><span class="line">    <span class="comment">//设置相机距离原点的最远距离</span></span><br><span class="line">    <span class="comment">// controls.maxDistance = 120 + 120 * 0.5;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p>这样添加的控制器虽然可以控制场景，但是画布不会重新渲染，所以我们需要添加一个渲染函数并且每次调用自身来更新画面<br>这里使用的是requestAnimationFrame函数来调用自身，也可以使用setInterval但是setInterval是固定时间渲染，如果场景过大，过复杂，可能时间到了还没渲染好又得渲染下一帧，这样会导致页面卡死<br>requestAnimationFrame没有固定时间，他会在当前帧渲染完毕后执行下一次，这样就不会导致页面卡死了<br>接着在render方法中使用controls.update()来更新每次的控制，使用renderer.render来更新画面<br>最后在constructor函数中调用render即可<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">private render(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.render());</span><br><span class="line">    <span class="keyword">this</span>.controls.update();</span><br><span class="line">    <span class="keyword">this</span>.renderer.render(<span class="keyword">this</span>.scene, <span class="keyword">this</span>.camera);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后在需要需要的地方导入并new Three()就可以了</p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><iframe src="/2020/08/24/three.js/three.html" width="600" height="600" frameborder="no" border="0" marginwidth="0" marginheight="0" allowtransparency="yes"></iframe>]]></content>
      <categories>
        <category>JS</category>
        <category>three.js</category>
      </categories>
      <tags>
        <tag>three.js</tag>
        <tag>threejs</tag>
        <tag>three</tag>
      </tags>
  </entry>
  <entry>
    <title>Three.js设置DIV跟随场景的两种方法</title>
    <url>/2020/08/26/three-sprite-css2d/</url>
    <content><![CDATA[<h1 id="方法一：使用Sprite对象"><a href="#方法一：使用Sprite对象" class="headerlink" title="方法一：使用Sprite对象"></a>方法一：使用Sprite对象</h1><p>首先实例化一个SpriteMaterial，设置好材质或颜色，可以是透明的<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> spriteMap = <span class="keyword">new</span> TextureLoader().load(<span class="string">"./static/img/img.png"</span>);</span><br><span class="line"><span class="keyword">let</span> pinMaterial = <span class="keyword">new</span> SpriteMaterial(&#123;</span><br><span class="line">    map: spriteMap</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>然后创建一个div或者绑定html上现有的div元素,设置好默认的位置属性，可以用css来设置默认样式<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">Div.className = <span class="string">'text'</span></span><br><span class="line">Div.id = <span class="string">"text"</span></span><br><span class="line">Div.style.left = <span class="number">0</span> + <span class="string">'px'</span></span><br><span class="line">Div.style.top = <span class="number">0</span> + <span class="string">'px'</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(Div)</span><br></pre></td></tr></table></figure></p>
<p>然后声明一个坐标点并初始化，之后用来保存每次改变后的坐标点<br><a id="more"></a><br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> circleData: Vector3</span><br><span class="line">...</span><br><span class="line"><span class="keyword">this</span>.circleData = <span class="keyword">new</span> Vector3(<span class="number">-0.2</span>, <span class="number">2.3</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<p>接着创建一个创建一个Sprite对象（这里我使用的是webpack引用依赖的方式，因此不需要THREE.Sprite）,并设置坐标点是初始化的坐标点<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pin: Sprite = <span class="keyword">new</span> Sprite(pinMaterial);</span><br><span class="line">pin.position.set(</span><br><span class="line">    <span class="keyword">this</span>.circleData.x,</span><br><span class="line">    <span class="keyword">this</span>.circleData.y,</span><br><span class="line">    <span class="keyword">this</span>.circleData.z</span><br><span class="line">);</span><br><span class="line">pin.scale.set(<span class="number">0.3</span>, <span class="number">0.3</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p>
<p>然后写一个方法用来更新坐标点并设置div的坐标，其原理是每次render时使用Vector3中的project方法将Sprite对象中的世界坐标点转换为屏幕坐标点，并且改变div的css位置信息<br>project接受一个参数是相机实例<br>最后通过一个固定公式转换成屏幕坐标点<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> textShow(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> worldVector = <span class="keyword">new</span> Vector3(</span><br><span class="line">        <span class="keyword">this</span>.circleData.x,</span><br><span class="line">        <span class="keyword">this</span>.circleData.y,</span><br><span class="line">        <span class="keyword">this</span>.circleData.z</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">let</span> standardVector = worldVector.project(<span class="keyword">this</span>.camera);</span><br><span class="line">    <span class="keyword">let</span> a = <span class="keyword">this</span>.$<span class="built_in">window</span>.clientWidth / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="keyword">this</span>.$<span class="built_in">window</span>.clientHeight / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">Math</span>.round(standardVector.x * a + a);</span><br><span class="line">    <span class="keyword">let</span> y = <span class="built_in">Math</span>.round(-standardVector.y * b + b);</span><br><span class="line">    <span class="keyword">let</span> Div: HTMLElement = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>)</span><br><span class="line">    Div.style.left = x + <span class="number">30</span> + <span class="string">"px"</span>;</span><br><span class="line">    Div.style.top = y + <span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后在render方法中调用textShow方法即可<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> render(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.render());</span><br><span class="line">    <span class="keyword">this</span>.textShow();</span><br><span class="line">    <span class="keyword">this</span>.renderer.render(<span class="keyword">this</span>.scene, <span class="keyword">this</span>.camera); <span class="comment">// 必须放在这个位置</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="方法二：使用CSS2DObject和CSS2DRenderer渲染器"><a href="#方法二：使用CSS2DObject和CSS2DRenderer渲染器" class="headerlink" title="方法二：使用CSS2DObject和CSS2DRenderer渲染器"></a>方法二：使用CSS2DObject和CSS2DRenderer渲染器</h1><p>这个方法的原理是将dom元素通过CSS2DObject方法转换为three对象，然后利用CSS2DRenderer渲染器将其渲染在页面上<br>首先引入CSS2DObject和CSS2DRenderer<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CSS2DObject, CSS2DRenderer &#125; <span class="keyword">from</span> <span class="string">"three/examples/jsm/renderers/CSS2DRenderer"</span>;</span><br></pre></td></tr></table></figure></p>
<p>接着声明一个CSS2DRenderer<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> labelRenderer: CSS2DRenderer</span><br></pre></td></tr></table></figure></p>
<p>新建一个div设置一些类名或者样式，然后将div传入CSS2DObject对象的实例中<br>将实例add进场景，再声明一个CSS2DRenderer，通过setSize方法设置渲染器的大小<br>通过labelRenderer.domElement来设置被转换成three对象之后的dom元素的样式<br>最后将labelRenderer.domElement对象appendChild到你想要的元素中<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Div: HTMLElement = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">Div.id = <span class="string">'trace'</span></span><br><span class="line">Div.className = <span class="string">'text'</span></span><br><span class="line">Div.textContent = <span class="string">"CSS2D方法"</span></span><br><span class="line"><span class="keyword">var</span> moonLabel = <span class="keyword">new</span> CSS2DObject(Div);</span><br><span class="line">moonLabel.position.set(<span class="number">0</span>, <span class="number">-3</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">this</span>.scene.add(moonLabel);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.labelRenderer = <span class="keyword">new</span> CSS2DRenderer();</span><br><span class="line"><span class="keyword">this</span>.labelRenderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line"><span class="keyword">this</span>.labelRenderer.domElement.style.position = <span class="string">'absolute'</span>;</span><br><span class="line"><span class="keyword">this</span>.labelRenderer.domElement.style.top = <span class="number">0</span> + <span class="string">'px'</span>;        </span><br><span class="line"><span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.labelRenderer.domElement)</span><br></pre></td></tr></table></figure></p>
<p>最后直接再render方法中执行labelRenderer的render，传入场景和相机<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.labelRenderer.render(<span class="keyword">this</span>.scene, <span class="keyword">this</span>.camera);</span><br></pre></td></tr></table></figure></p>
<p>这里有个问题，如果场景有<code>OrbitControls</code>控制器，那么将会失效，因为CSS2DRenderer会先生成有个和渲染大小一样的div（就是setSize方法设置的大小）<br>如果能正常显示出div那么它的<code>z-index</code>是高于WebGLRenderer渲染出的canvas的层级，这样<code>OrbitControls</code>控制器就会失效<br>解决方法也很简单粗暴：给这个生成出来的div给一个<code>pointer-events: none;</code>样式即可</p>
<p>相比之下，我觉得方案二还是更简单一点，但是如果需要设置多个或不确定数量的div，那么可以使用第一个，使用for循环来处理</p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./assets/less/index.less'</span></span><br><span class="line"><span class="keyword">import</span> &#123; OrbitControls &#125; <span class="keyword">from</span> <span class="string">'three/examples/jsm/controls/OrbitControls'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Scene, PerspectiveCamera, WebGLRenderer, AmbientLight, DirectionalLight, AnimationMixer, AnimationAction, BoxGeometry, MeshBasicMaterial, Mesh, DoubleSide, Clock, Raycaster, Vector2, Vector3, Group, TextureLoader, Sprite, SpriteMaterial, LoopOnce &#125; <span class="keyword">from</span> <span class="string">"three"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; GLTFLoader, GLTF &#125; <span class="keyword">from</span> <span class="string">"three/examples/jsm/loaders/GLTFLoader"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CSS2DObject, CSS2DRenderer &#125; <span class="keyword">from</span> <span class="string">"three/examples/jsm/renderers/CSS2DRenderer"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Three &#123;</span><br><span class="line">    <span class="keyword">private</span> scene: Scene</span><br><span class="line">    <span class="keyword">private</span> camera: PerspectiveCamera</span><br><span class="line">    <span class="keyword">private</span> renderer: WebGLRenderer</span><br><span class="line">    <span class="keyword">private</span> controls: OrbitControls</span><br><span class="line">    <span class="keyword">private</span> mixer: AnimationMixer</span><br><span class="line">    <span class="keyword">private</span> clock: Clock</span><br><span class="line">    <span class="keyword">private</span> mainGroup: Group</span><br><span class="line">    <span class="keyword">private</span> circleGroup: Group</span><br><span class="line">    <span class="keyword">private</span> $<span class="built_in">window</span>: HTMLElement</span><br><span class="line">    <span class="keyword">private</span> fov: <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">private</span> originalCamera: Vector3</span><br><span class="line">    <span class="keyword">private</span> circleData: Vector3</span><br><span class="line">    <span class="keyword">private</span> gltf: GLTF</span><br><span class="line">    <span class="keyword">private</span> anindex: <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">private</span> animation: AnimationAction</span><br><span class="line">    <span class="keyword">private</span> isAnimate: <span class="built_in">boolean</span></span><br><span class="line">    <span class="keyword">private</span> labelRenderer: CSS2DRenderer</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fov = <span class="number">26</span></span><br><span class="line">        <span class="keyword">this</span>.originalCamera = <span class="keyword">new</span> Vector3(<span class="number">-2.3363492363063805</span>, <span class="number">5.3542278380602655</span>, <span class="number">13.216669448945213</span>)</span><br><span class="line">        <span class="keyword">this</span>.$<span class="built_in">window</span> = <span class="built_in">document</span>.querySelector(<span class="string">"#app"</span>);</span><br><span class="line">        <span class="keyword">this</span>.clock = <span class="keyword">new</span> Clock()</span><br><span class="line">        <span class="keyword">this</span>.circleData = <span class="keyword">new</span> Vector3(<span class="number">-0.2</span>, <span class="number">2.3</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">this</span>.anindex = <span class="number">0</span></span><br><span class="line">        <span class="keyword">this</span>.isAnimate = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">this</span>.initScene();</span><br><span class="line">        <span class="keyword">this</span>.initThree();</span><br><span class="line">        <span class="keyword">this</span>.initCamera();</span><br><span class="line">        <span class="keyword">this</span>.initControls()</span><br><span class="line">        <span class="keyword">this</span>.initLight();</span><br><span class="line">        <span class="keyword">this</span>.initPulseCircle()</span><br><span class="line">        <span class="keyword">this</span>.initTrace()</span><br><span class="line">        <span class="keyword">this</span>.render()</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.onWindowResize());</span><br><span class="line">        <span class="keyword">this</span>.renderer.domElement.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="params">event</span> =&gt;</span> <span class="keyword">this</span>.modelTrigger(event));</span><br><span class="line">        <span class="keyword">this</span>.renderer.domElement.addEventListener(<span class="string">"touchstart"</span>, <span class="function"><span class="params">event</span> =&gt;</span> <span class="keyword">this</span>.modelTrigger(event));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> loader = <span class="keyword">new</span> GLTFLoader(); <span class="comment">//创建模型加载器对象</span></span><br><span class="line">        <span class="comment">// let dracoloader = new DRACOLoader();//draco加载器</span></span><br><span class="line">        <span class="keyword">const</span> textureLoader = <span class="keyword">new</span> TextureLoader();</span><br><span class="line">        <span class="keyword">const</span> skyboxGeometry = <span class="keyword">new</span> BoxGeometry(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="keyword">const</span> skyboxMaterials = [</span><br><span class="line">            <span class="keyword">new</span> MeshBasicMaterial(&#123; map: textureLoader.load(<span class="string">'./static/textures/rt.png'</span>), side: DoubleSide &#125;),</span><br><span class="line">            <span class="keyword">new</span> MeshBasicMaterial(&#123; map: textureLoader.load(<span class="string">'./static/textures/lf.png'</span>), side: DoubleSide &#125;),</span><br><span class="line">            <span class="keyword">new</span> MeshBasicMaterial(&#123; map: textureLoader.load(<span class="string">'./static/textures/up.png'</span>), side: DoubleSide &#125;),</span><br><span class="line">            <span class="keyword">new</span> MeshBasicMaterial(&#123; map: textureLoader.load(<span class="string">'./static/textures/dn.png'</span>), side: DoubleSide &#125;),</span><br><span class="line">            <span class="keyword">new</span> MeshBasicMaterial(&#123; map: textureLoader.load(<span class="string">'./static/textures/bk.png'</span>), side: DoubleSide &#125;),</span><br><span class="line">            <span class="keyword">new</span> MeshBasicMaterial(&#123; map: textureLoader.load(<span class="string">'./static/textures/ft.png'</span>), side: DoubleSide &#125;),</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">const</span> skyboxMesh = <span class="keyword">new</span> Mesh(skyboxGeometry, skyboxMaterials);</span><br><span class="line">        skyboxMesh.name = <span class="string">'skyboxMesh'</span>;</span><br><span class="line">        skyboxMesh.position.y = <span class="number">97.45</span></span><br><span class="line">        <span class="keyword">this</span>.scene.add(skyboxMesh);</span><br><span class="line"></span><br><span class="line">        loader.load(<span class="string">'./static/models/glb/RobotExpressive.glb'</span>, <span class="function"><span class="params">object</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(object)</span><br><span class="line">            <span class="keyword">this</span>.gltf = object</span><br><span class="line">            <span class="keyword">this</span>.gltf.scene.position.set(<span class="number">0</span>, <span class="number">-2.5</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">this</span>.scene.add(<span class="keyword">this</span>.gltf.scene);</span><br><span class="line">            <span class="keyword">this</span>.mixer = <span class="keyword">new</span> AnimationMixer(<span class="keyword">this</span>.gltf.scene);</span><br><span class="line">            <span class="keyword">this</span>.selectAnim(<span class="number">5</span>, <span class="string">'点我的身体会有惊喜!'</span>, <span class="literal">true</span>)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'submit'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.send()</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"input"</span>).addEventListener(<span class="string">"keyup"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">            <span class="keyword">if</span> (event.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"submit"</span>).click();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> send(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value: <span class="built_in">string</span> = (&lt;HTMLInputElement&gt;<span class="built_in">document</span>.getElementById(<span class="string">'input'</span>)).value;</span><br><span class="line">        (&lt;HTMLInputElement&gt;<span class="built_in">document</span>.getElementById(<span class="string">'input'</span>)).value = <span class="string">""</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/跳舞/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/死/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/闲/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">2</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/开心|哈哈|ha/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">3</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/生气/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">4</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/牛|666/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">5</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/你好|hey|hello/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">6</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/是|不/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">7</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">9</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">this</span>.selectAnim(<span class="number">0</span>, <span class="string">'啦~~啦~~~啦~~~'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">this</span>.selectAnim(<span class="number">1</span>, <span class="string">'狗带！'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">this</span>.selectAnim(<span class="number">2</span>, <span class="string">'无所事事。。。'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">this</span>.selectAnim(<span class="number">3</span>, <span class="string">'开心'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">this</span>.selectAnim(<span class="number">5</span>, <span class="string">'好气哦！'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">this</span>.selectAnim(<span class="number">9</span>, <span class="string">'你牛逼！'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">this</span>.selectAnim(<span class="number">12</span>, <span class="string">'你好！'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">this</span>.selectAnim(<span class="number">13</span>, <span class="string">'yes'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="keyword">this</span>.selectAnim(<span class="number">4</span>, <span class="string">'你说什么我听不懂？'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">this</span>.selectAnim(<span class="number">4</span>, <span class="string">'你说什么我听不懂？'</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> modelTrigger(event): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> Sx = event.clientX; <span class="comment">//鼠标单击位置横坐标</span></span><br><span class="line">        <span class="keyword">const</span> Sy = event.clientY; <span class="comment">//鼠标单击位置纵坐标</span></span><br><span class="line">        <span class="comment">//屏幕坐标转标准设备坐标</span></span><br><span class="line">        <span class="keyword">const</span> x = (Sx / <span class="built_in">window</span>.innerWidth) * <span class="number">2</span> - <span class="number">1</span>; <span class="comment">//标准设备横坐标</span></span><br><span class="line">        <span class="keyword">const</span> y = -(Sy / <span class="built_in">window</span>.innerHeight) * <span class="number">2</span> + <span class="number">1</span>; <span class="comment">//标准设备纵坐标</span></span><br><span class="line">        <span class="comment">//创建射线投射器对象</span></span><br><span class="line">        <span class="keyword">const</span> raycaster = <span class="keyword">new</span> Raycaster();</span><br><span class="line">        <span class="comment">//返回射线选中的对象</span></span><br><span class="line">        raycaster.setFromCamera(<span class="keyword">new</span> Vector2(x, y), <span class="keyword">this</span>.camera);</span><br><span class="line">        <span class="keyword">const</span> intersects = raycaster.intersectObjects(<span class="keyword">this</span>.scene.children, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">const</span> intersect = intersects.filter(<span class="function"><span class="params">intersect</span> =&gt;</span> intersect.object.name !== <span class="string">'skyboxMesh'</span>)</span><br><span class="line">        <span class="keyword">if</span> (intersect.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> result = intersect.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.object.name === <span class="string">'Torso_0'</span>)</span><br><span class="line">            <span class="keyword">if</span> (result.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.selectAnim(<span class="number">5</span>, <span class="string">'不要乱摸'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span> (intersect[<span class="number">0</span>].object.name) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'Head_1'</span>:</span><br><span class="line">                    <span class="keyword">this</span>.selectAnim(<span class="number">3</span>, <span class="string">'摸头杀'</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'Head_2'</span>:</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'头'</span>)</span><br><span class="line">                    <span class="keyword">this</span>.selectAnim(<span class="number">1</span>, <span class="string">'我的眼睛！！'</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'Torso_1'</span>:</span><br><span class="line">                    <span class="keyword">this</span>.selectAnim(<span class="number">12</span>, <span class="string">'给我捶捶背'</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'FootL'</span>:</span><br><span class="line">                    <span class="keyword">this</span>.selectAnim(<span class="number">3</span>, <span class="string">'左脚可以摸'</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'FootR'</span>:</span><br><span class="line">                    <span class="keyword">this</span>.selectAnim(<span class="number">5</span>, <span class="string">'别碰我的jiong'</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> selectAnim(index: <span class="built_in">number</span>, text?: <span class="built_in">string</span>, loop?: <span class="built_in">boolean</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isAnimate) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.isAnimate = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// animation</span></span><br><span class="line">        <span class="keyword">this</span>.mixer.uncacheClip(<span class="keyword">this</span>.gltf.animations[<span class="keyword">this</span>.anindex])</span><br><span class="line">        <span class="keyword">this</span>.animation = <span class="keyword">this</span>.mixer.clipAction(<span class="keyword">this</span>.gltf.animations[index])</span><br><span class="line">        <span class="keyword">this</span>.animation.clampWhenFinished = <span class="literal">true</span>;   <span class="comment">//播放完停留在最后一帧</span></span><br><span class="line">        <span class="keyword">if</span> (!loop) &#123;</span><br><span class="line">            <span class="keyword">this</span>.animation.setLoop(LoopOnce, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.animation.fadeIn(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">this</span>.animation.play()</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.isAnimate = <span class="literal">false</span></span><br><span class="line">        &#125;, <span class="keyword">this</span>.gltf.animations[index].duration * <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">this</span>.anindex = index</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>).innerText = text</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建场景</span></span><br><span class="line">    <span class="keyword">private</span> initScene(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.scene = <span class="keyword">new</span> Scene();</span><br><span class="line">        <span class="keyword">this</span>.scene.position.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">this</span>.scene.lookAt(<span class="keyword">this</span>.scene.position);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建相机</span></span><br><span class="line">    <span class="keyword">private</span> initCamera(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.camera = <span class="keyword">new</span> PerspectiveCamera(</span><br><span class="line">            <span class="keyword">this</span>.fov,</span><br><span class="line">            <span class="keyword">this</span>.$<span class="built_in">window</span>.clientWidth / <span class="keyword">this</span>.$<span class="built_in">window</span>.clientHeight,</span><br><span class="line">            <span class="number">0.1</span>,</span><br><span class="line">            <span class="number">5000</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">this</span>.camera.position.x = <span class="keyword">this</span>.originalCamera.x</span><br><span class="line">        <span class="keyword">this</span>.camera.position.y = <span class="keyword">this</span>.originalCamera.y</span><br><span class="line">        <span class="keyword">this</span>.camera.position.z = <span class="keyword">this</span>.originalCamera.z</span><br><span class="line">        <span class="keyword">this</span>.camera.lookAt(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建3D渲染器</span></span><br><span class="line">    <span class="keyword">private</span> initThree(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.renderer = <span class="keyword">new</span> WebGLRenderer();</span><br><span class="line">        <span class="keyword">this</span>.renderer.setSize(</span><br><span class="line">            <span class="keyword">this</span>.$<span class="built_in">window</span>.clientWidth,</span><br><span class="line">            <span class="keyword">this</span>.$<span class="built_in">window</span>.clientHeight</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">this</span>.renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line">        <span class="keyword">this</span>.renderer.setClearColor(<span class="number">0xb34149</span>, <span class="number">1</span>); <span class="comment">//设置背景颜色</span></span><br><span class="line">        <span class="keyword">this</span>.$<span class="built_in">window</span>.appendChild(<span class="keyword">this</span>.renderer.domElement);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建光源</span></span><br><span class="line">    <span class="keyword">private</span> initLight(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// 环境光</span></span><br><span class="line">        <span class="keyword">this</span>.scene.add(<span class="keyword">new</span> AmbientLight(<span class="number">0xd29c96</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 平行光</span></span><br><span class="line">        <span class="keyword">let</span> light = <span class="keyword">new</span> DirectionalLight(<span class="number">0xffffff</span>, <span class="number">0.6</span>);</span><br><span class="line">        light.position.set(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">this</span>.scene.add(light);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启控制器</span></span><br><span class="line">    <span class="keyword">private</span> initControls(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.controls = <span class="keyword">new</span> OrbitControls(<span class="keyword">this</span>.camera, <span class="keyword">this</span>.renderer.domElement);</span><br><span class="line">        <span class="keyword">this</span>.controls.enableDamping = <span class="literal">true</span>; <span class="comment">// 惯性滑动，滑动大小默认0.25</span></span><br><span class="line">        <span class="keyword">this</span>.controls.dampingFactor = <span class="number">0.05</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// //控制</span></span><br><span class="line">        <span class="keyword">this</span>.controls.enableZoom = <span class="literal">true</span>; <span class="comment">// 缩放</span></span><br><span class="line">        <span class="keyword">this</span>.controls.enableKeys = <span class="literal">true</span>; <span class="comment">// 键盘</span></span><br><span class="line">        <span class="keyword">this</span>.controls.enablePan = <span class="literal">false</span>; <span class="comment">// 是否开启右键拖拽</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 旋转速度</span></span><br><span class="line">        <span class="keyword">this</span>.controls.rotateSpeed = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动旋转</span></span><br><span class="line">        <span class="keyword">this</span>.controls.autoRotate = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.controls.autoRotateSpeed = <span class="number">-0.01</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置仰视角和俯视角,后续进行重置</span></span><br><span class="line">        <span class="keyword">this</span>.controls.maxPolarAngle = <span class="built_in">Math</span>.PI / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">this</span>.controls.minPolarAngle = <span class="built_in">Math</span>.PI / <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">this</span>.controls.zoomSpeed = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//设置相机距离原点的最远距离</span></span><br><span class="line">        <span class="comment">// controls.minDistance = 120;</span></span><br><span class="line">        <span class="comment">//设置相机距离原点的最远距离</span></span><br><span class="line">        <span class="comment">// controls.maxDistance = 120 + 120 * 0.5;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建发光点</span></span><br><span class="line">    <span class="keyword">private</span> initPulseCircle(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.mainGroup = <span class="keyword">new</span> Group();</span><br><span class="line">        <span class="keyword">this</span>.scene.add(<span class="keyword">this</span>.mainGroup);</span><br><span class="line">        <span class="keyword">var</span> spriteMap = <span class="keyword">new</span> TextureLoader().load(<span class="string">"./static/img/img.png"</span>);</span><br><span class="line">        <span class="keyword">let</span> pinMaterial = <span class="keyword">new</span> SpriteMaterial(&#123;</span><br><span class="line">            map: spriteMap</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.circleGroup = <span class="keyword">new</span> Group();</span><br><span class="line">        <span class="keyword">let</span> container = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">        container.className = <span class="string">'show'</span></span><br><span class="line">        <span class="keyword">let</span> Div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">        Div.className = <span class="string">'text'</span></span><br><span class="line">        Div.id = <span class="string">"text"</span></span><br><span class="line">        Div.style.left = <span class="number">0</span> + <span class="string">'px'</span></span><br><span class="line">        Div.style.top = <span class="number">0</span> + <span class="string">'px'</span></span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(Div)</span><br><span class="line">        <span class="keyword">let</span> pin: Sprite = <span class="keyword">new</span> Sprite(pinMaterial);</span><br><span class="line">        pin.position.set(</span><br><span class="line">            <span class="keyword">this</span>.circleData.x,</span><br><span class="line">            <span class="keyword">this</span>.circleData.y,</span><br><span class="line">            <span class="keyword">this</span>.circleData.z</span><br><span class="line">        );</span><br><span class="line">        pin.scale.set(<span class="number">0.3</span>, <span class="number">0.3</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.circleGroup.add(pin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发光点DOM文本</span></span><br><span class="line">    <span class="keyword">private</span> textShow(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> worldVector = <span class="keyword">new</span> Vector3(</span><br><span class="line">            <span class="keyword">this</span>.circleData.x,</span><br><span class="line">            <span class="keyword">this</span>.circleData.y,</span><br><span class="line">            <span class="keyword">this</span>.circleData.z</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">let</span> standardVector = worldVector.project(<span class="keyword">this</span>.camera);</span><br><span class="line">        <span class="keyword">let</span> a = <span class="keyword">this</span>.$<span class="built_in">window</span>.clientWidth / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">let</span> b = <span class="keyword">this</span>.$<span class="built_in">window</span>.clientHeight / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="built_in">Math</span>.round(standardVector.x * a + a);</span><br><span class="line">        <span class="keyword">let</span> y = <span class="built_in">Math</span>.round(-standardVector.y * b + b);</span><br><span class="line">        <span class="keyword">let</span> Div: HTMLElement = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>)</span><br><span class="line">        Div.style.left = x + <span class="number">30</span> + <span class="string">"px"</span>;</span><br><span class="line">        Div.style.top = y + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> initTrace(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> Div: HTMLElement = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">        Div.id = <span class="string">'trace'</span></span><br><span class="line">        Div.className = <span class="string">'text'</span></span><br><span class="line">        Div.textContent = <span class="string">"Moon"</span></span><br><span class="line">        <span class="keyword">var</span> moonLabel = <span class="keyword">new</span> CSS2DObject(Div);</span><br><span class="line">        moonLabel.position.set(<span class="number">0</span>, <span class="number">-3</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">this</span>.scene.add(moonLabel);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.labelRenderer = <span class="keyword">new</span> CSS2DRenderer();</span><br><span class="line">        <span class="keyword">this</span>.labelRenderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line">        <span class="keyword">this</span>.labelRenderer.domElement.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">        <span class="keyword">this</span>.labelRenderer.domElement.style.top = <span class="number">0</span> + <span class="string">'px'</span>;        </span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.labelRenderer.domElement)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> render(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.render());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mixer) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mixer.update(<span class="keyword">this</span>.clock.getDelta());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.controls.update();</span><br><span class="line">        <span class="keyword">this</span>.textShow();</span><br><span class="line">        <span class="keyword">this</span>.renderer.render(<span class="keyword">this</span>.scene, <span class="keyword">this</span>.camera); <span class="comment">// 必须放在这个位置</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.labelRenderer.render(<span class="keyword">this</span>.scene, <span class="keyword">this</span>.camera);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> onWindowResize(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line">        <span class="keyword">this</span>.camera.aspect = <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.innerHeight;</span><br><span class="line">        <span class="keyword">this</span>.camera.updateProjectionMatrix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
        <category>three.js</category>
      </categories>
      <tags>
        <tag>three.js</tag>
        <tag>threejs</tag>
        <tag>three</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise和async/await</title>
    <url>/2020/08/25/promise/</url>
    <content><![CDATA[<h3 id="为什么要用Promise"><a href="#为什么要用Promise" class="headerlink" title="为什么要用Promise"></a>为什么要用Promise</h3><p>一般情况我们一次性调用API就可以完成请求。<br>有些情况需要多次调用服务器API，就会形成一个链式调用，比如为了完成一个功能，我们需要调用API1、API2、API3，依次按照顺序进行调用，这个时候就会出现回调地狱的问题</p>
<h3 id="Promise的链式结构"><a href="#Promise的链式结构" class="headerlink" title="Promise的链式结构"></a>Promise的链式结构</h3><p>使用Promise可以做到链式结构，即一个请求结束后在then方法中执行下一个异步请求，再下一个异步请求放在上一个异步请求的then方法中,但是需要再每个then方法中return一个Promise对象<br>这样我们就得到了一个扁平的结构而不是回调套回调。<br>eg.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        res()</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res2, rej2</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">            res2()</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res3, rej4</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">            res3()</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'结束'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>执行结果是<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">结束</span><br></pre></td></tr></table></figure></p>
<h3 id="使用all方法"><a href="#使用all方法" class="headerlink" title="使用all方法"></a>使用all方法</h3><p>但是通常在真是项目中，每个请求会有单独的方法封装，而且每个Promise会有独立的then方法，这时可以使用Promise对象的all方法<br>他表示无论三个异步请求谁先执行谁后执行，都等待三个异步请求全部结束后执行all中的函数。<br>如果后一个请求需要得到前一个请求中的数据，那么还是需要使用前面的链式结构才行。<br>如果既要使用已经封装好的Promise函数，有需要按步调用，可以使用ES7中的async/await<br>eg.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        res()</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">        res()</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">        res()</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2, promise3]).then(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'结束'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>执行结果是<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">结束</span><br></pre></td></tr></table></figure></p>
<h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><p>首先封装的方法需要return一个Promise对象，接着在请求的函数前面添加async关键字，在请求函数的内部使用变量或常量接受封装的Promise对象即可，但是封装的Promise对象前需要加await<br>这时接收到的结果就是Promise对象中then方法中return的结果<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">"666"</span>)</span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">ajaxAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> r = <span class="keyword">await</span> ajax()    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(r)    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line">ajaxAsync()</span><br></pre></td></tr></table></figure></p>
<p>执行结果是<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span>  <span class="comment">// 5s后</span></span><br><span class="line"><span class="number">666</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>Promise async/await async await 同步异步 异步</tag>
      </tags>
  </entry>
  <entry>
    <title>js求日期差</title>
    <url>/2018/12/19/timeX/</url>
    <content><![CDATA[<h3 id="求时间差函数"><a href="#求时间差函数" class="headerlink" title="求时间差函数"></a>求时间差函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">'2017-02-26'</span>;  <span class="comment">//起始日期</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">'2017-03-02'</span>;  <span class="comment">//结束日期</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = DateDiff(s1,s2);</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">DateDiff</span>(<span class="params">sDate1,  sDate2</span>)</span>&#123;    <span class="comment">//sDate1和sDate2是2002-12-18格式  </span></span><br><span class="line">       <span class="keyword">var</span>  aDate,  oDate1,  oDate2,  iDays  </span><br><span class="line">       aDate  =  sDate1.split(<span class="string">"-"</span>)  </span><br><span class="line">       oDate1  =  <span class="keyword">new</span>  <span class="built_in">Date</span>(aDate[<span class="number">1</span>]   +  aDate[<span class="number">2</span>]  +  <span class="string">'-'</span>  +  aDate[<span class="number">0</span>])    <span class="comment">//转换为12-18-2002格式  </span></span><br><span class="line">       aDate  =  sDate2.split(<span class="string">"-"</span>)  </span><br><span class="line">       oDate2  =  <span class="keyword">new</span>  <span class="built_in">Date</span>(aDate[<span class="number">1</span>]  +  <span class="string">'-'</span>  +  aDate[<span class="number">2</span>]  +  <span class="string">'-'</span>  +  aDate[<span class="number">0</span>])  </span><br><span class="line">       iDays  =  <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.abs(oDate1  -  oDate2)  /  <span class="number">1000</span>  /  <span class="number">60</span>  /  <span class="number">60</span>  /<span class="number">24</span>)    <span class="comment">//把相差的毫秒数转换为天数  </span></span><br><span class="line">       <span class="keyword">return</span>  iDays  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue全局公用函数</title>
    <url>/2018/12/21/vue-global-function/</url>
    <content><![CDATA[<blockquote>
<p>经常在做项目的时候会遇到一个函数在很多组件和页面中调用，如计算时间差，刷新token等操作，这时就需要定义一个全局都能调用的函数</p>
</blockquote>
<a id="more"></a>
<h2 id="新建js文件"><a href="#新建js文件" class="headerlink" title="新建js文件"></a>新建js文件</h2><p>可以放在src的utils文件中，命名index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">exports.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">    Vue.prototype.changeData = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'执行成功'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>在需要调用函数的组件内引入Vue和该函数文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>               <span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> base <span class="keyword">from</span> <span class="string">'../../utils'</span>      <span class="comment">//引入新建的公用函数js</span></span><br><span class="line">Vue.use(base);                      <span class="comment">//使用新建的公用函数js</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果需要全局引用，则将调用函数写在main.js中即可</p>
</blockquote>
]]></content>
      <categories>
        <category>JS</category>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex的使用</title>
    <url>/2018/12/19/vuex/</url>
    <content><![CDATA[<p><img src="/images/01.jpg" alt="VUEX"><br><a id="more"></a></p>
<h2 id="Vuex的使用"><a href="#Vuex的使用" class="headerlink" title="Vuex的使用"></a>Vuex的使用</h2><h3 id="安装Vuex"><a href="#安装Vuex" class="headerlink" title="安装Vuex"></a>安装Vuex</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure>
<blockquote>
<p>淘宝镜像<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install vuex --save</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="新建js文件"><a href="#新建js文件" class="headerlink" title="新建js文件"></a>新建js文件</h3><p>可以放在store文件夹中命名为index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">	state: &#123;</span><br><span class="line">		api:<span class="string">'http://wjdh03.sjgogo.cn/api/'</span>,</span><br><span class="line">		token:<span class="string">"57373A7E05CB44079B2F12C14A5E83A9"</span>,</span><br><span class="line">		domain: <span class="string">"http://www.baidu.com"</span>,</span><br><span class="line">		notice: <span class="literal">true</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">	mutations: &#123;</span><br><span class="line">		domainURI(url) &#123;</span><br><span class="line">			<span class="keyword">var</span> durl = <span class="regexp">/http:\/\/([^\/]+)\//i</span>;</span><br><span class="line">			<span class="keyword">var</span> domain = url.match(durl);</span><br><span class="line">			<span class="keyword">return</span> domain[<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="调用Vuex"><a href="#调用Vuex" class="headerlink" title="调用Vuex"></a>调用Vuex</h3><p>main.js中引入Vuex并使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span>  <span class="comment">//引入Vuex</span></span><br></pre></td></tr></table></figure>
<p>载入Vuex<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vue = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,   <span class="comment">//载入Vuex</span></span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="使用全局状态（变量）"><a href="#使用全局状态（变量）" class="headerlink" title="使用全局状态（变量）"></a>使用全局状态（变量）</h3><p>在需要使用的组件中 使用调用</p>
]]></content>
      <categories>
        <category>JS</category>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建webpack4.0+</title>
    <url>/2020/08/25/webpack/</url>
    <content><![CDATA[<h3 id="初始化npm"><a href="#初始化npm" class="headerlink" title="初始化npm"></a>初始化npm</h3><p>使用-y来快速创建<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></p>
<h3 id="安装webpack和webpack-cli脚手架"><a href="#安装webpack和webpack-cli脚手架" class="headerlink" title="安装webpack和webpack-cli脚手架"></a>安装webpack和webpack-cli脚手架</h3><p>从webpack4.0开始，webpack打包工具和命令行工具就开成两个包了，需要同时安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure></p>
<h3 id="创建工程目录"><a href="#创建工程目录" class="headerlink" title="创建工程目录"></a>创建工程目录</h3><p>新建src目录，之后写的js、html、css等源文件放在这里,在src目录下新建一个index.js作为入口文件<br><code>src/index.js</code>是webpack默认的入口文件目录，因为不需要单独配置，如果不想使用这个路径，需要在<code>webpack.config.js</code>中单独配置<br>此处目录结构应为</p>
<ul>
<li>node_modules</li>
<li>src<ul>
<li>index.js</li>
</ul>
</li>
<li>package.json</li>
</ul>
<h3 id="安装webpack-dev-server"><a href="#安装webpack-dev-server" class="headerlink" title="安装webpack-dev-server"></a>安装webpack-dev-server</h3><p>此时webpack只能每次执行打包命令后才能看到打包结果，开发过程中我们需要实时编译，因此需要一个本地服务<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure></p>
<h3 id="安装html-webpack-plugin插件"><a href="#安装html-webpack-plugin插件" class="headerlink" title="安装html-webpack-plugin插件"></a>安装html-webpack-plugin插件</h3><p>虽然现在可以试试打包js，但是我们的html依然不能进行热更新，而且打包上线时，打包的资源文件一般会进行哈希命名，每次打包手动修改index.html文件中的资源文件名着实很费劲<br>因此需要html-webpack-plugin插件帮我们自动完成资源引用并增加热更新功能<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure></p>
<p>安装好后在项目根目录下新建<code>webpack.config.js</code>文件，并设置html-webpack-plugin的对应html模板<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports =&#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename:<span class="string">'index.html'</span>,</span><br><span class="line">            template:<span class="string">"./src/index.html"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在src下新建index.html文件<br>之后目录应为</p>
<ul>
<li>node_modules</li>
<li>src<ul>
<li>index.js</li>
<li>index.html</li>
</ul>
</li>
<li>package.json</li>
<li>webpack.config.js</li>
</ul>
<h3 id="新增命令行"><a href="#新增命令行" class="headerlink" title="新增命令行"></a>新增命令行</h3><p>在<code>package.json</code>的scripts中新增一个命令<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>:<span class="string">"webpack-dev-server --host 192.168.0.2 --hot --https --port 80 --open"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>其中<br><code>--host 192.138.0.2</code>表示配置本地服务的ip<br><code>--hot</code>表示开启热更新模式<br><code>--https</code>表示开始https<br><code>--port 80</code>表示端口为80<br><code>--open</code>表示启动后自动打开游览器，后面可以跟游览器的标识，不写表示打开默认游览器<br>到此本地服务就搭建完毕了，接下来需要配置loader和打包选项，今天先更到这里</p>
]]></content>
      <categories>
        <category>JS</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>当年的元歌比露娜还秀</title>
    <url>/2020/08/25/yuange/</url>
    <content><![CDATA[<video src="/2020/08/25/yuange/4852abda01b06d0270ff57cff566085c.mp4" controls style="display:block;margin:auto"></video>]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>元歌 王者荣耀</tag>
      </tags>
  </entry>
  <entry>
    <title>使用uniapp打包H5时使用微信SDK</title>
    <url>/2021/03/13/uniapp-wxSDK/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>原本的一个需求是开发微信小程序，但是因为产品变更需求，需要重新改为H5，为了重构页面和前端逻辑不做太大改动，所以决定先把小程序改为uniapp，在用uniapp打包为H5<br>因为uniapp里的方法和小程序类似，所以代码复用率高。<br>有了思路之后就开始着手进行。<br><a id="more"></a></p>
<h2 id="第一步：将微信小程序转为uniapp"><a href="#第一步：将微信小程序转为uniapp" class="headerlink" title="第一步：将微信小程序转为uniapp"></a>第一步：将微信小程序转为uniapp</h2><p>这里使用的是官方出的一款插件<code>miniprogram-to-uniapp</code></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用命令行进行全局安装</p>
<p>windows:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install miniprogram-to-uniapp -g</span><br></pre></td></tr></table></figure></p>
<p>mac &amp; Linux:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install miniprogram-to-uniapp -g</span><br></pre></td></tr></table></figure></p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>使用命令<code>wtu -V</code>验证是否安装成功，返回版本号说明安装成功</p>
<p><img src="/images/WX20210312-111605@2x.png" alt="安装成功"></p>
<h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p>使用命令<code>wtu -i 小程序根目录路径</code>进行转换<br>小程序根目录路径可以是绝对路径，也可以是命令行打开的相对路径<br><img src="/images/WX20210312-112000@2x.png" alt="转换成功"><br>转换成功后在小程序目录同级目录下会生成一个<code>文件名_uni</code>的文件夹</p>
<p>这里存放的就是转换后的uniapp，你可以是用Hbuilder打开，或者使用官方脚手架然后用vscode打开，笔者使用的后者。</p>
<h2 id="第二步引入微信SDK"><a href="#第二步引入微信SDK" class="headerlink" title="第二步引入微信SDK"></a>第二步引入微信SDK</h2><p>由于我们小程序内获取的登录态是小程序的，如果改成微信内登录的H5，需要将登录态转换为微信H5的登录态。<br>这里就需要用到微信的SDK。<br>由于笔者使用的uniapp脚手架，所以需要修改<code>public</code>目录下的<code>index.html</code>文件，即H5的模版文件。（Hbuilder打开的话需要在配置文件中配置模版文件）</p>
<h3 id="引入微信SDK"><a href="#引入微信SDK" class="headerlink" title="引入微信SDK"></a>引入微信SDK</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://res.wx.qq.com/open/js/jweixin-1.2.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在你需要调用的组建里配置微信SDK<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">    debug: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">    appId: <span class="string">''</span>, <span class="comment">// 必填，企业号的唯一标识，此处填写企业号corpid</span></span><br><span class="line">    timestamp: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">    nonceStr: <span class="string">''</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">    signature: <span class="string">''</span>,<span class="comment">// 必填，签名，见附录1</span></span><br><span class="line">    jsApiList: [] <span class="comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这个时候问题就来了！<br>执行会发现<code>wx</code>对象中没有<code>config</code>方法,但是wx对象是存在的？</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>原来是因为uniapp中已经想window中声明了一个wx变量，这个wx变量是小程序的wx对象而不是微信SDK的。<br>因为uniapp在打包时将<code>app.js</code>打包在了<code>&lt;/body&gt;</code>之前，所以我们引入的微信SDK的变量被uniapp的覆盖了。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>找到原因就好办了，直接将SDK在<code>&lt;/body&gt;</code>之后<code>&lt;/html&gt;</code>之前引入。</p>
<p>再跑一下，完美解决！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里找问题原因花了很长时间，因为引入js方式，登录态检测这些我都简化叙述了，还用到了各种抓包，本地代理线上文件。但是思路就是遇到问题可以想想多种解决方案，多打断点，多console。</p>
]]></content>
      <categories>
        <category>JS</category>
        <category>uniapp</category>
      </categories>
      <tags>
        <tag>uniapp</tag>
        <tag>微信SDK</tag>
      </tags>
  </entry>
  <entry>
    <title>无js实现选项卡效果</title>
    <url>/2018/12/19/nojs-tabs/</url>
    <content><![CDATA[<h3 id="无js实现选项卡效果"><a href="#无js实现选项卡效果" class="headerlink" title="无js实现选项卡效果"></a>无js实现选项卡效果</h3><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><iframe src="/dome1/" width="600" height="300" frameborder="no" border="0" marginwidth="0" marginheight="0" allowtransparency="yes"></iframe>

<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>利用锚链接和滚动条实现</p>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>基本功能可以满足，但有两个问题，一是由于改变location的hash实现的定位，会触发浏览器原生滚动行为，体验不好；二是选项卡内容的切换“邦邦邦”过于生硬<br><a id="more"></a></p>
<h1 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">id</span>=<span class="string">"three"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">id</span>=<span class="string">"four"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"link"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"click"</span> <span class="attr">href</span>=<span class="string">"#one"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"click"</span> <span class="attr">href</span>=<span class="string">"#two"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"click"</span> <span class="attr">href</span>=<span class="string">"#three"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"click"</span> <span class="attr">href</span>=<span class="string">"#four"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#ddd</span>;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">80px</span>;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.link</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.click</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: bold;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">	<span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.click</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#345</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h1 id="效果展示-1"><a href="#效果展示-1" class="headerlink" title="效果展示"></a>效果展示</h1><p><a href="https://hakunamatata052.github.io/blog/example/2.html">点击查看效果</a></p>
<h1 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h1><p>基于控件元素focus触发滚动重定位</p>
<h1 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h1><p>选项卡内容切换的时候，还是“邦邦邦”这种干巴巴的效果，并没有滑来滑去那种湿湿的效果</p>
<h1 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a>具体代码</h1><h2 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"three"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"four"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"link"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"click"</span> <span class="attr">for</span>=<span class="string">"one"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"click"</span> <span class="attr">for</span>=<span class="string">"two"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"click"</span> <span class="attr">for</span>=<span class="string">"three"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"click"</span> <span class="attr">for</span>=<span class="string">"four"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10em</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list</span> &gt; <span class="selector-tag">input</span> &#123; </span><br><span class="line">  <span class="attribute">position</span>: absolute; <span class="attribute">top</span>:<span class="number">0</span>; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>; <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>tab</tag>
        <tag>选项卡</tag>
        <tag>无js</tag>
      </tags>
  </entry>
</search>
