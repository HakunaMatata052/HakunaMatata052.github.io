<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[whistle抓包工具]]></title>
    <url>%2F2022%2F04%2F21%2Fwhistle%2F</url>
    <content type="text"><![CDATA[为什么要使用 1、方便在本地模拟修改线上资源 2、防止正式环境与开发环境代码各种资源路径、接口路径不同，导致上线未修改引用的是本地资源 3、可以在真机上审查元素，重构问题一目了然 4、mock数据 5、待补充 如何使用安装Whistle【抓包工具】123npm i whistle -g// 或yarn add global whistle 启动whistle1w2 start 终端代理whistle只是一个抓包工具，他可以拦截并修改请求内容。可以简单的理解为服务端（类似vpn服务器）。有了服务器，你的本机（pc或手机）需要代理(类似于vpn软件) pc端代理安装Chrome的SwitchyOmega插件 点击下载按图示配置代理当SwitchyOmega插件选择proxy时，即表示代理到whistle抓包工具，选择系统代理时，表示使用系统的vpn等代理，如链接ulinkVPN时，或使用其他vpn时，当选择直接链接时，表示不使用任何代理及vpn，此时使用ulinkVPN无效。 移动端代理移动端无需安装插件，直接将wifi链接至和本机电脑统一局域网的wifi中即可。此时选择链接的wifi，在wifi设置中将代理选项打开，ip地址填写电脑的ip地址，此ip地址也可以在whistle工具中查看，本机电脑打开http://127.0.0.1:8899，点击Online即可看到本机ip地址 安装https证书顶部菜单栏点击https勾选如图所示终端已经配置好代理的情况下： 移动端扫码下载安装安全证书 pc端点击Download RootCA（安装选项自行百度） 或直接点击下载ios端需要注意的是，安装好证书后，需要在通用-关于本机-证书信任设置中打开whistle.XXXXXXXXXX抓包此时已经可以进行http和https的抓包了，在network中可以看到被代理的设备发出的http请求，以及请求的参数，返回的内容。代理如何将线上的资源使用本地资源代替？在rules中配置规则，一下时候简单的几种规则1234tencent.com 127.0.0.1 # oa.7jing.com域名下所有资源代理到本地ip，类似于配置hostshttps://tencent.com http://127.0.0.1 # 将https的线上地址代理到没有https的本地环境https://tencent.com https://localhost:8888 # 将线上地址代理到特殊端口的本地环境https://tencent.com/app.js D://doc/app.js # 将线上某个文件代理到本地文件 微信内审查元素使用vconsole虽然能查看大部分页面dom，请求等，但是无法直观的看到某个重构页面的dom具体位置，大小，内外边距等。使用Whistle整合的weinre即可在电脑端审查移动设备的dom元素。首先在rules中配置1https://* weinre:// # 表示将所有https请求通过weinre工具抓包，也可设置单独的域名或页面 打开顶部导航中的Weinre即可看到移动设备中打开的页面地址，点击地址后再点击顶部菜单中红的Elements即可查看移动设备中的dom节点。mock数据Whistle可以安装各种插件，mock数据可以安装vase具体用法自行百度吧！]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>whistle 代理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用vscode中的eslint插件在非模块化的项目中进行代码提示和格式化]]></title>
    <url>%2F2022%2F01%2F05%2Fvscode-eslint%2F</url>
    <content type="text"><![CDATA[eslint可以在模块化开发的项目中对代码进行提示和格式化，也可以配合vscode的eslint插件进行提示和格式化。那在非模块化的项目中如何达到同样效果呢？比如只有一个index.html和index.js的普通网页中。如图 接下来，讲一下如何使用使用全局eslint依赖和vscode进行代码格式化 安装全局eslint（建议，也可以安装到本地–跳过本步）123sudo npm i eslint -g// orsudo yarn global add eslint 初始化一个项目找一个文件夹来初始化项目，这个文件夹的作用是让vscode来查找eslint插件使用所需依赖，和查找eslint规则的。所以需要放在一个安全点（不容易被清理掉）的文件夹内，我是放在/Users/xxx/vscode-eslint里。然后就想正常做一个模块化开发项目一样，初始化 — 安装依赖123cd vscode-eslintnpm init -ynpm i 初始化eslint项目初始化完成后，利用全局依赖eslint来初始化eslint，如果不使用全局的eslint也可以本地安装，做法类似。1eslint --init根据自己的需要选择初始化中的选项。初始化完成后需要修改.eslintrc.js文件。我的文件内配置了typescript相关插件，不需要的化可以删掉，需要的话，还要安装typescript相关依赖（自行Google）。.eslintrc.js文件中的rules就是将来vscode代码提示和格式化使用规则了。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199module.exports = &#123; &#x27;env&#x27;: &#123; &#x27;browser&#x27;:true, &#x27;node&#x27;:true, &#x27;commonjs&#x27;:true, &#x27;amd&#x27;:true, &#x27;es6&#x27;:true, &#x27;mocha&#x27;:true, &#x27;es2021&#x27;: true, &#125;, &#x27;extends&#x27;: [ &#x27;eslint:recommended&#x27;, &#x27;plugin:@typescript-eslint/recommended&#x27;, ], &#x27;parser&#x27;: &#x27;@typescript-eslint/parser&#x27;, &#x27;parserOptions&#x27;: &#123; &#x27;ecmaVersion&#x27;: 13, &#x27;sourceType&#x27;: &#x27;module&#x27;, &#125;, &#x27;plugins&#x27;: [ &#x27;@typescript-eslint&#x27;, ], &#x27;rules&#x27;: &#123; &#x27;@typescript-eslint/no-var-requires&#x27;: 0, // 没有定义requires() &#x27;no-alert&#x27;: 0,// 禁止使用alert confirm prompt &#x27;no-array-constructor&#x27;: 2,// 禁止使用数组构造器 &#x27;no-bitwise&#x27;: 0,// 禁止使用按位运算符 &#x27;no-caller&#x27;: 1,// 禁止使用arguments.caller或arguments.callee &#x27;no-catch-shadow&#x27;: 2,// 禁止catch子句参数与外部作用域变量同名 &#x27;no-class-assign&#x27;: 2,// 禁止给类赋值 &#x27;no-cond-assign&#x27;: 1,// 禁止在条件表达式中使用赋值语句 &#x27;no-console&#x27;: 0,// 禁止使用console &#x27;no-const-assign&#x27;: 2,// 禁止修改const声明的变量 &#x27;no-constant-condition&#x27;: 2,// 禁止在条件中使用常量表达式 if(true) if(1) &#x27;no-continue&#x27;: 0,// 禁止使用continue &#x27;no-control-regex&#x27;: 2,// 禁止在正则表达式中使用控制字符 &#x27;no-debugger&#x27;: 1,// 禁止使用debugger &#x27;no-delete-var&#x27;: 2,// 不能对var声明的变量使用delete操作符 &#x27;no-div-regex&#x27;: 1,// 不能使用看起来像除法的正则表达式/=foo/ &#x27;no-dupe-keys&#x27;: 2,// 在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125; &#x27;no-dupe-args&#x27;: 2,// 函数参数不能重复 &#x27;no-duplicate-case&#x27;: 2,// switch中的case标签不能重复 &#x27;no-else-return&#x27;: 2,// 如果if语句里面有return,后面不能跟else语句 &#x27;no-empty&#x27;: 2,// 块语句中的内容不能为空 &#x27;no-empty-character-class&#x27;: 2,// 正则表达式中的[]内容不能为空 &#x27;no-eq-null&#x27;: 2,// 禁止对null使用==或!=运算符 &#x27;no-eval&#x27;: 2,// 禁止使用eval &#x27;no-ex-assign&#x27;: 2,// 禁止给catch语句中的异常参数赋值 &#x27;no-extend-native&#x27;: 2,// 禁止扩展native对象 &#x27;no-extra-bind&#x27;: 2,// 禁止不必要的函数绑定 &#x27;no-extra-boolean-cast&#x27;: 2,// 禁止不必要的bool转换 &#x27;no-extra-parens&#x27;: 2,// 禁止非必要的括号 &#x27;no-extra-semi&#x27;: 2,// 禁止多余的冒号 &#x27;no-fallthrough&#x27;: 1,// 禁止switch穿透 &#x27;no-floating-decimal&#x27;: 2,// 禁止省略浮点数中的0 .5 3. &#x27;no-func-assign&#x27;: 2,// 禁止重复的函数声明 &#x27;no-implicit-coercion&#x27;: 1,// 禁止隐式转换 &#x27;no-implied-eval&#x27;: 2,// 禁止使用隐式eval &#x27;no-inline-comments&#x27;: 0,// 禁止行内备注 &#x27;no-inner-declarations&#x27;: [2, &#x27;functions&#x27;,],// 禁止在块语句中使用声明（变量或函数） &#x27;no-invalid-regexp&#x27;: 2,// 禁止无效的正则表达式 &#x27;no-invalid-this&#x27;: 2,// 禁止无效的this，只能用在构造器，类，对象字面量 &#x27;no-irregular-whitespace&#x27;: 2,// 不能有不规则的空格 &#x27;no-iterator&#x27;: 2,// 禁止使用__iterator__ 属性 &#x27;no-label-var&#x27;: 2,// label名不能与var声明的变量名相同 &#x27;no-labels&#x27;: 2,// 禁止标签声明 &#x27;no-lone-blocks&#x27;: 2,// 禁止不必要的嵌套块 &#x27;no-lonely-if&#x27;: 2,// 禁止else语句内只有if语句 &#x27;no-loop-func&#x27;: 1,// 禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以） &#x27;no-mixed-requires&#x27;: [0, false,],// 声明时不能混用声明类型 &#x27;no-mixed-spaces-and-tabs&#x27;: [2, false,],// 禁止混用tab和空格 &#x27;linebreak-style&#x27;: [0, &#x27;windows&#x27;,],// 换行风格 &#x27;no-multi-spaces&#x27;: 1,// 不能用多余的空格 &#x27;no-multi-str&#x27;: 2,// 字符串不能用\换行 &#x27;no-multiple-empty-lines&#x27;: [1, &#123;&#x27;max&#x27;: 1,&#125;,],// 空行最多不能超过1行 &#x27;no-native-reassign&#x27;: 2,// 不能重写native对象 &#x27;no-negated-in-lhs&#x27;: 2,// in 操作符的左边不能有! &#x27;no-nested-ternary&#x27;: 0,// 禁止使用嵌套的三目运算 &#x27;no-new&#x27;: 0,// 禁止在使用new构造一个实例后不赋值 &#x27;no-new-func&#x27;: 2,// 禁止使用new Function &#x27;no-new-object&#x27;: 2,// 禁止使用new Object() &#x27;no-new-require&#x27;: 2,// 禁止使用new require &#x27;no-new-wrappers&#x27;: 2,// 禁止使用new创建包装实例，new String new Boolean new Number &#x27;no-obj-calls&#x27;: 1,// 不能调用内置的全局对象，比如Math() JSON() &#x27;no-octal&#x27;: 2,// 禁止使用八进制数字 &#x27;no-octal-escape&#x27;: 2,// 禁止使用八进制转义序列 &#x27;no-param-reassign&#x27;: 2,// 禁止给参数重新赋值 &#x27;no-path-concat&#x27;: 0,// node中不能使用__dirname或__filename做路径拼接 &#x27;no-plusplus&#x27;: 0,// 禁止使用++，-- &#x27;no-process-env&#x27;: 0,// 禁止使用process.env &#x27;no-process-exit&#x27;: 0,// 禁止使用process.exit() &#x27;no-proto&#x27;: 2,// 禁止使用__proto__属性 &#x27;no-redeclare&#x27;: 0,// 禁止重复声明变量 &#x27;no-regex-spaces&#x27;: 2,// 禁止在正则表达式字面量中使用多个空格 /foo bar/ &#x27;no-restricted-modules&#x27;: 0,// 如果禁用了指定模块，使用就会报错 &#x27;no-return-assign&#x27;: 1,// return 语句中不能有赋值表达式 &#x27;no-script-url&#x27;: 0,// 禁止使用javascript:void(0) &#x27;no-self-compare&#x27;: 2,// 不能比较自身 &#x27;no-sequences&#x27;: 0,// 禁止使用逗号运算符 &#x27;no-shadow&#x27;: 2,// 外部作用域中的变量不能与它所包含的作用域中的变量或参数同名 &#x27;no-shadow-restricted-names&#x27;: 2,// 严格模式中规定的限制标识符不能作为声明时的变量名使用 &#x27;no-spaced-func&#x27;: 2,// 函数调用时 函数名与()之间不能有空格 &#x27;no-sparse-arrays&#x27;: 2,// 禁止稀疏数组， [1,,2] &#x27;no-sync&#x27;: 0,// nodejs 禁止同步方法 &#x27;no-ternary&#x27;: 0,// 禁止使用三目运算符 &#x27;no-trailing-spaces&#x27;: 1,// 一行结束后面不要有空格 &#x27;no-this-before-super&#x27;: 0,// 在调用super()之前不能使用this或super &#x27;no-throw-literal&#x27;: 2,// 禁止抛出字面量错误 throw &quot;error&quot;; &#x27;no-undef&#x27;: 1,// 不能有未定义的变量 &#x27;no-undef-init&#x27;: 2,// 变量初始化时不能直接给它赋值为undefined &#x27;no-undefined&#x27;: 2,// 不能使用undefined &#x27;no-unexpected-multiline&#x27;: 2,// 避免多行表达式 &#x27;no-underscore-dangle&#x27;: 1,// 标识符不能以_开头或结尾 &#x27;no-unneeded-ternary&#x27;: 2,// 禁止不必要的嵌套 var isYes = answer === 1 ? true : false; &#x27;no-unreachable&#x27;: 2,// 不能有无法执行的代码 &#x27;no-unused-expressions&#x27;: 2,// 禁止无用的表达式 &#x27;no-unused-vars&#x27;: [2, &#123;&#x27;vars&#x27;: &#x27;all&#x27;, &#x27;args&#x27;: &#x27;after-used&#x27;,&#125;,],// 不能有声明后未被使用的变量或参数 &#x27;no-use-before-define&#x27;: 2,// 未定义前不能使用 &#x27;no-useless-call&#x27;: 2,// 禁止不必要的call和apply &#x27;no-void&#x27;: 2,// 禁用void操作符 &#x27;no-var&#x27;: 0,// 禁用var，用let和const代替 &#x27;no-warning-comments&#x27;: [1, &#123; &#x27;terms&#x27;: [&#x27;todo&#x27;, &#x27;fixme&#x27;, &#x27;xxx&#x27;,], &#x27;location&#x27;: &#x27;start&#x27;, &#125;,],// 不能有警告备注 &#x27;no-with&#x27;: 2,// 禁用with &#x27;array-bracket-spacing&#x27;: [2, &#x27;never&#x27;,],// 是否允许非空数组里面有多余的空格 &#x27;arrow-parens&#x27;: 0,// 箭头函数用小括号括起来 &#x27;arrow-spacing&#x27;: 0,// =&gt;的前/后括号 &#x27;accessor-pairs&#x27;: 0,// 在对象中使用getter/setter &#x27;block-scoped-var&#x27;: 0,// 块语句中使用var &#x27;brace-style&#x27;: [1, &#x27;1tbs&#x27;,],// 大括号风格 &#x27;callback-return&#x27;: 1,// 避免多次调用回调什么的 &#x27;camelcase&#x27;: 2,// 强制驼峰法命名 &#x27;comma-dangle&#x27;: [2, &#x27;always&#x27;,],// 对象字面量项尾不能有逗号 &#x27;comma-spacing&#x27;: 0,// 逗号前后的空格 &#x27;comma-style&#x27;: [2, &#x27;last&#x27;,],// 逗号风格，换行时在行首还是行尾 &#x27;complexity&#x27;: [0, 11,],// 循环复杂度 &#x27;computed-property-spacing&#x27;: [0, &#x27;never&#x27;,],// 是否允许计算后的键名什么的 &#x27;consistent-return&#x27;: 0,// return 后面是否允许省略 &#x27;consistent-this&#x27;: [2, &#x27;that&#x27;,],// this别名 &#x27;constructor-super&#x27;: 0,// 非派生类不能调用super，派生类必须调用super &#x27;curly&#x27;: [2, &#x27;all&#x27;,],// 必须使用 if()&#123;&#125; 中的&#123;&#125; &#x27;default-case&#x27;: 2,// switch语句最后必须有default &#x27;dot-location&#x27;: 0,// 对象访问符的位置，换行的时候在行首还是行尾 &#x27;dot-notation&#x27;: [0, &#123; &#x27;allowKeywords&#x27;: true, &#125;,],// 避免不必要的方括号 &#x27;eol-last&#x27;: 0,// 文件以单一的换行符结束 &#x27;eqeqeq&#x27;: 2,// 必须使用全等 &#x27;func-names&#x27;: 0,// 函数表达式必须有名字 &#x27;func-style&#x27;: [0, &#x27;declaration&#x27;,],// 函数风格，规定只能使用函数声明/函数表达式 &#x27;generator-star-spacing&#x27;: 0,// 生成器函数*的前后空格 &#x27;guard-for-in&#x27;: 0,// for in循环要用if语句过滤 &#x27;handle-callback-err&#x27;: 0,// nodejs 处理错误 &#x27;id-length&#x27;: 0,// 变量名长度 &#x27;indent&#x27;: [2, 4,],// 缩进风格 &#x27;init-declarations&#x27;: 0,// 声明时必须赋初值 &#x27;key-spacing&#x27;: [0, &#123; &#x27;beforeColon&#x27;: false, &#x27;afterColon&#x27;: true, &#125;,],// 对象字面量中冒号的前后空格 &#x27;lines-around-comment&#x27;: 0,// 行前/行后备注 &#x27;max-depth&#x27;: [0, 4,],// 嵌套块深度 &#x27;max-len&#x27;: [0, 80, 4,],// 字符串最大长度 &#x27;max-nested-callbacks&#x27;: [0, 2,],// 回调嵌套深度 &#x27;max-params&#x27;: [0, 3,],// 函数最多只能有3个参数 &#x27;max-statements&#x27;: [0, 10,],// 函数内最多有几个声明 &#x27;new-cap&#x27;: 2,// 函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用 &#x27;new-parens&#x27;: 2,// new时必须加小括号 &#x27;newline-after-var&#x27;: 2,// 变量声明后是否需要空一行 &#x27;object-curly-spacing&#x27;: [0, &#x27;never&#x27;,],// 大括号内是否允许不必要的空格 &#x27;object-shorthand&#x27;: 0,// 强制对象字面量缩写语法 &#x27;one-var&#x27;: 0,// 连续声明 &#x27;operator-assignment&#x27;: [0, &#x27;always&#x27;,],// 赋值运算符 += -=什么的 &#x27;operator-linebreak&#x27;: [2, &#x27;after&#x27;,],// 换行时运算符在行尾还是行首 &#x27;padded-blocks&#x27;: 0,// 块语句内行首行尾是否要空行 &#x27;prefer-const&#x27;: 0,// 首选const &#x27;prefer-spread&#x27;: 0,// 首选展开运算 &#x27;prefer-reflect&#x27;: 0,// 首选Reflect的方法 &#x27;quotes&#x27;: [1, &#x27;single&#x27;,],// 引号类型 `` &quot;&quot; &#x27;&#x27; &#x27;quote-props&#x27;:[2, &#x27;always&#x27;,],// 对象字面量中的属性名是否强制双引号 &#x27;radix&#x27;: 2,// parseInt必须指定第二个参数 &#x27;id-match&#x27;: 0,// 命名检测 &#x27;require-yield&#x27;: 0,// 生成器函数必须有yield &#x27;semi&#x27;: [2, &#x27;never&#x27;,],// 语句强制分号结尾 &#x27;semi-spacing&#x27;: [0, &#123;&#x27;before&#x27;: false, &#x27;after&#x27;: true,&#125;,],// 分号前后空格 &#x27;sort-vars&#x27;: 0,// 变量声明时排序 &#x27;space-after-keywords&#x27;: [0, &#x27;always&#x27;,],// 关键字后面是否要空一格 &#x27;space-before-blocks&#x27;: [0, &#x27;always&#x27;,],// 不以新行开始的块&#123;前面要不要有空格 &#x27;space-before-function-paren&#x27;: [0, &#x27;always&#x27;,],// 函数定义时括号前面要不要有空格 &#x27;space-in-parens&#x27;: [0, &#x27;never&#x27;,],// 小括号里面要不要有空格 &#x27;space-infix-ops&#x27;: 0,// 中缀操作符周围要不要有空格 &#x27;keyword-spacing&#x27;: 2,// return throw case后面要不要加空格 &#x27;space-unary-ops&#x27;: [0, &#123; &#x27;words&#x27;: true, &#x27;nonwords&#x27;: false, &#125;,],// 一元运算符的前/后要不要加空格 &#x27;spaced-comment&#x27;: [&#x27;error&#x27;, &#x27;always&#x27;, &#123; &#x27;markers&#x27;: [&#x27;/&#x27;,], &#125;,],// 注释风格要不要有空格什么的 &#x27;strict&#x27;: 2,// 使用严格模式 &#x27;use-isnan&#x27;: 2,// 禁止比较时使用NaN，只能用isNaN() &#x27;valid-jsdoc&#x27;: 0,// jsdoc规则 &#x27;valid-typeof&#x27;: 2,// 必须使用合法的typeof的值 &#x27;vars-on-top&#x27;: 2,// var必须放在作用域顶部 &#x27;wrap-iife&#x27;: [2, &#x27;inside&#x27;,],// 立即执行函数表达式的小括号风格 &#x27;wrap-regex&#x27;: 0,// 正则表达式字面量用小括号包起来 &#x27;yoda&#x27;: [2, &#x27;never&#x27;,],// 禁止尤达条件 &#125;,&#125; vscode配置在vscode中安装eslint插件 然后打开vscode用户的setting.json（首选项-设置-随便找一个下方有在 setting.json 中编辑的按钮点开）在下面添加123456789101112131415161718192021222324252627282930313233&quot;eslint.enable&quot;: true,&quot;eslint.run&quot;: &quot;onType&quot;,&quot;eslint.options&quot;: &#123; &quot;overrideConfigFile&quot;: &quot;/Users/luobin/vscode-eslint/.eslintrc.js&quot;, &quot;extensions&quot;: [ &quot;.js&quot;, &quot;.vue&quot;, &quot;.ts&quot;, &quot;.html&quot; ]&#125;,&quot;eslint.validate&quot;: [ &quot;javascript&quot;, &quot;vue&quot;, &quot;typescript&quot;, &quot;html&quot;],&quot;editor.codeActionsOnSave&quot;: &#123; &quot;source.fixAll.eslint&quot;: true&#125;,&quot;eslint.alwaysShowStatus&quot;: true,&quot;eslint.format.enable&quot;: true,&quot;eslint.probe&quot;: [ &quot;javascript&quot;, &quot;typescript&quot;, &quot;typescriptreact&quot;, &quot;html&quot;, &quot;vue&quot;, &quot;markdown&quot;],&quot;eslint.lintTask.enable&quot;: true,&quot;eslint.onIgnoredFiles&quot;: &quot;warn&quot;,&quot;eslint.packageManager&quot;: &quot;yarn&quot;,这里主要的几个选项我做了注释，可以其余可根据需要添加或省略。（我这里使用的vscode版本和eslint版本可能和你的不一致，格式化或者保存项目文件的时候，输出中会提示哪个属性已经被废弃，哪个属性被替换成其他写法，根据提示修改既可以，前提是你开启了eslint.alwaysShowStatus） vscode中配置默认格式化随便找一个文件，右击选择使用...格式化，最下面会出现一个配置默认格式化程序,选择ESLint即可。 结束vscode的eslint插件不能脱离依赖使用，所以必须找一个安装有eslint及其需要的插件的项目来使用其中的依赖，这里我们新建了一个空项目，然后在vscode中将eslint插件的全局依赖和配置选择到我们建的空项目中，这样eslint插件就可以完美运行了。此方法相当于给eslint插件一个全局的规则，如果项目中安装有eslint，并且有规则，还是会按照项目中的规则进行格式化和代码提示的。]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>eslint</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[threeJs模型压缩、加载]]></title>
    <url>%2F2021%2F11%2F01%2Fthreejs-compress%2F</url>
    <content type="text"><![CDATA[压缩模型安装压缩器全局安装gltf-pipelinegit地址：https://gitee.com/apis-cloud/gltf-pipeline.git1sudo npm install -g gltf-pipeline 转换格式如果是glb或fbx格式，首选需要转换格式glft，这个插件是自带格式转换的在模型所在文件夹执行命令1gltf-pipeline -i model.glb -j 执行压缩再执行压缩操作（model.gltf是转换格式后的文件名，modelDraco.gltf是压缩后的文件名）1gltf-pipeline -i model.gltf -o modelDraco.gltf -d -s压缩后得到两个文件 modelDraco.gltf modelDraco.bin 将两个文件放在DRACOLoader指定的文件夹即可 导入模型最后使用DRACOLoader加载器加载压缩模型即可点击下载WASM/JS解码库文件123456789var loader = new GLTFLoader() //创建模型加载器对象var dracoloader = new DRACOLoader() //draco加载器(压缩模型解码器) dracoloader.setDecoderPath( &#x27;stl/&#x27; ) //指定包含WASM / JS解码库的文件夹的路径。loader.setDRACOLoader( dracoloader ) loader.load(&quot;stl/modelDraco.gltf&quot;, gltf =&gt; &#123; gltf.scene.scale.set(10, 10, 10) gltf.scene.position.set(0, -0.2, 0) this.scene.add(gltf.scene)&#125;)]]></content>
      <categories>
        <category>JS</category>
        <category>three.js</category>
      </categories>
      <tags>
        <tag>three.js</tag>
        <tag>threejs</tag>
        <tag>three</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[封装微信小程序请求]]></title>
    <url>%2F2021%2F05%2F07%2Frequset%2F</url>
    <content type="text"><![CDATA[登录流程首先看下小程序官方的登录流程图大致的登录流程是这样的： 前端：小程序请求是先使用wx.checkSession验证小程序服务器登录态是否失效，如果失效，则使用wx.login进行登录，然后获取到code发送给业务服务器。 后端：业务服务器拿到code后请求小程序服务器获取用户的openid等信息。 后端：业务服务器使用openid去匹配服务器中用户的数据，如果openid存在，说明用户已注册，如果不存在，则直接注册一个用户，并将openid保存在数据库以便下次验证。 后端：如果用户已注册，后端直接执行登录操作，即返回用户的业务登录态（token），也可以加上需要的用户信息等。 前端：拿到业务端的登录态后，再次携带登录态访问业务端接口。 后端：验证用户登录态是否有效，有效则返回业务接口数据。 后端：无效则返回登录态失效信息。 前端：如果请求返回的是登录态失效，则再次使用wx.login拿到code请求业务端登录接口，获取业务的登录态。 前端：如果验证小程序登录态没有失效，则前端直接请求业务端接口（请求中携带业务端登录态，即业务的token）。 后端：验证用户登录态是否有效，有效则返回业务接口数据。 后端：无效则返回登录态失效信息。 前端：如果请求返回的是登录态失效，则再次使用wx.login拿到code请求业务端登录接口，获取业务的登录态。大致的前后端流程就是这样。 然后需要将上面的流程中的前端请求封装一下。调用的时候直接使用：1http(route, data, config).then(res=&#123;&#125;).catch=(err=&gt;&#123;&#125;)config暂时没有写配置，可以自定义一下，如请求方式（get，post…），还有是否弹出错误提示和正确提示，是否显示加载等。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187import config from &#x27;./config&#x27;import &#123;RootObject&#125; from &#x27;../model/rootObject&#x27;interface option &#123; method?: &#x27;OPTIONS&#x27; | &#x27;GET&#x27; | &#x27;HEAD&#x27; | &#x27;POST&#x27; | &#x27;PUT&#x27; | &#x27;DELETE&#x27; | &#x27;TRACE&#x27; | &#x27;CONNECT&#x27; | undefined errAlert?: boolean | &#x27;toast&#x27; resAlert?: boolean | &#x27;toast&#x27; loading?: boolean maxRefresh?:number&#125;class Http &#123; route:string options:option data:unknown refresh:number // 当前熔断次数 maxRefresh:number // 最大熔断次数 constructor()&#123; this.route = &#x27;&#x27; this.data = &#123;&#125; this.refresh = 0 this.options = &#123; &#x27;method&#x27;: &#x27;GET&#x27;, &#x27;errAlert&#x27;: true, &#x27;resAlert&#x27;: false, &#x27;loading&#x27;: true, &#x27;maxRefresh&#x27;: 2 &#125; this.maxRefresh = &lt;number&gt; this.options.maxRefresh &#125; async request(route:string, data:unknown = &#123;&#125;, options?:option):Promise&lt;RootObject&lt;unknown&gt;&gt;&#123; this.route = route this.data = data this.options = &#123; &#x27;method&#x27;: &#x27;GET&#x27;, &#x27;errAlert&#x27;: true, &#x27;resAlert&#x27;: false, &#x27;loading&#x27;: true, &#x27;maxRefresh&#x27;: 2, ...options &#125; this.maxRefresh = &lt;number&gt; this.options.maxRefresh this.showLoading() if (await this.checkSession()) &#123; const loginStatus = await this.login() if (!loginStatus)&#123; if (this.refresh &gt;= this.maxRefresh)&#123; this.hideLoading() return Promise.reject(&#x27;登录态获取失败&#x27;) &#125; await this.sleep(500) this.refresh++ await this.request(this.route, this.data, this.options) &#125; &#125; let res = await this.HttpClient() if (res?.code === 500) &#123; await this.login() res = await this.HttpClient() &#125; this.hideLoading() if (res?.code === 200)&#123; this.successToast(&#x27;resAlert&#x27;, res.msg) &#125; else &#123; this.successToast(&#x27;errAlert&#x27;, res.msg || &#x27;服务器故障&#x27;) &#125; return Promise.resolve(res) &#125; async HttpClient():Promise&lt;RootObject&lt;unknown&gt;&gt;&#123; return new Promise((resolve, reject)=&gt;&#123; wx.request(&#123; &#x27;url&#x27;: config.api + this.route, &#x27;data&#x27;: &#123; ...&lt;object&gt; this.data &#125;, &#x27;method&#x27;: this.options &amp;&amp; this.options.method || &#x27;POST&#x27;, &#x27;header&#x27;: &#123; &#x27;Content-Type&#x27;: &#x27;application/json&#x27;, &#x27;token&#x27;: wx.getStorageSync(&#x27;token&#x27;) || &#x27;&#x27; &#125;, &#x27;success&#x27;: (res)=&gt; &#123; resolve(&lt;RootObject&lt;any&gt;&gt;res.data) &#125;, &#x27;fail&#x27;: (err)=&gt; &#123; reject(err) &#125; &#125;) &#125;) &#125; // 检测登录态 返回true不需要重新登录 返回false需要重新登录 checkSession():Promise&lt;boolean&gt; &#123; return new Promise((resolve) =&gt; &#123; wx.checkSession(&#123; &#x27;success&#x27;: () =&gt; &#123; const token = wx.getStorageSync(&#x27;token&#x27;) if (token) &#123; resolve(false) &#125; else &#123; resolve(true) &#125; &#125;, &#x27;fail&#x27;: () =&gt; &#123; resolve(true) &#125; &#125;) &#125;) &#125; // 登录 async login():Promise&lt;boolean&gt;&#123; return new Promise((resolve) =&gt; &#123; wx.login(&#123; &#x27;success&#x27;: res =&gt; &#123; wx.request(&#123; &#x27;url&#x27;: config.api + &#x27;wxlogin&#x27;, &#x27;data&#x27;: &#123; &#x27;code&#x27;: res.code &#125;, &#x27;method&#x27;: &#x27;POST&#x27;, &#x27;header&#x27;: &#123; &#x27;Content-Type&#x27;: &#x27;application/json&#x27; &#125;, &#x27;success&#x27;: (loginRes)=&gt; &#123; if (loginRes.statusCode === 200)&#123; resolve(true) wx.setStorageSync(&#x27;token&#x27;, (loginRes.data as RootObject&lt;any&gt;).data.token) &#125; else &#123; resolve(false) &#125; &#125;, &#x27;fail&#x27;: ()=&gt; &#123; resolve(false) &#125; &#125;) &#125; &#125;) &#125;) &#125; sleep(time:number):Promise&lt;void&gt;&#123; return new Promise(resolve=&gt;&#123; setTimeout(() =&gt; &#123; resolve() &#125;, time) &#125;) &#125; showLoading()&#123; if (this.options.loading)&#123; wx.showLoading(&#123; &#x27;title&#x27;: &#x27;&#x27; &#125;) &#125; &#125; hideLoading()&#123; if (this.options.loading)&#123; wx.hideLoading() &#125; &#125; successToast(type:&#x27;resAlert&#x27;|&#x27;errAlert&#x27;, content:string, title = &#x27;提示&#x27;, confirm?:Function, cancel?:Function)&#123; if (typeof this.options[type] === &#x27;boolean&#x27;)&#123; if (this.options[type])&#123; wx.showModal(&#123; &#x27;title&#x27;: title, &#x27;content&#x27;: content, success(res) &#123; if (res.confirm) &#123; confirm &amp;&amp; confirm() &#125; else if (res.cancel) &#123; cancel &amp;&amp; cancel() &#125; &#125; &#125;) &#125; &#125; else if (this.options[type] === &#x27;toast&#x27;)&#123; wx.showToast(&#123; &#x27;title&#x27;: content, &#x27;icon&#x27;: &#x27;none&#x27;, &#x27;duration&#x27;: 2000 &#125;) &#125; &#125;&#125;export default new Http()]]></content>
      <categories>
        <category>JS</category>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>请求封装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACT常用开发套路]]></title>
    <url>%2F2021%2F04%2F16%2Fulink%2F</url>
    <content type="text"><![CDATA[ 请输入密码.]]></content>
  </entry>
  <entry>
    <title><![CDATA[小程序和H5中input在光标位置中插入]]></title>
    <url>%2F2021%2F04%2F16%2Fcursor-position-insert%2F</url>
    <content type="text"><![CDATA[最近遇到一个需要是聊天添加表情功能，本来很简单，点就表情追加到input内容里即可。但是表情只能追加到字符串最后面，这就很恼火。有没有办法在光标制定位置插入呢？当然有，只不过小程序做法和H5略有区别，这里两种都介绍一下。 首先是H5这里我直接抛出代码，原理也很简单，主要利用的是input和textarea中的setSelectionRange属性获取光标位置。这里不做过多解释，主要看下小程序12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; function setCaret(textObj) &#123; if (textObj.createTextRange) &#123; textObj.caretPos = document.selection.createRange().duplicate(); &#125; &#125; function insertAtCaret(textObj, textFeildValue) &#123; if (document.all) &#123; if (textObj.createTextRange &amp;&amp; textObj.caretPos) &#123; var caretPos = textObj.caretPos; caretPos.text = caretPos.text.charAt(caretPos.text.length - 1) == &#x27; &#x27; ? textFeildValue + &#x27; &#x27; : textFeildValue; &#125; else &#123; textObj.value = textFeildValue; &#125; &#125; else &#123; console.log(1) if (textObj.setSelectionRange) &#123; var rangeStart = textObj.selectionStart; var rangeEnd = textObj.selectionEnd; var tempStr1 = textObj.value.substring(0, rangeStart); var tempStr2 = textObj.value.substring(rangeEnd); textObj.value = tempStr1 + textFeildValue + tempStr2; &#125; else &#123; alert(&quot;This version of Mozilla based browser does not support setSelectionRange&quot;); &#125; &#125; &#125; &lt;/script&gt; &lt;form id=&quot;form1&quot; action=&quot;&quot; onsubmit=&quot;&quot; method=&quot;post&quot; enctype=&quot;text/plain&quot;&gt; &lt;p&gt; &lt;textarea id=&quot;textarea&quot; name=&quot;tarea&quot; rows=&quot;&quot; cols=&quot;&quot; style=&quot;width:300px;height:120px;&quot; onselect=&quot;setCaret(this);&quot; onclick=&quot;setCaret(this);&quot; onkeyup=&quot;setCaret(this);&quot;&gt;例子例子例子例子例子&lt;/textarea&gt; &lt;br /&gt;&lt;br /&gt; &lt;input type=&quot;text&quot; name=&quot;textfield&quot; style=&quot;width:220px;&quot; value=&quot;插入FireFox&quot; /&gt; &lt;br /&gt; &lt;input type=&quot;button&quot; value=&quot;插入&quot; onclick=&quot;insertAtCaret(this.form.tarea,this.form.textfield.value);&quot; /&gt; &lt;/p&gt; &lt;/form&gt; &lt;div id=&quot;box&quot; contenteditable=&quot;true&quot; style=&quot;border:1px solid #ccc; width:300px; height:200px;&quot;&gt;sljfldjfldf&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 小程序小程序需要在textarea或input中绑定失焦事件bindblur=&quot;onBlur&quot;1&lt;textarea id=&quot;textarea&quot; auto-focus=&quot;true&quot; placeholder=&quot;请输入文章内容&quot; value=&quot;&#123;&#123;content&#125;&#125;&quot; bindinput=&quot;onInput&quot; bindblur=&quot;onBlur&quot;/&gt;然后在失焦事件获取失焦时光标的位置，即光标在文本域中的下标12345onBlur(e) &#123; this.setData(&#123; cursor: e.detail.cursor &#125;)&#125;,然后在插入表情的实践中将表情插入文本域字符串中（也就是表情的点击事件中）12345678inputGif(e) &#123; const index = e.currentTarget.dataset.index setTimeout(() =&gt; &#123; this.setData(&#123; content: this.data.content.slice(0, this.data.cursor) + this.data.gif[index].code + this.data.content.slice(this.data.cursor) &#125;) &#125;, 100)&#125;,这里我使用了setTimeout延时了100ms执行，原因是如果执行，失焦实践是在点击事件之后触发的，就会出现插入的位置是上一次失焦时的位置，所以需要插入时延迟100ms先让文本域失焦并设置好光标位置，再执行插入。至此小程序的光标制定位置插入内容就完成了，有木有很简单。]]></content>
      <categories>
        <category>JS</category>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>setSelectionRange</tag>
        <tag>光标位置插入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用uniapp打包H5时使用微信SDK]]></title>
    <url>%2F2021%2F03%2F13%2Funiapp-wxSDK%2F</url>
    <content type="text"><![CDATA[起因原本的一个需求是开发微信小程序，但是因为产品变更需求，需要重新改为H5，为了重构页面和前端逻辑不做太大改动，所以决定先把小程序改为uniapp，在用uniapp打包为H5因为uniapp里的方法和小程序类似，所以代码复用率高。有了思路之后就开始着手进行。 第一步：将微信小程序转为uniapp这里使用的是官方出的一款插件miniprogram-to-uniapp 安装使用命令行进行全局安装 windows:1npm install miniprogram-to-uniapp -gmac &amp; Linux:1sudo npm install miniprogram-to-uniapp -g 验证使用命令wtu -V验证是否安装成功，返回版本号说明安装成功 转换使用命令wtu -i 小程序根目录路径进行转换小程序根目录路径可以是绝对路径，也可以是命令行打开的相对路径转换成功后在小程序目录同级目录下会生成一个文件名_uni的文件夹 这里存放的就是转换后的uniapp，你可以是用Hbuilder打开，或者使用官方脚手架然后用vscode打开，笔者使用的后者。 第二步引入微信SDK由于我们小程序内获取的登录态是小程序的，如果改成微信内登录的H5，需要将登录态转换为微信H5的登录态。这里就需要用到微信的SDK。由于笔者使用的uniapp脚手架，所以需要修改public目录下的index.html文件，即H5的模版文件。（Hbuilder打开的话需要在配置文件中配置模版文件） 引入微信SDK1&lt;script src=&quot;https://res.wx.qq.com/open/js/jweixin-1.2.0.js&quot;&gt;&lt;/script&gt; 然后在你需要调用的组建里配置微信SDK12345678wx.config(&#123; debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。 appId: &#x27;&#x27;, // 必填，企业号的唯一标识，此处填写企业号corpid timestamp: , // 必填，生成签名的时间戳 nonceStr: &#x27;&#x27;, // 必填，生成签名的随机串 signature: &#x27;&#x27;,// 必填，签名，见附录1 jsApiList: [] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2&#125;);这个时候问题就来了！执行会发现wx对象中没有config方法,但是wx对象是存在的？ 原因原来是因为uniapp中已经向window中声明了一个wx变量，这个wx变量是小程序的wx对象而不是微信SDK的。因为uniapp在打包时将app.js打包在了&lt;/body&gt;之前，所以我们引入的微信SDK的变量被uniapp的覆盖了。 解决找到原因就好办了，直接将SDK在&lt;/body&gt;之后&lt;/html&gt;之前引入。 再跑一下，完美解决！ 总结这里找问题原因花了很长时间，因为引入js方式，登录态检测这些我都简化叙述了，还用到了各种抓包，本地代理线上文件。但是思路就是遇到问题可以想想多种解决方案，多打断点，多console。]]></content>
      <categories>
        <category>JS</category>
        <category>uniapp</category>
      </categories>
      <tags>
        <tag>uniapp</tag>
        <tag>微信SDK</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html转jsx]]></title>
    <url>%2F2020%2F08%2F31%2Fhtml2jsx%2F</url>
    <content type="text"><![CDATA[初衷之前做的一个阿里需求，是将原有的HTML的静态页面重构成前后分离的项目，要求是用dva-cli脚手架来开发那么就牵扯到一个问题就是这么多的HTML页面肯定不能手动转成jsx语法啊。毕竟差别还是有很多的，尤其是写div的类名我们知道，在普通HTML中是这样写div和类名的 1&lt;div class=&quot;demo div1&quot;&gt;&lt;/div&gt; 但是在jsx语法中尤其是同一div上应用了多个类名，jsx写起来会很让热挠头1&lt;div className=&#123;[styles.demo,styles.div1].join(&#x27; &#x27;)&#125;&gt;&lt;/div&gt;于是乎就做了一个小工具，可以将html转换为jsx语法，这里需要注意一下styles是我引入的less后赋值的变量名1import styles from &#x27;../assets/css/index.css&#x27; 效果左边输入html点击转换会自动生成在右边的文本域中 原理这个小Demo的原理非常简单，就是通过正则匹配到所有class=“”里的内容，然后通过replace方法替换值得注意的是replace方法的第二个参数可以传一个固定的字符串，也可以传一个函数，函数的返回值作为替换的内容这里我们不能把类名替换成固定的值，而是需要将类名做处理，所有在replace第二个参数中传入一个函数，函数的参数，就是匹配到的内容获得内容就很好办了，先把类名用空格拆分成数组，然后写个jsx中的格式即可 代码12345678910111213141516function submit()&#123; var con = document.getElementById(&#x27;text&#x27;).value con = con.replace(/class=&quot;.*?&quot;/ig, value =&gt;&#123; value = value.replace(&#x27;class=&quot;&#x27;,&#x27;&#x27;).replace(&#x27;&quot;&#x27;,&#x27;&#x27;) value = value.split(&#x27; &#x27;) console.log(value) if(value.length&gt;1)&#123; value = value.map(item=&gt;`styles.$&#123;item&#125;`) value = `[$&#123;value.join(&#x27;,&#x27;)&#125;].join(&#x27; &#x27;)` &#125;else&#123; value = `styles.$&#123;value&#125;` &#125; return `className=&#123;$&#123;value&#125;&#125;` &#125;); document.getElementById(&#x27;text2&#x27;).value = con&#125;]]></content>
      <categories>
        <category>JS</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>react jsx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Three.js设置DIV跟随场景的两种方法]]></title>
    <url>%2F2020%2F08%2F26%2Fthree-sprite-css2d%2F</url>
    <content type="text"><![CDATA[方法一：使用Sprite对象首先实例化一个SpriteMaterial，设置好材质或颜色，可以是透明的1234let spriteMap = new TextureLoader().load(&quot;./static/img/img.png&quot;);let pinMaterial = new SpriteMaterial(&#123; map: spriteMap&#125;);然后创建一个div或者绑定html上现有的div元素,设置好默认的位置属性，可以用css来设置默认样式123456let Div = document.createElement(&#x27;div&#x27;)Div.className = &#x27;text&#x27;Div.id = &quot;text&quot;Div.style.left = 0 + &#x27;px&#x27;Div.style.top = 0 + &#x27;px&#x27;document.body.appendChild(Div)然后声明一个坐标点并初始化，之后用来保存每次改变后的坐标点 123private circleData: Vector3...this.circleData = new Vector3(-0.2, 2.3, 0) 接着创建一个创建一个Sprite对象（这里我使用的是webpack引用依赖的方式，因此不需要THREE.Sprite）,并设置坐标点是初始化的坐标点1234567let pin: Sprite = new Sprite(pinMaterial);pin.position.set( this.circleData.x, this.circleData.y, this.circleData.z);pin.scale.set(0.3, 0.3, 1);然后写一个方法用来更新坐标点并设置div的坐标，其原理是每次render时使用Vector3中的project方法将Sprite对象中的世界坐标点转换为屏幕坐标点，并且改变div的css位置信息project接受一个参数是相机实例最后通过一个固定公式转换成屏幕坐标点123456789101112131415private textShow(): void &#123; let worldVector = new Vector3( this.circleData.x, this.circleData.y, this.circleData.z ); let standardVector = worldVector.project(this.camera); let a = this.$window.clientWidth / 2; let b = this.$window.clientHeight / 2; let x = Math.round(standardVector.x * a + a); let y = Math.round(-standardVector.y * b + b); let Div: HTMLElement = document.getElementById(&#x27;text&#x27;) Div.style.left = x + 30 + &quot;px&quot;; Div.style.top = y + &quot;px&quot;;&#125;最后在render方法中调用textShow方法即可123456private render(): void &#123; window.requestAnimationFrame(() =&gt; this.render()); this.textShow(); this.renderer.render(this.scene, this.camera); // 必须放在这个位置 &#125; 方法二：使用CSS2DObject和CSS2DRenderer渲染器这个方法的原理是将dom元素通过CSS2DObject方法转换为three对象，然后利用CSS2DRenderer渲染器将其渲染在页面上首先引入CSS2DObject和CSS2DRenderer1import &#123; CSS2DObject, CSS2DRenderer &#125; from &quot;three/examples/jsm/renderers/CSS2DRenderer&quot;;接着声明一个CSS2DRenderer1private labelRenderer: CSS2DRenderer新建一个div设置一些类名或者样式，然后将div传入CSS2DObject对象的实例中将实例add进场景，再声明一个CSS2DRenderer，通过setSize方法设置渲染器的大小通过labelRenderer.domElement来设置被转换成three对象之后的dom元素的样式最后将labelRenderer.domElement对象appendChild到你想要的元素中12345678910111213const Div: HTMLElement = document.createElement(&#x27;div&#x27;)Div.id = &#x27;trace&#x27;Div.className = &#x27;text&#x27;Div.textContent = &quot;CSS2D方法&quot;var moonLabel = new CSS2DObject(Div);moonLabel.position.set(0, -3, 0);this.scene.add(moonLabel);this.labelRenderer = new CSS2DRenderer();this.labelRenderer.setSize(window.innerWidth, window.innerHeight);this.labelRenderer.domElement.style.position = &#x27;absolute&#x27;;this.labelRenderer.domElement.style.top = 0 + &#x27;px&#x27;; document.body.appendChild(this.labelRenderer.domElement)最后直接再render方法中执行labelRenderer的render，传入场景和相机1this.labelRenderer.render(this.scene, this.camera);这里有个问题，如果场景有OrbitControls控制器，那么将会失效，因为CSS2DRenderer会先生成有个和渲染大小一样的div（就是setSize方法设置的大小）如果能正常显示出div那么它的z-index是高于WebGLRenderer渲染出的canvas的层级，这样OrbitControls控制器就会失效解决方法也很简单粗暴：给这个生成出来的div给一个pointer-events: none;样式即可 相比之下，我觉得方案二还是更简单一点，但是如果需要设置多个或不确定数量的div，那么可以使用第一个，使用for循环来处理 完整代码import &#x27;./assets/less/index.less&#x27;import &#123; OrbitControls &#125; from &#x27;three/examples/jsm/controls/OrbitControls&#x27;;import &#123; Scene, PerspectiveCamera, WebGLRenderer, AmbientLight, DirectionalLight, AnimationMixer, AnimationAction, BoxGeometry, MeshBasicMaterial, Mesh, DoubleSide, Clock, Raycaster, Vector2, Vector3, Group, TextureLoader, Sprite, SpriteMaterial, LoopOnce &#125; from &quot;three&quot;;import &#123; GLTFLoader, GLTF &#125; from &quot;three/examples/jsm/loaders/GLTFLoader&quot;;import &#123; CSS2DObject, CSS2DRenderer &#125; from &quot;three/examples/jsm/renderers/CSS2DRenderer&quot;;export class Three &#123; private scene: Scene private camera: PerspectiveCamera private renderer: WebGLRenderer private controls: OrbitControls private mixer: AnimationMixer private clock: Clock private mainGroup: Group private circleGroup: Group private $window: HTMLElement private fov: number private originalCamera: Vector3 private circleData: Vector3 private gltf: GLTF private anindex: number private animation: AnimationAction private isAnimate: boolean private labelRenderer: CSS2DRenderer constructor() &#123; this.fov = 26 this.originalCamera = new Vector3(-2.3363492363063805, 5.3542278380602655, 13.216669448945213) this.$window = document.querySelector(&quot;#app&quot;); this.clock = new Clock() this.circleData = new Vector3(-0.2, 2.3, 0) this.anindex = 0 this.isAnimate = false this.initScene(); this.initThree(); this.initCamera(); this.initControls() this.initLight(); this.initPulseCircle() this.initTrace() this.render() window.addEventListener(&#x27;resize&#x27;, () =&gt; this.onWindowResize()); this.renderer.domElement.addEventListener(&quot;click&quot;, event =&gt; this.modelTrigger(event)); this.renderer.domElement.addEventListener(&quot;touchstart&quot;, event =&gt; this.modelTrigger(event)); let loader = new GLTFLoader(); //创建模型加载器对象 // let dracoloader = new DRACOLoader();//draco加载器 const textureLoader = new TextureLoader(); const skyboxGeometry = new BoxGeometry(200, 200, 200); const skyboxMaterials = [ new MeshBasicMaterial(&#123; map: textureLoader.load(&#x27;./static/textures/rt.png&#x27;), side: DoubleSide &#125;), new MeshBasicMaterial(&#123; map: textureLoader.load(&#x27;./static/textures/lf.png&#x27;), side: DoubleSide &#125;), new MeshBasicMaterial(&#123; map: textureLoader.load(&#x27;./static/textures/up.png&#x27;), side: DoubleSide &#125;), new MeshBasicMaterial(&#123; map: textureLoader.load(&#x27;./static/textures/dn.png&#x27;), side: DoubleSide &#125;), new MeshBasicMaterial(&#123; map: textureLoader.load(&#x27;./static/textures/bk.png&#x27;), side: DoubleSide &#125;), new MeshBasicMaterial(&#123; map: textureLoader.load(&#x27;./static/textures/ft.png&#x27;), side: DoubleSide &#125;), ]; const skyboxMesh = new Mesh(skyboxGeometry, skyboxMaterials); skyboxMesh.name = &#x27;skyboxMesh&#x27;; skyboxMesh.position.y = 97.45 this.scene.add(skyboxMesh); loader.load(&#x27;./static/models/glb/RobotExpressive.glb&#x27;, object =&gt; &#123; console.log(object) this.gltf = object this.gltf.scene.position.set(0, -2.5, 0); this.scene.add(this.gltf.scene); this.mixer = new AnimationMixer(this.gltf.scene); this.selectAnim(5, &#x27;点我的身体会有惊喜!&#x27;, true) &#125;); document.getElementById(&#x27;submit&#x27;).addEventListener(&#x27;click&#x27;, () =&gt; &#123; this.send() &#125;); document.getElementById(&quot;input&quot;).addEventListener(&quot;keyup&quot;, function (event) &#123; event.preventDefault(); if (event.keyCode === 13) &#123; document.getElementById(&quot;submit&quot;).click(); &#125; &#125;); &#125; private send(): void &#123; let value: string = (&lt;HTMLInputElement&gt;document.getElementById(&#x27;input&#x27;)).value; (&lt;HTMLInputElement&gt;document.getElementById(&#x27;input&#x27;)).value = &quot;&quot; let index = 0 if (/跳舞/.test(value)) &#123; index = 0 &#125; else if (/死/.test(value)) &#123; index = 1 &#125; else if (/闲/.test(value)) &#123; index = 2 &#125; else if (/开心|哈哈|ha/.test(value)) &#123; index = 3 &#125; else if (/生气/.test(value)) &#123; index = 4 &#125; else if (/牛|666/.test(value)) &#123; index = 5 &#125; else if (/你好|hey|hello/.test(value)) &#123; index = 6 &#125; else if (/是|不/.test(value)) &#123; index = 7 &#125; else &#123; index = Math.floor(Math.random() * 9) &#125; switch (index) &#123; case 0: this.selectAnim(0, &#x27;啦~~啦~~~啦~~~&#x27;) break case 1: this.selectAnim(1, &#x27;狗带！&#x27;) break case 2: this.selectAnim(2, &#x27;无所事事。。。&#x27;) break case 3: this.selectAnim(3, &#x27;开心&#x27;) break case 4: this.selectAnim(5, &#x27;好气哦！&#x27;) break case 5: this.selectAnim(9, &#x27;你牛逼！&#x27;) break case 6: this.selectAnim(12, &#x27;你好！&#x27;) break case 7: this.selectAnim(13, &#x27;yes&#x27;) break case 8: this.selectAnim(4, &#x27;你说什么我听不懂？&#x27;) break default: this.selectAnim(4, &#x27;你说什么我听不懂？&#x27;) break; &#125; &#125; private modelTrigger(event): void &#123; const Sx = event.clientX; //鼠标单击位置横坐标 const Sy = event.clientY; //鼠标单击位置纵坐标 //屏幕坐标转标准设备坐标 const x = (Sx / window.innerWidth) * 2 - 1; //标准设备横坐标 const y = -(Sy / window.innerHeight) * 2 + 1; //标准设备纵坐标 //创建射线投射器对象 const raycaster = new Raycaster(); //返回射线选中的对象 raycaster.setFromCamera(new Vector2(x, y), this.camera); const intersects = raycaster.intersectObjects(this.scene.children, true); const intersect = intersects.filter(intersect =&gt; intersect.object.name !== &#x27;skyboxMesh&#x27;) if (intersect.length &gt; 0) &#123; const result = intersect.filter(item =&gt; item.object.name === &#x27;Torso_0&#x27;) if (result.length &gt; 0) &#123; this.selectAnim(5, &#x27;不要乱摸&#x27;) return &#125; switch (intersect[0].object.name) &#123; case &#x27;Head_1&#x27;: this.selectAnim(3, &#x27;摸头杀&#x27;) break case &#x27;Head_2&#x27;: console.log(&#x27;头&#x27;) this.selectAnim(1, &#x27;我的眼睛！！&#x27;) break case &#x27;Torso_1&#x27;: this.selectAnim(12, &#x27;给我捶捶背&#x27;) break case &#x27;FootL&#x27;: this.selectAnim(3, &#x27;左脚可以摸&#x27;) break case &#x27;FootR&#x27;: this.selectAnim(5, &#x27;别碰我的jiong&#x27;) break default: break &#125; &#125; &#125; private selectAnim(index: number, text?: string, loop?: boolean): void &#123; if (this.isAnimate) &#123; return &#125; this.isAnimate = true // animation this.mixer.uncacheClip(this.gltf.animations[this.anindex]) this.animation = this.mixer.clipAction(this.gltf.animations[index]) this.animation.clampWhenFinished = true; //播放完停留在最后一帧 if (!loop) &#123; this.animation.setLoop(LoopOnce, 1) &#125; this.animation.fadeIn(1) this.animation.play() setTimeout(() =&gt; &#123; this.isAnimate = false &#125;, this.gltf.animations[index].duration * 1000); this.anindex = index document.getElementById(&#x27;text&#x27;).innerText = text &#125; //创建场景 private initScene(): void &#123; this.scene = new Scene(); this.scene.position.set(0, 0, 0); this.scene.lookAt(this.scene.position); &#125; //创建相机 private initCamera(): void &#123; this.camera = new PerspectiveCamera( this.fov, this.$window.clientWidth / this.$window.clientHeight, 0.1, 5000 ); this.camera.position.x = this.originalCamera.x this.camera.position.y = this.originalCamera.y this.camera.position.z = this.originalCamera.z this.camera.lookAt(0, 0, 0); &#125; //创建3D渲染器 private initThree(): void &#123; this.renderer = new WebGLRenderer(); this.renderer.setSize( this.$window.clientWidth, this.$window.clientHeight ); this.renderer.setSize(window.innerWidth, window.innerHeight); this.renderer.setClearColor(0xb34149, 1); //设置背景颜色 this.$window.appendChild(this.renderer.domElement); &#125; //创建光源 private initLight(): void &#123; // 环境光 this.scene.add(new AmbientLight(0xd29c96, 1)); // 平行光 let light = new DirectionalLight(0xffffff, 0.6); light.position.set(0, 10, 5); this.scene.add(light); &#125; // 开启控制器 private initControls(): void &#123; this.controls = new OrbitControls(this.camera, this.renderer.domElement); this.controls.enableDamping = true; // 惯性滑动，滑动大小默认0.25 this.controls.dampingFactor = 0.05; // //控制 this.controls.enableZoom = true; // 缩放 this.controls.enableKeys = true; // 键盘 this.controls.enablePan = false; // 是否开启右键拖拽 // 旋转速度 this.controls.rotateSpeed = 1; // 自动旋转 this.controls.autoRotate = false; this.controls.autoRotateSpeed = -0.01; //设置仰视角和俯视角,后续进行重置 this.controls.maxPolarAngle = Math.PI / 2; this.controls.minPolarAngle = Math.PI / 4; this.controls.zoomSpeed = 1; //设置相机距离原点的最远距离 // controls.minDistance = 120; //设置相机距离原点的最远距离 // controls.maxDistance = 120 + 120 * 0.5; &#125; // 创建发光点 private initPulseCircle(): void &#123; this.mainGroup = new Group(); this.scene.add(this.mainGroup); var spriteMap = new TextureLoader().load(&quot;./static/img/img.png&quot;); let pinMaterial = new SpriteMaterial(&#123; map: spriteMap &#125;); this.circleGroup = new Group(); let container = document.createElement(&#x27;div&#x27;) container.className = &#x27;show&#x27; let Div = document.createElement(&#x27;div&#x27;) Div.className = &#x27;text&#x27; Div.id = &quot;text&quot; Div.style.left = 0 + &#x27;px&#x27; Div.style.top = 0 + &#x27;px&#x27; document.body.appendChild(Div) let pin: Sprite = new Sprite(pinMaterial); pin.position.set( this.circleData.x, this.circleData.y, this.circleData.z ); pin.scale.set(0.3, 0.3, 1); this.circleGroup.add(pin); &#125; // 发光点DOM文本 private textShow(): void &#123; let worldVector = new Vector3( this.circleData.x, this.circleData.y, this.circleData.z ); let standardVector = worldVector.project(this.camera); let a = this.$window.clientWidth / 2; let b = this.$window.clientHeight / 2; let x = Math.round(standardVector.x * a + a); let y = Math.round(-standardVector.y * b + b); let Div: HTMLElement = document.getElementById(&#x27;text&#x27;) Div.style.left = x + 30 + &quot;px&quot;; Div.style.top = y + &quot;px&quot;; &#125; private initTrace(): void &#123; const Div: HTMLElement = document.createElement(&#x27;div&#x27;) Div.id = &#x27;trace&#x27; Div.className = &#x27;text&#x27; Div.textContent = &quot;Moon&quot; var moonLabel = new CSS2DObject(Div); moonLabel.position.set(0, -3, 0); this.scene.add(moonLabel); this.labelRenderer = new CSS2DRenderer(); this.labelRenderer.setSize(window.innerWidth, window.innerHeight); this.labelRenderer.domElement.style.position = &#x27;absolute&#x27;; this.labelRenderer.domElement.style.top = 0 + &#x27;px&#x27;; document.body.appendChild(this.labelRenderer.domElement) &#125; private render(): void &#123; window.requestAnimationFrame(() =&gt; this.render()); if (this.mixer) &#123; this.mixer.update(this.clock.getDelta()); &#125; this.controls.update(); this.textShow(); this.renderer.render(this.scene, this.camera); // 必须放在这个位置 this.labelRenderer.render(this.scene, this.camera); &#125; private onWindowResize(): void &#123; this.renderer.setSize(window.innerWidth, window.innerHeight); this.camera.aspect = window.innerWidth / window.innerHeight; this.camera.updateProjectionMatrix(); &#125;&#125;]]></content>
      <categories>
        <category>JS</category>
        <category>three.js</category>
      </categories>
      <tags>
        <tag>three.js</tag>
        <tag>threejs</tag>
        <tag>three</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[当年的元歌比露娜还秀]]></title>
    <url>%2F2020%2F08%2F25%2Fyuange%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>元歌 王者荣耀</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速搭建webpack4.0+]]></title>
    <url>%2F2020%2F08%2F25%2Fwebpack%2F</url>
    <content type="text"><![CDATA[初始化npm使用-y来快速创建1npm init -y 安装webpack和webpack-cli脚手架从webpack4.0开始，webpack打包工具和命令行工具就开成两个包了，需要同时安装1npm i webpack webpack-cli -D 创建工程目录新建src目录，之后写的js、html、css等源文件放在这里,在src目录下新建一个index.js作为入口文件src/index.js是webpack默认的入口文件目录，因为不需要单独配置，如果不想使用这个路径，需要在webpack.config.js中单独配置此处目录结构应为 node_modules src index.js package.json 安装webpack-dev-server此时webpack只能每次执行打包命令后才能看到打包结果，开发过程中我们需要实时编译，因此需要一个本地服务1npm i webpack-dev-server -D 安装html-webpack-plugin插件虽然现在可以试试打包js，但是我们的html依然不能进行热更新，而且打包上线时，打包的资源文件一般会进行哈希命名，每次打包手动修改index.html文件中的资源文件名着实很费劲因此需要html-webpack-plugin插件帮我们自动完成资源引用并增加热更新功能1npm i html-webpack-plugin -D安装好后在项目根目录下新建webpack.config.js文件，并设置html-webpack-plugin的对应html模板123456789const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)module.exports =&#123; plugins:[ new HtmlWebpackPlugin(&#123; filename:&#x27;index.html&#x27;, template:&quot;./src/index.html&quot; &#125;) ]&#125;在src下新建index.html文件之后目录应为 node_modules src index.js index.html package.json webpack.config.js 新增命令行在package.json的scripts中新增一个命令123456...&quot;scripts&quot;: &#123; &quot;dev&quot;:&quot;webpack-dev-server --host 192.168.0.2 --hot --https --port 80 --open&quot;, &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;&#125;,...其中--host 192.138.0.2表示配置本地服务的ip--hot表示开启热更新模式--https表示开始https--port 80表示端口为80--open表示启动后自动打开游览器，后面可以跟游览器的标识，不写表示打开默认游览器到此本地服务就搭建完毕了，接下来需要配置loader和打包选项，今天先更到这里]]></content>
      <categories>
        <category>JS</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Promise和async/await]]></title>
    <url>%2F2020%2F08%2F25%2Fpromise%2F</url>
    <content type="text"><![CDATA[为什么要用Promise一般情况我们一次性调用API就可以完成请求。有些情况需要多次调用服务器API，就会形成一个链式调用，比如为了完成一个功能，我们需要调用API1、API2、API3，依次按照顺序进行调用，这个时候就会出现回调地狱的问题 Promise的链式结构使用Promise可以做到链式结构，即一个请求结束后在then方法中执行下一个异步请求，再下一个异步请求放在上一个异步请求的then方法中,但是需要再每个then方法中return一个Promise对象这样我们就得到了一个扁平的结构而不是回调套回调。eg.12345678910111213141516171819202122new Promise((res, rej) =&gt; &#123; setTimeout(() =&gt; &#123; console.log(1) res() &#125;, 1000);&#125;).then(() =&gt; &#123; return new Promise((res2, rej2) =&gt; &#123; setTimeout(() =&gt; &#123; console.log(2) res2() &#125;, 1000); &#125;)&#125;).then(() =&gt; &#123; return new Promise((res3, rej4) =&gt; &#123; setTimeout(() =&gt; &#123; console.log(3) res3() &#125;, 1000); &#125;)&#125;).then(() =&gt; &#123; console.log(&#x27;结束&#x27;)&#125;) 执行结果是1234123结束 使用all方法但是通常在真是项目中，每个请求会有单独的方法封装，而且每个Promise会有独立的then方法，这时可以使用Promise对象的all方法他表示无论三个异步请求谁先执行谁后执行，都等待三个异步请求全部结束后执行all中的函数。如果后一个请求需要得到前一个请求中的数据，那么还是需要使用前面的链式结构才行。如果既要使用已经封装好的Promise函数，有需要按步调用，可以使用ES7中的async/awaiteg.123456789101112131415161718192021const promise1 = new Promise((res, rej)=&gt;&#123; setTimeout(() =&gt; &#123; console.log(1) res() &#125;, 1000);&#125;)const promise2 = new Promise((res, rej)=&gt;&#123; setTimeout(() =&gt; &#123; console.log(2) res() &#125;, 3000);&#125;)const promise3 = new Promise((res, rej)=&gt;&#123; setTimeout(() =&gt; &#123; console.log(3) res() &#125;, 2000);&#125;)Promise.all([promise1, promise2, promise3]).then(()=&gt; &#123; console.log(&#x27;结束&#x27;);&#125;);执行结果是1234132结束 async/await首先封装的方法需要return一个Promise对象，接着在请求的函数前面添加async关键字，在请求函数的内部使用变量或常量接受封装的Promise对象即可，但是封装的Promise对象前需要加await这时接收到的结果就是Promise对象中then方法中return的结果1234567891011121314151617function ajax()&#123; return new Promise((resolve, reject)=&gt;&#123; setTimeout(() =&gt; &#123; resolve(&quot;666&quot;) &#125;, 5000); &#125;).then(res=&gt;&#123; return res &#125;)&#125;async function ajaxAsync()&#123; console.log(1) const r = await ajax() console.log(2) console.log(r) console.log(3)&#125;ajaxAsync()执行结果是123412 // 5s后6663]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>Promise async/await async await 同步异步 异步</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Three.js 入门]]></title>
    <url>%2F2020%2F08%2F24%2Fthree.js%2F</url>
    <content type="text"><![CDATA[安装three.js使用npm安装three.js1npm i three -S导入场景、相机、灯光、渲染器等类1import &#123; Scene, PerspectiveCamera, WebGLRenderer ,AmbientLight ,DirectionalLight&#125; from &quot;three&quot;创建并暴露一个类，定义场景、相机、灯光等，并设置渲染的DOM容器 123456789export class Three &#123; private scene: Scene private camera: PerspectiveCamera private renderer: WebGLRenderer private $window: HTMLElement constructor() &#123; this.$window = document.querySelector(&quot;#app&quot;); &#125;&#125; 创建场景初始化一个场景,这里我设置了一个私有方法，之后会在constructor中调用scene.position.set可以设置场景在坐标系的位置123456//创建场景private initScene(): void &#123; this.scene = new Scene(); this.scene.position.set(0, 0, 0); this.scene.lookAt(this.scene.position);&#125; 创建相机接着初始化相机,这里使用的是透视相机PerspectiveCamera，相机接受4个参数，分别是 PerspectiveCamera(fov, aspect, near, far) Fov – 相机的视锥体的垂直视野角 Aspect – 相机视锥体的长宽比 Near – 相机视锥体的近平面 Far – 相机视锥体的远平面相机的位置可以使用camera.position.x，camera.position.y，camera.position.z进行赋值来改变12345678910//创建相机private initCamera(): void &#123; this.camera = new PerspectiveCamera( 25, this.$window.clientWidth / this.$window.clientHeight, 0.1, 1000 ); this.camera.lookAt(0, 0, 0);&#125; 创建光源接着初始化灯光,这里添加了两个灯光，一个环境光，一个平行光，可添加多个光源灯光的构造函数中传入灯光颜色和透明度，颜色必须是0x+16进制色环境光没有位置属性，平行光可以添加光源的位置，使用light.position.set来设置位置，传入三个参数分别是x坐标，y坐标，z坐标123456789//创建光源private initLight(): void &#123; // 环境光 this.scene.add(new AmbientLight(0xd29c96, 1)); // 平行光 let light = new DirectionalLight(0xffffff, 0.6); light.position.set(0, 10, 5); this.scene.add(light);&#125; 创建3D渲染器接着创建渲染器,使用three内置的WebGLRenderer渲染器来渲染，渲染器可以通过setSize方法设置大小，这里我们设置一个和画布一样大的渲染器，如果渲染尺寸小于画布大小，则超出渲染器大小的位置将不被渲染使用setClearColor方法可以设置渲染区域的背景色最后将渲染器的domElement属性appendChild进需要的DOM标签内即可12345678910//创建3D渲染器private initThree(): void &#123; this.renderer = new WebGLRenderer(); this.renderer.setSize( this.$window.clientWidth, this.$window.clientHeight ); this.renderer.setClearColor(0xb34149, 1); //设置背景颜色 this.$window.appendChild(this.renderer.domElement);&#125; 接着将这些方法添加进constructor内，让实例创建时自动执行123456789101112export class Three &#123; private scene: Scene private camera: PerspectiveCamera private renderer: WebGLRenderer private $window: HTMLElement constructor() &#123; this.$window = document.querySelector(&quot;#app&quot;); this.initScene(); this.initThree(); this.initCamera(); &#125;&#125; 开启控制器接着使用renderer.render方法就可以渲染了，但是这样只能渲染一帧画面，我们需要做鼠标控制，或者3D动画是需要实时渲染的例如加一个鼠标控制首先导入控制器1import &#123; OrbitControls &#125; from &#x27;three/examples/jsm/controls/OrbitControls&#x27;; 接着初始化这个控制器，这里依然使用一个方法,然后添加进constructor123456789101112131415161718192021222324252627// 开启控制器private initControls(): void &#123; this.controls = new OrbitControls(this.camera, this.renderer.domElement); this.controls.enableDamping = true; // 惯性滑动，滑动大小默认0.25 this.controls.dampingFactor = 0.05; // //控制 this.controls.enableZoom = false; // 缩放 this.controls.enableKeys = false; // 键盘 this.controls.enablePan = false; // 是否开启右键拖拽 // 旋转速度 this.controls.rotateSpeed = 1; // 自动旋转 this.controls.autoRotate = false; this.controls.autoRotateSpeed = -0.01; //设置仰视角和俯视角,后续进行重置 this.controls.maxPolarAngle = Math.PI / 2; this.controls.minPolarAngle = Math.PI / 4; this.controls.zoomSpeed = 1; //设置相机距离原点的最远距离 // controls.minDistance = 120; //设置相机距离原点的最远距离 // controls.maxDistance = 120 + 120 * 0.5;&#125; 渲染这样添加的控制器虽然可以控制场景，但是画布不会重新渲染，所以我们需要添加一个渲染函数并且每次调用自身来更新画面这里使用的是requestAnimationFrame函数来调用自身，也可以使用setInterval但是setInterval是固定时间渲染，如果场景过大，过复杂，可能时间到了还没渲染好又得渲染下一帧，这样会导致页面卡死requestAnimationFrame没有固定时间，他会在当前帧渲染完毕后执行下一次，这样就不会导致页面卡死了接着在render方法中使用controls.update()来更新每次的控制，使用renderer.render来更新画面最后在constructor函数中调用render即可12345private render(): void &#123; window.requestAnimationFrame(() =&gt; this.render()); this.controls.update(); this.renderer.render(this.scene, this.camera);&#125; 最后在需要需要的地方导入并new Three()就可以了 效果]]></content>
      <categories>
        <category>JS</category>
        <category>three.js</category>
      </categories>
      <tags>
        <tag>three.js</tag>
        <tag>threejs</tag>
        <tag>three</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[制作菱形图片遮罩]]></title>
    <url>%2F2019%2F03%2F01%2Fmark%2F</url>
    <content type="text"><![CDATA[方法一使用box-shadow制作菱形遮罩 需要在原有结构内增加一个shaow遮罩层 HTML1234&lt;div class=&quot;img&quot;&gt; &lt;img src=&quot;https://picsum.photos/300/300&quot;&gt; &lt;div class=&quot;shadow&quot;&gt;&lt;/div&gt;&lt;/div&gt; 外层div设置相对定位position: relative;将shadow层旋转45度，并设置阴影；box-shadow中的值分别是：box-shadow：水平位移 垂直位移 阴影宽度 模糊程度 颜色这里水平和垂直位移这只为0，即从中间开始向四周出现阴影。 阴影宽度一定要宽于外框，模糊程度可以填0，即不模糊，颜色填白色。 CSS1234567891011121314151617181920.img &#123; width: 300px; height: 300px; position: relative; margin: 100px auto; overflow: hidden;&#125;.shadow &#123; width: 200px; height: 200px; box-shadow: 0px 0px 0px 200px #fff; transform: rotate(45deg); position: absolute; left: 50%; top: 50%; margin-left: -100px; margin-top: -100px; border-radius: 10px;&#125; 效果 方法二使用两次旋转达到菱形效果 HTML123&lt;div class=&quot;img&quot;&gt; &lt;img src=&quot;https://picsum.photos/300/300&quot;&gt;&lt;/div&gt; CSS1234567891011121314151617181920212223242526.img &#123; position: relative; width:200px; height: 200px; margin: 50px auto; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -o-transform: rotate(45deg); transform: rotate(45deg); border-radius: 10px; overflow: hidden;&#125;.img img &#123; position: absolute; left: 50%; top: 50%; display: block; width: 500px; height: 500px; margin-top: -250px; margin-left: -250px; -webkit-transform: rotate(-45deg); -moz-transform: rotate(-45deg); -o-transform: rotate(-45deg); transform: rotate(-45deg);&#125; 效果]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科学上网（翻墙）神器【蓝灯】]]></title>
    <url>%2F2019%2F01%2F21%2Flantern%2F</url>
    <content type="text"><![CDATA[给大家介绍一款免费限制流量的科学上网神器蓝灯lantren下载地址：Github里面包含Windows，Android，macOS三个版本。点击对应拓展名文件进入下载即可 以Windows为例点击3.0最新版的exe文件 点击download下载 下载先来后双击安装即可。速度还可以~~ 每个月有500MB的免费流量，可以升级到专业版，不限制流量。博主500MB基本足够。而且他采用的是只能切换线路，如果访问的是国内站点，是不通过VPN的，也不会消耗流量。只有当你访问被墙网站的时候才会切换vpn线路。]]></content>
      <tags>
        <tag>科学上网</tag>
        <tag>翻墙</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一句代码解决bootstrap栅格几个设置5等分]]></title>
    <url>%2F2019%2F01%2F04%2Fbootstrap-offset%2F</url>
    <content type="text"><![CDATA[HTML123456789&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;li class=&quot;col-xs-offset-1 col-xs-2 text-center&quot;&gt;苹果&lt;/li&gt; &lt;li class=&quot;col-xs-2 text-center&quot;&gt;香蕉&lt;/li&gt; &lt;li class=&quot;col-xs-2 text-center&quot;&gt;番茄&lt;/li&gt; &lt;li class=&quot;col-xs-2 text-center&quot;&gt;石榴&lt;/li&gt; &lt;li class=&quot;col-xs-2 text-center&quot;&gt;芒果&lt;/li&gt; &lt;/div&gt;&lt;/div&gt;正常设置每个栅格2等分，最后会在末尾空余出2等分（共12等分），然后第一个栅格设置col-xs-offset-1，意思是偏移一格，等于把最后的2等分其中一份放在最前面了。这样做可以解决bootstrap栅格5等分的问题，但是最终宽度会比正常窄，可以单独设置container的宽来解决。]]></content>
      <categories>
        <category>HTML</category>
        <category>BOOTSTRAP</category>
      </categories>
      <tags>
        <tag>bootstrap</tag>
        <tag>offset</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[This is dobby!]]></title>
    <url>%2F2019%2F01%2F03%2Fdobby%2F</url>
    <content type="text"><![CDATA[这就是Dobby Orz.]]></content>
      <categories>
        <category>日常</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[如何使用fonts.googleapis.com使自己的网站增加更多字体]]></title>
    <url>%2F2019%2F01%2F02%2Ffonts-googleapis%2F</url>
    <content type="text"><![CDATA[首先，fonts.googleapis.com解决的是客户端电脑没有安装字体，但是网站主又想客户看到自己想要的字体，通常的做法就是网站的css调用网站内部的字体文件，但是这样做非常不灵活，我们需要更换字体时，不然需要修改css，还需要替换字体文件，于是fonts.googleapis.com就可以解决这个问题。 使用方法CSS引入1&lt;link href=&quot;//fonts.googleapis.com/css?family=Monda:300,300italic,400,400italic,700,700italic|PT Mono:300,300italic,400,400italic,700,700italic&amp;subset=latin,latin-ext&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;链接的具体构成就是：fonts.googleapis.com/css?family=字体名称:加粗程度,加粗程度+是否斜体&amp;subset=latin,latin-ext其中如果需要多种字体用 | 隔开，如果有多种加粗程度最后在需要使用的元素上加入font-family属性即可1234body &#123; font-family: &#x27;Monda&#x27;, &#x27;PT Mono&#x27; , serif; font-size: 48px;&#125; fonts.googleapis.com还有一种ajax请求方式，这里不推荐使用，css是最快也最容易维护的方式。]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>googleapis</tag>
        <tag>字体</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo添加置顶功能和标识]]></title>
    <url>%2F2018%2F12%2F29%2Fhexo-top%2F</url>
    <content type="text"><![CDATA[首先看下效果 具体实现安装插件12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save 新建/修改 文章新建或修改文章时在文章Front-matter中加入top: true即可123456789---title: 无JS实现在线客服的切换效果date: 2018-12-20 15:05:17tags: - css - css3categories: CSStop: true--- 到此为止，文章的置顶功能就实现了,但是我们还需要给置顶的文章加个标识，如So，我们需要加一个图标或者文字标签这里我做了一个简单的，你可以修改一下，做一个好看的图标 添加标识如果你使用的是next的主题，打开目录themes/next/layout/_macro，找到文件post.swig，搜索1&lt;/&#123;% if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;% endif %&#125;&gt;大概在65行，在他上面添加123&#123;% if post.top %&#125; &lt;span style=&quot;color:#f00;border:1px solid #f00;padding:2px 5px;font-size:12px;&quot;&gt;置顶&lt;/span&gt;&#123;% endif %&#125;这是你会发现标识出现了，但是高度有些错位，在themes/next/source/_custom中找到custom.styl文件，添加一行123.posts-expand .post-title &#123; line-height:1&#125;这时你就可以看到具体的效果了 当然你可以添加更好看的图标，只需要修改HTML和CSS即可。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用iconfont.cn快速制作前端图标]]></title>
    <url>%2F2018%2F12%2F22%2Ficonfont%2F</url>
    <content type="text"><![CDATA[以前不会用iconfont.cn的时候，只知道这是个图标库，可以吧图片下载下来，然后制作成图片，在写入HTML。其实没有这么麻烦，iconfont支持三种图片引入方式——Unicode，字体，svg 注册账号首先登录iconfont 这里我使用的是Github账号直接登录，你可以使用微博账号登录 搜索图标然后再首页搜索你需要的图标，可以使用中文搜索（建议英文） 找到想要的图标之后不要点击下载按钮，要点击购物车按钮，这样才能将多个图片集合到一个项目里 通常一个项目或网站肯定不止一个图，这时你可以继续搜素其他图标并加入购物车当你需要将所有图标制作成网站需要的字体文件或者svg文件引入时，点击右上角的购物车按钮 这里的三个选项分别是： 名称 解释 添加至项目 添加到新建或已有的项目（后期可继续添加图标） 下载素材 下载购物车里的图标素材，最后可以下载AI，SVG,PNG格式的图片文件 下载代码 下载生成的引入文件 包含CSS，font，svg等，与添加项目类似，但是后期无法继续添加图标 这里为了后期能够继续增加或删除图标，我们尽量选择添加至项目，如果没有项目，他会提示你新建项目，根据提示操作就好，这里不再赘述。 引用图标制作好的图标可以在我的项目中看到,可以选择引用iconfont的远程地址（CDN方式），也可以下载到本地引入，如果是使用CDN方式，需要依次点击查看在线链接–生成链接 Unicode方式需要在你的css中加入上面的代码12345678@font-face &#123; font-family: &#x27;iconfont&#x27;; /* project id 978636 */ src: url(&#x27;//at.alicdn.com/t/font_978636_9jco6oz9c8i.eot&#x27;); src: url(&#x27;//at.alicdn.com/t/font_978636_9jco6oz9c8i.eot?#iefix&#x27;) format(&#x27;embedded-opentype&#x27;), url(&#x27;//at.alicdn.com/t/font_978636_9jco6oz9c8i.woff&#x27;) format(&#x27;woff&#x27;), url(&#x27;//at.alicdn.com/t/font_978636_9jco6oz9c8i.ttf&#x27;) format(&#x27;truetype&#x27;), url(&#x27;//at.alicdn.com/t/font_978636_9jco6oz9c8i.svg#iconfont&#x27;) format(&#x27;svg&#x27;);&#125;如果某个地方需要使用图标，HTML和CSS分别是这样 HTML123&lt;div class=&quot;dome&quot;&gt; &amp;#xe654;&lt;/div&gt; css123.dome&#123; font-family: &#x27;iconfont&#x27;;&#125; 这里的&amp; # x e 6 5 4;就是图标对应代码 Font classfont class是一个链接，需要用link引入 html12&lt;link rel=&quot;stylesheet&quot; href=&quot;//at.alicdn.com/t/font_978636_9jco6oz9c8i.css&quot;&gt;&lt;div class=&quot;dome&quot;&gt;&lt;/div&gt; css123.dome&#123; font-family: &#x27;iconfont&#x27;;&#125; symbol引用拷贝项目下面生成的symbol代码： HTML1//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js 加入通用css代码： css123456.icon &#123; width: 1em; height: 1em; vertical-align: -0.15em; fill: currentColor; overflow: hidden; &#125; 挑选相应图标并获取类名，应用于页面 html123&lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-xxx&quot;&gt;&lt;/use&gt;&lt;/svg&gt; 这里的#icon-XXX对应图标代码 如icon-menu 最后，墙裂建议使用Font class方式引入，兼容度最高，图标大小可以通过font-size控制，颜色可以通过color控制，很方便。]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>inconfont</tag>
        <tag>图标</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用Github上传并引用video资源]]></title>
    <url>%2F2018%2F12%2F21%2Fgithub-video%2F</url>
    <content type="text"><![CDATA[很多网站都有背景视频的元素，利用的是【HTML5】的新特性————【video】标签例如：点击打开 里面的banner背景，就是一个视频 具体代码：123&lt;video src=&quot;video.mp4&quot; controls=&quot;controls&quot;&gt;您的浏览器不支持 video 标签。&lt;/video&gt;但是对于很多服务器来说，视频太站资源，太耗流量，但是将视频上传到优酷、腾讯视频上又无法获得视频真实地址（video标签中的视频必须是视频的物理地址，即必须以.mp4等的拓展名结束的地址），而且还有广告这里推荐一个简单的方法： 使用GitHub等git托管网站上传视频 方法注册首先注册一个GitHub账号 点我注册 新建项目点击New新建一个项目，名称可以随便取，但是不能写中文,填写好后点击【Create repository】 需要注意的是 必须选中Initialize this repository with a README这个选项，否则你需要安装git使用指令将视频传上去。 上传视频新建号项目你将看到这样的界面，点击【Upload files】上传你的视频就可以，最后上传完了之后点击【Commit changes】 引用视频上传完毕后就能在项目中看到你的视频，点击视频后再复制【View Raw】的连接就可以获得视频的真实地址了，例如我的连接是：https://github.com/HakunaMatata052/video/blob/master/a.mp4?raw=true注意：视频最后的 ?raw=true 不能删除，否则视频无法播放 最后放在代码里看一下123&lt;video src=&quot;https://github.com/HakunaMatata052/video/blob/master/a.mp4?raw=true&quot; controls=&quot;controls&quot;&gt;您的浏览器不支持 video 标签。&lt;/video&gt; 效果： 您的浏览器不支持 video 标签。 如果想让视频当背景用的话，需要设video为自动播放，可以设置autoplay=”autoplay”具体代码如下 123&lt;video src=&quot;https://github.com/HakunaMatata052/video/blob/master/a.mp4?raw=true&quot; controls=&quot;controls&quot; autoplay=&quot;autoplay&quot;&gt;您的浏览器不支持 video 标签。&lt;/video&gt; 如果需要隐藏播放控件可以去掉 controls=”controls” ，也可以使用css123video::-webkit-media-controls &#123; display:none !important;&#125;]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue全局公用函数]]></title>
    <url>%2F2018%2F12%2F21%2Fvue-global-function%2F</url>
    <content type="text"><![CDATA[经常在做项目的时候会遇到一个函数在很多组件和页面中调用，如计算时间差，刷新token等操作，这时就需要定义一个全局都能调用的函数 新建js文件可以放在src的utils文件中，命名index.js 12345exports.install = function (Vue, options) &#123; Vue.prototype.changeData = function ()&#123; alert(&#x27;执行成功&#x27;); &#125;;&#125;; 调用函数在需要调用函数的组件内引入Vue和该函数文件 123import Vue from &#x27;vue&#x27; //引入Vueimport base from &#x27;../../utils&#x27; //引入新建的公用函数jsVue.use(base); //使用新建的公用函数js 如果需要全局引用，则将调用函数写在main.js中即可]]></content>
      <categories>
        <category>JS</category>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无JS实现在线客服的切换效果]]></title>
    <url>%2F2018%2F12%2F20%2Fnojs-toggle%2F</url>
    <content type="text"><![CDATA[首先可以看下效果点我查看 这里利用HTML的 【checkbox】类型的【input】和【label】元素的【for】属性和CSS的【:checked】选择器以及【~】选择器 主要的原理是点击【label】使【label】的【for】属性指定id【input】改变选中状态（【:checked】），【input】选中状态改变后，使用css改变【input】后面的元素的显示或隐藏（或定位）。 首先你必须知道元素的for属性可以控制【checkbox】类型的【input】 例如： 123&lt;input type=&quot;checkbox&quot; id=&quot;dome&quot;&gt;&lt;label for=&quot;dome&quot;&gt;切换&lt;/label&gt; 效果: 然后利用CSS的 ~ 选择器 设置input被选中后紧跟的元素的样式 多提一句~ 选择器表示元素后的同胞元素如：123p~ul&#123; background:#ff0000;&#125;123456&lt;p&gt;快乐生活&lt;/p&gt;&lt;ul&gt; &lt;li&gt;生活&lt;/li&gt; &lt;li&gt;生活&lt;/li&gt; &lt;li&gt;生活&lt;/li&gt;&lt;/ul&gt;会给p元素后所有的ul元素加背景 那么我们需要做的就是为input后的元素做隐藏显示（或改变定位）如何判断需要显示还是隐藏呢？需要用到input的checked属性 如果需要改变默认状态可以给input加checked=”checked” 最后具体代码如下HTML1234567891011&lt;div class=&quot;dome&quot;&gt; &lt;input type=&quot;checkbox&quot; id=&quot;toggle&quot;&gt; &lt;div class=&quot;open&quot;&gt; &lt;label for=&quot;toggle&quot;&gt;关闭&lt;/label&gt; 打开以后你看到的 &lt;/div&gt; &lt;div class=&quot;close&quot;&gt; &lt;label for=&quot;toggle&quot;&gt;打开&lt;/label&gt; 关闭以后你看到的 &lt;/div&gt;&lt;/div&gt; CSS123456789101112131415161718#toggle &#123; display:none;&#125;#toggle~.open &#123; display:block;&#125;#toggle~.close &#123; display:none;&#125;#toggle:checked~.open &#123; display:none;&#125;#toggle:checked~.close &#123; display:block;&#125; 效果：]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css3</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript思维导图]]></title>
    <url>%2F2018%2F12%2F20%2Fjs-mind-map%2F</url>
    <content type="text"><![CDATA[下面附上十张javascript思维导图，如果把里面的内容全部掌握，那就是高手了。思维导图提供给我们一个整体的知识体系，也可以说是一种工具，废话不多说，上图： javascript数据类型 javascript数组 javascript运算符 javascript正则表达式 javascript字符串函数 window对象 DOM基本操作 javascript变量 javascript函数基础 javascript流程控制 本文转自咸鱼老弟https://www.cnblogs.com/xianyulaodi/p/5886128.html]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PNG格式小图标的CSS任意颜色赋色技术]]></title>
    <url>%2F2018%2F12%2F19%2Fcss3-add-color%2F</url>
    <content type="text"><![CDATA[PNG格式小图标的CSS任意颜色赋色技术**注意**：PC某些浏览器不支持，请勿使用，手机端可以使用 主要代码1filter: drop-shadow(rgb(62, 243, 52) 20px 0px); 实现原理原理其实很简单，使用了CSS3滤镜filter中的drop-shadow，drop-shadow滤镜可以给元素或图片非透明区域添加投影。 如果对drop-shadow不是很了解，建议先看看前些时间写的“CSS3 filter:drop-shadow滤镜与box-shadow区别应用”一文！ 对于背景透明的png小图标而言，如果我们施加一个不带模糊的投影，不就等同于生成了另外一个颜色的小图标了吗？ 然后，我们把原始图标隐藏在容器外面，投影图标在容器中间，不见给人感觉是赋色效果了？ 比方说本文的demo，如果把icon父级的的 overflow:hidden 去掉，原始的图标就暴露出来啦！ 具体代码HTML123&lt;i class=&quot;icon&quot;&gt; &lt;i class=&quot;icon icon-del&quot;&gt;&lt;/i&gt;&lt;/i&gt; 1234567891011121314 .icon &#123; /*图标元素必须是块级元素，有宽高，切必须溢出隐藏*/ display: inline-block; width: 20px; height: 20px; overflow: hidden;&#125;.icon &gt; .icon &#123; position: relative; left: -20px; /*-20px为图标宽度，必须是负值*/ border-right: 20px solid transparent; -webkit-filter: drop-shadow(rgb(62, 243, 52) 20px 0px); /*20px为图标宽度*/ filter: drop-shadow(rgb(62, 243, 52) 20px 0px); /*20px为图标宽度*/ background: url(delete.png) no-repeat center; /*图标png文件设置在包裹内的div中切必须是块级元素，有宽高*/&#125; 兼容性IE13+支持，Chrome和FireFox浏览器支持，移动端iOS支持，Android4.4+支持。也就是，基本上，移动端现在可以使用这种技术了。既节约了流量，也让我们的开发更简单，维护更方便了。]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3曲线投影]]></title>
    <url>%2F2018%2F12%2F19%2Fcss3-curve-shadow%2F</url>
    <content type="text"><![CDATA[模仿纸张曲线投影效果展示 实现原理首先，曲线投影的终效果其实是多投影重叠的效果：一点点倾斜的投影重叠一个直直的投影。一般的直来直往的投影显然是使用box-shadow属性就可以搞定了。至于那个倾斜的投影，如果是现代浏览器，则需要就是CSS3变换属性transform（具体参见之前的“CSS3 Transitions, Transforms和Animation使用简介与应用展示”一文）。首先是倾斜，5度左右的样子，然后让其在主投影的后面显示就可以了。然后，单单只有倾斜是不够的，因为有一个脚会从一侧露出来，这很好理解。假设两个矩形一样大，位置完全重叠，如果发生旋转，则必定有边角不重合而露出来。即使矩形尺寸不一样，只要其以一个公共的边角旋转，至少会有两个角露出来，而实际上我们只需要一个，也就是斜边投影的哪个角。那么这个问题该如何解决呢，也很简单，同样是transform，不过这回不是旋转，而是拉伸(skew)，将规整的矩形拉伸成平行四边形，可避免旋转的时候多余的角露出来。 对于不支持CSS3的IE浏览器，按照上面的原理，理论上也是可以模拟出曲线投影效果的。因为IE下的投影效果可以使用投影滤镜（效果生硬不推荐）实现，或是模糊滤镜实现（推荐），至于旋转也有旋转滤镜。但是，就性能和成本而言，是否应该使用很值得商榷。 具体代码HTML12&lt;div class=&quot;img&quot;&gt;&lt;/div&gt;&lt;!-- 图片的宽高可以在CSS里更改 --&gt; CSS1234567891011121314151617181920212223242526272829303132333435363738394041.img &#123; display: inline-block; *display: inline; width: 200px; height: 248px; margin: 20px; background-color: #fff; border: 1px solid #eee; -webkit-box-shadow: 0 1px 4px rgba(0, 0, 0, 0.27), 0 0 60px rgba(0, 0, 0, 0.06) inset; -moz-box-shadow: 0 1px 4px rgba(0, 0, 0, 0.27), 0 0 40px rgba(0, 0, 0, 0.06) inset; box-shadow: 0 1px 4px rgba(0, 0, 0, 0.27), 0 0 40px rgba(0, 0, 0, 0.06) inset; position: relative; *zoom: 1;&#125;.img:before &#123; -webkit-transform: skew(-15deg) rotate(-6deg); -moz-transform: skew(-15deg) rotate(-6deg); transform: skew(-15deg) rotate(-6deg); left: 15px;&#125;.img:after &#123; -webkit-transform: skew(15deg) rotate(6deg); -moz-transform: skew(15deg) rotate(6deg); transform: skew(15deg) rotate(6deg); right: 15px;&#125;.img:before, .img:after &#123; width: 70%; height: 55%; content: &#x27; &#x27;; -webkit-box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3); -moz-box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3); box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3); position: absolute; bottom: 10px; z-index: -1; &#125; 友情提示这里的斜边投影使用的是负值z-index定位到本体阴影的后面的。由于使用的是z-index负值，所以，请务必保证当前投影元素的所有父标签均没有背景图片或背景色（body标签除外），否则，斜边投影是看不到的。 原文链接CSS3 box-shadow实现纸张的曲线投影效果]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css3</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQueryAjax请求完全版]]></title>
    <url>%2F2018%2F12%2F19%2Fjquery-ajax%2F</url>
    <content type="text"><![CDATA[jQueryAjax请求完全版12345678910111213141516171819202122232425$.ajax(&#123; async: true, //true异步，false同步 url: &#x27;/uploads/rs/419/nvhogkww/data.json&#x27;, type: &#x27;get&#x27;, complete: function(XHR, TS) &#123; alert(&#x27;complete&#x27;); &#125;, //完成回调函数(XHR, TS) error: function(XMLHttpRequest, textStatus, errorThrown) &#123; //XMLHttpRequest.readyState: //0 － （未初始化）还没有调用send()方法 //1 － （载入）已调用send()方法，正在发送请求 //2 － （载入完成）send()方法执行完成，已经接收到全部响应内容 //3 － （交互）正在解析响应内容 //4 － （完成）响应内容解析完成，可以在客户端调用了 //XMLHttpRequest.status: //textStatus: &quot;timeout&quot;, &quot;error&quot;, &quot;notmodified&quot; 和 &quot;parsererror&quot;。 //（0）null //（1）timeout 超时 //（2）error //（3）notmodified 未修改 //（4）parsererror 解析错误 console.log(&#x27;错误1：&#x27; + XMLHttpRequest.readyState); console.log(&#x27;错误2：&#x27; + textStatus); console.log(&#x27;错误3：&#x27; + errorThrown); &#125;, //默认值: 自动判断 (xml 或 html)。请求失败时调用此函数。有以下三个参数：XMLHttpRequest 对象、错误信息、（可选）捕获的异常对象。 success: function(response) &#123; alert(&#x27;success&#x27;); &#125;&#125;);]]></content>
      <categories>
        <category>JS</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vuex的使用]]></title>
    <url>%2F2018%2F12%2F19%2Fvuex%2F</url>
    <content type="text"><![CDATA[Vuex的使用安装Vuex1npm install vuex --save 淘宝镜像1cnpm install vuex --save 新建js文件可以放在store文件夹中命名为index.js 12345678910111213141516171819import Vue from &#x27;vue&#x27;import vuex from &#x27;vuex&#x27;Vue.use(vuex);export default new vuex.Store(&#123; state: &#123; api:&#x27;http://wjdh03.sjgogo.cn/api/&#x27;, token:&quot;57373A7E05CB44079B2F12C14A5E83A9&quot;, domain: &quot;http://www.baidu.com&quot;, notice: true, &#125;, mutations: &#123; domainURI(url) &#123; var durl = /http:\/\/([^\/]+)\//i; var domain = url.match(durl); return domain[1]; &#125; &#125;&#125;) 调用Vuexmain.js中引入Vuex并使用 1import store from &#x27;./store&#x27; //引入Vuex 载入Vuex12345const vue = new Vue(&#123; router, store, //载入Vuex render: h =&gt; h(App)&#125;).$mount(&#x27;#app&#x27;) 使用全局状态（变量）在需要使用的组件中 使用调用]]></content>
      <categories>
        <category>JS</category>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[统计数组中相同值的个数]]></title>
    <url>%2F2018%2F12%2F19%2FArray-of-the-same-kind%2F</url>
    <content type="text"><![CDATA[统计数组中相同值的个数1234567891011121314151617181920212223function arrCheck(arr)&#123; var newArr = []; for(var i=0;i&lt;arr.length;i++)&#123; var newJson = &#123;&#125;; var temp=arr[i]; var count=0; for(var j=0;j&lt;arr.length;j++)&#123; if(arr[j]==temp)&#123; count++; arr[j]=-1; &#125; &#125; if(temp != -1)&#123; newJson.name = temp; newJson.num = count; newArr.push(temp+&quot;:&quot;+count) &#125; &#125; return newArr;&#125;arrCheck([&#123;&quot;name&quot;:&quot;&quot;&#125;,2,3,3,4]);document.write(arrCheck([1,2,3,3,4])); 将数字改为JSON可统计相同JSON值出现的次数]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>数组</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js求日期差]]></title>
    <url>%2F2018%2F12%2F19%2FtimeX%2F</url>
    <content type="text"><![CDATA[求时间差函数1234567891011121314var s1 = &#x27;2017-02-26&#x27;; //起始日期var s2 = &#x27;2017-03-02&#x27;; //结束日期var str = DateDiff(s1,s2); function DateDiff(sDate1, sDate2)&#123; //sDate1和sDate2是2002-12-18格式 var aDate, oDate1, oDate2, iDays aDate = sDate1.split(&quot;-&quot;) oDate1 = new Date(aDate[1] + aDate[2] + &#x27;-&#x27; + aDate[0]) //转换为12-18-2002格式 aDate = sDate2.split(&quot;-&quot;) oDate2 = new Date(aDate[1] + &#x27;-&#x27; + aDate[2] + &#x27;-&#x27; + aDate[0]) iDays = parseInt(Math.abs(oDate1 - oDate2) / 1000 / 60 / 60 /24) //把相差的毫秒数转换为天数 return iDays &#125;]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无js实现选项卡效果]]></title>
    <url>%2F2018%2F12%2F19%2Fnojs-tabs%2F</url>
    <content type="text"><![CDATA[无js实现选项卡效果方法一效果展示 实现原理利用锚链接和滚动条实现 缺点基本功能可以满足，但有两个问题，一是由于改变location的hash实现的定位，会触发浏览器原生滚动行为，体验不好；二是选项卡内容的切换“邦邦邦”过于生硬 具体代码HTML12345678910111213&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;list&quot; id=&quot;one&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;list&quot; id=&quot;two&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;list&quot; id=&quot;three&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;list&quot; id=&quot;four&quot;&gt;4&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;link&quot;&gt; &lt;a class=&quot;click&quot; href=&quot;#one&quot;&gt;1&lt;/a&gt; &lt;a class=&quot;click&quot; href=&quot;#two&quot;&gt;2&lt;/a&gt; &lt;a class=&quot;click&quot; href=&quot;#three&quot;&gt;3&lt;/a&gt; &lt;a class=&quot;click&quot; href=&quot;#four&quot;&gt;4&lt;/a&gt;&lt;/div&gt; CSS1234567891011121314151617181920212223242526272829303132333435363738394041.box &#123; width: 200px; height: 100px; border: 1px solid #ddd; overflow: hidden;&#125;.list &#123; width: 200px; height: 100px; line-height: 100px; background: #ddd; font-size: 80px; text-align: center;&#125;.link &#123; width: 200px; padding-top: 10px; text-align: right;&#125;.click &#123; display: inline-block; width: 20px; height: 20px; line-height: 20px; border: 1px solid #ccc; background: #f7f7f7; color: #333; font-size: 12px; font-weight: bold; text-align: center; text-decoration: none;&#125;.click:hover &#123; background: #eee; color: #345;&#125; 方法二效果展示点击查看效果 实现原理基于控件元素focus触发滚动重定位 缺点选项卡内容切换的时候，还是“邦邦邦”这种干巴巴的效果，并没有滑来滑去那种湿湿的效果 具体代码HTML12345678910111213&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;list&quot;&gt;&lt;input id=&quot;one&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;list&quot;&gt;&lt;input id=&quot;two&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;list&quot;&gt;&lt;input id=&quot;three&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;list&quot;&gt;&lt;input id=&quot;four&quot;&gt;4&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;link&quot;&gt; &lt;label class=&quot;click&quot; for=&quot;one&quot;&gt;1&lt;/label&gt; &lt;label class=&quot;click&quot; for=&quot;two&quot;&gt;2&lt;/label&gt; &lt;label class=&quot;click&quot; for=&quot;three&quot;&gt;3&lt;/label&gt; &lt;label class=&quot;click&quot; for=&quot;four&quot;&gt;4&lt;/label&gt;&lt;/div&gt; CSS12345678910111213141516171819.box &#123; width: 20em; height: 10em; border: 1px solid #ddd; overflow: hidden;&#125;.list &#123; height: 100%; background: #ddd; text-align: center; position: relative;&#125;.list &gt; input &#123; position: absolute; top:0; height: 100%; width: 1px; border:0; padding: 0; margin: 0; clip: rect(0 0 0 0);&#125;]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>tab</tag>
        <tag>选项卡</tag>
        <tag>无js</tag>
      </tags>
  </entry>
</search>
