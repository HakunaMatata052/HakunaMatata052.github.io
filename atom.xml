<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序园-ICU</title>
  
  <subtitle>程序猿的重点-ICU!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hakunamatata052.github.io/"/>
  <updated>2022-06-06T07:04:20.531Z</updated>
  <id>https://hakunamatata052.github.io/</id>
  
  <author>
    <name>Hakunamatata</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>检测开发工具是否被打开和无限debugger的设置与破解</title>
    <link href="https://hakunamatata052.github.io/2022/06/06/debugger/"/>
    <id>https://hakunamatata052.github.io/2022/06/06/debugger/</id>
    <published>2022-06-06T07:01:00.000Z</published>
    <updated>2022-06-06T07:04:20.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>诸如<a href="http://www.4399.com/flash/18012.htm">4399小游戏</a>这类网站，为了防止被别人扒代码，一般都会设置检测用户是否打开开发者工具（F12），并且如果是打开的那么会无限弹出debugger，让用户无法通过开发者工具调试代码。<br>弹出无限debugger的原理也很简单，就是设置一个定时器，或者使用递归无限调用debugger。</p><h2 id="无限debugger"><a href="#无限debugger" class="headerlink" title="无限debugger"></a>无限debugger</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;[<span class="string">&#x27;constructor&#x27;</span>](<span class="string">&#x27;debugger&#x27;</span>)())</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">debug</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;[<span class="string">&#x27;constructor&#x27;</span>](<span class="string">&#x27;debugger&#x27;</span>)());</span><br><span class="line">        debug()</span><br><span class="line">    &#125;</span><br><span class="line">    debug()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>两个函数都放在匿名函数内是防止有人将函数设置为空（防君子🐶）</p><h2 id="破解无限debugger"><a href="#破解无限debugger" class="headerlink" title="破解无限debugger"></a>破解无限debugger</h2><p>破解方法也很简单，直接在开发工具中设置跳过断点即可<br><img src="./WeChat093352cb57fe95123f434f6c1526a86d.png" alt="跳过断点"><br>如果你想在自己写的chrome插件中在页面加载前将debugger清除掉，可以设置以下两段代码来清除<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;).constructor === <span class="built_in">Function</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.constructor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="检测用户是否打开了开发工具"><a href="#检测用户是否打开了开发工具" class="headerlink" title="检测用户是否打开了开发工具"></a>检测用户是否打开了开发工具</h2><p>检测方法有很多，诸如监听快捷键，比较窗口与可视窗口大小等，但是这类都很容易破解。<br>比较好的方法是，可以记录debugger前后时间，然后计算时间差，如果前后时间差过长（大于2s），那就基本可以认定是有人点了断点继续按钮了，如果是小于2s，也可能是人为点击的，这时候就需要进一步判断，设置一个计数器，如果小于2s的次数过多，那么也可以判断这就是人为点击的。<br>具体代码如下(此段摘录于4399小游戏)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">consoleOpenCallback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;关闭调试窗&#x27;</span>);</span><br><span class="line">    <span class="built_in">window</span>.location.reload();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Anti_numtots = <span class="number">0</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>._windon_handler = <span class="built_in">setInterval</span>( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> before = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">        <span class="keyword">var</span> after = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">if</span> (after.getTime() - before.getTime() &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (after.getTime() - before.getTime() &gt; <span class="number">2000</span>) &#123;</span><br><span class="line">                consoleOpenCallback();</span><br><span class="line">                <span class="built_in">clearInterval</span>(_windon_handler);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                Anti_numtots++;</span><br><span class="line">                <span class="keyword">if</span>(Anti_numtots&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">                    consoleOpenCallback();</span><br><span class="line">                    <span class="built_in">clearInterval</span>(_windon_handler);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Anti_numtots = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;诸如&lt;a href=&quot;http://www.4399.com/flash/18012.htm&quot;&gt;4399小游戏&lt;/a&gt;这类网站，为了防止被别
      
    
    </summary>
    
      <category term="JS" scheme="https://hakunamatata052.github.io/categories/JS/"/>
    
    
      <category term="debugger" scheme="https://hakunamatata052.github.io/tags/debugger/"/>
    
  </entry>
  
  <entry>
    <title>whistle抓包工具</title>
    <link href="https://hakunamatata052.github.io/2022/04/21/whistle/"/>
    <id>https://hakunamatata052.github.io/2022/04/21/whistle/</id>
    <published>2022-04-21T04:03:36.000Z</published>
    <updated>2022-04-22T02:23:33.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要使用"><a href="#为什么要使用" class="headerlink" title="为什么要使用"></a>为什么要使用</h1><ul><li>1、方便在本地模拟修改线上资源</li><li>2、防止正式环境与开发环境代码各种资源路径、接口路径不同，导致上线未修改引用的是本地资源</li><li>3、可以在真机上审查元素，重构问题一目了然</li><li>4、mock数据</li><li>5、待补充</li></ul><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="安装Whistle【抓包工具】"><a href="#安装Whistle【抓包工具】" class="headerlink" title="安装Whistle【抓包工具】"></a>安装Whistle<code>【抓包工具】</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i whistle -g</span><br><span class="line">// 或</span><br><span class="line">yarn add global whistle</span><br></pre></td></tr></table></figure><h2 id="启动whistle"><a href="#启动whistle" class="headerlink" title="启动whistle"></a>启动whistle</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w2 start</span><br></pre></td></tr></table></figure><h2 id="终端代理"><a href="#终端代理" class="headerlink" title="终端代理"></a>终端代理</h2><p>whistle只是一个抓包工具，他可以拦截并修改请求内容。可以简单的理解为服务端（类似vpn服务器）。<br>有了服务器，你的本机（pc或手机）需要<code>代理</code>(类似于vpn软件)</p><h3 id="pc端代理"><a href="#pc端代理" class="headerlink" title="pc端代理"></a>pc端代理</h3><p>安装Chrome的SwitchyOmega插件 <a href="./Proxy-SwitchyOmega_v2.5.21.zip">点击下载</a><br>按图示配置代理<br><img src="./WX20220420-155500.png" alt="SwitchyOmega插件"><br>当SwitchyOmega插件选择<code>proxy</code>时，即表示代理到whistle抓包工具，选择<code>系统代理</code>时，表示使用系统的vpn等代理，如链接ulinkVPN时，或使用其他vpn时，当选择<code>直接链接</code>时，表示不使用任何代理及vpn，此时使用ulinkVPN无效。</p><h3 id="移动端代理"><a href="#移动端代理" class="headerlink" title="移动端代理"></a>移动端代理</h3><p>移动端无需安装插件，直接将wifi链接至和本机电脑统一局域网的wifi中即可。<br>此时选择链接的wifi，在wifi设置中将代理选项打开，ip地址填写电脑的ip地址，此ip地址也可以在whistle工具中查看，本机电脑打开<a href="http://127.0.0.1:8899">http://127.0.0.1:8899</a>，点击<code>Online</code>即可看到本机ip地址<br><img src="./WX20220420-160441.png" alt="安全证书"></p><h2 id="安装https证书"><a href="#安装https证书" class="headerlink" title="安装https证书"></a>安装https证书</h2><p>顶部菜单栏点击https勾选如图所示<br><img src="./WX20220420-160811.png" alt="本机ip"><br>终端已经配置好代理的情况下：</p><ul><li>移动端扫码下载安装安全证书</li><li>pc端点击<code>Download RootCA</code>（安装选项自行百度）</li><li>或直接<a href="./rootCA.crt">点击下载</a><br>ios端需要注意的是，安装好证书后，需要在<code>通用</code>-<code>关于本机</code>-<code>证书信任设置</code>中打开whistle.XXXXXXXXXX<h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2>此时已经可以进行http和https的抓包了，在network中可以看到被代理的设备发出的http请求，以及请求的参数，返回的内容。<br><img src="./WX20220420-161644.png" alt="network"><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2>如何将线上的资源使用本地资源代替？<br>在<code>rules</code>中配置规则，一下时候简单的几种规则<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tencent.com 127.0.0.1 # tencent.com域名下所有资源代理到本地ip，类似于配置hosts</span><br><span class="line">https://tencent.com http://127.0.0.1 # 将https的线上地址代理到没有https的本地环境</span><br><span class="line">https://tencent.com https://localhost:8888 # 将线上地址代理到特殊端口的本地环境</span><br><span class="line">https://tencent.com/app.js D://doc/app.js # 将线上某个文件代理到本地文件</span><br></pre></td></tr></table></figure><h2 id="微信内审查元素"><a href="#微信内审查元素" class="headerlink" title="微信内审查元素"></a>微信内审查元素</h2>使用<code>vconsole</code>虽然能查看大部分页面dom，请求等，但是无法直观的看到某个重构页面的dom具体位置，大小，内外边距等。<br>使用Whistle整合的weinre即可在电脑端审查移动设备的dom元素。<br>首先在<code>rules</code>中配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://* weinre:// # 表示将所有https请求通过weinre工具抓包，也可设置单独的域名或页面</span><br></pre></td></tr></table></figure>打开顶部导航中的<code>Weinre</code>即可看到移动设备中打开的页面地址，点击地址后再点击顶部菜单中红的Elements即可查看移动设备中的dom节点。<br><img src="./WX20220420-163049.png" alt="Weinre"><br><img src="./WX20220420-163213.png" alt="Weinre"><h2 id="mock数据"><a href="#mock数据" class="headerlink" title="mock数据"></a>mock数据</h2>Whistle可以安装各种插件，mock数据可以安装<code>vase</code><br>具体用法自行百度吧！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么要使用&quot;&gt;&lt;a href=&quot;#为什么要使用&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用&quot;&gt;&lt;/a&gt;为什么要使用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1、方便在本地模拟修改线上资源&lt;/li&gt;
&lt;li&gt;2、防止正式环境与开发环境代码各种资源路径、接
      
    
    </summary>
    
      <category term="工具" scheme="https://hakunamatata052.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="whistle 代理" scheme="https://hakunamatata052.github.io/tags/whistle-%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>使用vscode中的eslint插件在非模块化的项目中进行代码提示和格式化</title>
    <link href="https://hakunamatata052.github.io/2022/01/05/vscode-eslint/"/>
    <id>https://hakunamatata052.github.io/2022/01/05/vscode-eslint/</id>
    <published>2022-01-05T04:54:18.000Z</published>
    <updated>2022-01-05T08:09:00.025Z</updated>
    
    <content type="html"><![CDATA[<p>eslint可以在模块化开发的项目中对代码进行提示和格式化，也可以配合vscode的eslint插件进行提示和格式化。<br>那在非模块化的项目中如何达到同样效果呢？比如只有一个index.html和index.js的普通网页中。<br>如图</p><p><video src="/2022/01/05/vscode-eslint/vscode-eslint.mp4" autoplay loop controls style="display:block;margin:auto"></video><br>接下来，讲一下如何使用使用全局eslint依赖和vscode进行代码格式化</p><h3 id="安装全局eslint（建议，也可以安装到本地–跳过本步）"><a href="#安装全局eslint（建议，也可以安装到本地–跳过本步）" class="headerlink" title="安装全局eslint（建议，也可以安装到本地–跳过本步）"></a>安装全局eslint（建议，也可以安装到本地–跳过本步）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm i eslint -g</span><br><span class="line">// or</span><br><span class="line">sudo yarn global add eslint</span><br></pre></td></tr></table></figure><h3 id="初始化一个项目"><a href="#初始化一个项目" class="headerlink" title="初始化一个项目"></a>初始化一个项目</h3><p>找一个文件夹来初始化项目，这个文件夹的作用是让vscode来查找eslint插件使用所需依赖，和查找eslint规则的。<br>所以需要放在一个安全点（不容易被清理掉）的文件夹内，我是放在<code>/Users/xxx/vscode-eslint</code>里。<br>然后就想正常做一个模块化开发项目一样，初始化 — 安装依赖<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd vscode-eslint</span><br><span class="line">npm init -y</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure></p><h3 id="初始化eslint"><a href="#初始化eslint" class="headerlink" title="初始化eslint"></a>初始化eslint</h3><p>项目初始化完成后，利用全局依赖eslint来初始化eslint，如果不使用全局的eslint也可以本地安装，做法类似。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint --init</span><br></pre></td></tr></table></figure><br>根据自己的需要选择初始化中的选项。<br>初始化完成后需要修改<code>.eslintrc.js</code>文件。<br>我的文件内配置了typescript相关插件，不需要的化可以删掉，需要的话，还要安装typescript相关依赖（自行Google）。<br><code>.eslintrc.js</code>文件中的rules就是将来vscode代码提示和格式化使用规则了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="string">&#x27;env&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;browser&#x27;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;node&#x27;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;commonjs&#x27;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;amd&#x27;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;es6&#x27;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;mocha&#x27;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;es2021&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;extends&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;parser&#x27;</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;parserOptions&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ecmaVersion&#x27;</span>: <span class="number">13</span>,</span><br><span class="line">        <span class="string">&#x27;sourceType&#x27;</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;plugins&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;@typescript-eslint&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;rules&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;@typescript-eslint/no-var-requires&#x27;</span>: <span class="number">0</span>, <span class="comment">// 没有定义requires()</span></span><br><span class="line">        <span class="string">&#x27;no-alert&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁止使用alert confirm prompt</span></span><br><span class="line">        <span class="string">&#x27;no-array-constructor&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止使用数组构造器</span></span><br><span class="line">        <span class="string">&#x27;no-bitwise&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁止使用按位运算符</span></span><br><span class="line">        <span class="string">&#x27;no-caller&#x27;</span>: <span class="number">1</span>,<span class="comment">// 禁止使用arguments.caller或arguments.callee</span></span><br><span class="line">        <span class="string">&#x27;no-catch-shadow&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line">        <span class="string">&#x27;no-class-assign&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止给类赋值</span></span><br><span class="line">        <span class="string">&#x27;no-cond-assign&#x27;</span>: <span class="number">1</span>,<span class="comment">// 禁止在条件表达式中使用赋值语句</span></span><br><span class="line">        <span class="string">&#x27;no-console&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁止使用console</span></span><br><span class="line">        <span class="string">&#x27;no-const-assign&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止修改const声明的变量</span></span><br><span class="line">        <span class="string">&#x27;no-constant-condition&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line">        <span class="string">&#x27;no-continue&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁止使用continue</span></span><br><span class="line">        <span class="string">&#x27;no-control-regex&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止在正则表达式中使用控制字符</span></span><br><span class="line">        <span class="string">&#x27;no-debugger&#x27;</span>: <span class="number">1</span>,<span class="comment">// 禁止使用debugger</span></span><br><span class="line">        <span class="string">&#x27;no-delete-var&#x27;</span>: <span class="number">2</span>,<span class="comment">// 不能对var声明的变量使用delete操作符</span></span><br><span class="line">        <span class="string">&#x27;no-div-regex&#x27;</span>: <span class="number">1</span>,<span class="comment">// 不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line">        <span class="string">&#x27;no-dupe-keys&#x27;</span>: <span class="number">2</span>,<span class="comment">// 在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line">        <span class="string">&#x27;no-dupe-args&#x27;</span>: <span class="number">2</span>,<span class="comment">// 函数参数不能重复</span></span><br><span class="line">        <span class="string">&#x27;no-duplicate-case&#x27;</span>: <span class="number">2</span>,<span class="comment">// switch中的case标签不能重复</span></span><br><span class="line">        <span class="string">&#x27;no-else-return&#x27;</span>: <span class="number">2</span>,<span class="comment">// 如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line">        <span class="string">&#x27;no-empty&#x27;</span>: <span class="number">2</span>,<span class="comment">// 块语句中的内容不能为空</span></span><br><span class="line">        <span class="string">&#x27;no-empty-character-class&#x27;</span>: <span class="number">2</span>,<span class="comment">// 正则表达式中的[]内容不能为空</span></span><br><span class="line">        <span class="string">&#x27;no-eq-null&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止对null使用==或!=运算符</span></span><br><span class="line">        <span class="string">&#x27;no-eval&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止使用eval</span></span><br><span class="line">        <span class="string">&#x27;no-ex-assign&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止给catch语句中的异常参数赋值</span></span><br><span class="line">        <span class="string">&#x27;no-extend-native&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止扩展native对象</span></span><br><span class="line">        <span class="string">&#x27;no-extra-bind&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止不必要的函数绑定</span></span><br><span class="line">        <span class="string">&#x27;no-extra-boolean-cast&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止不必要的bool转换</span></span><br><span class="line">        <span class="string">&#x27;no-extra-parens&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止非必要的括号</span></span><br><span class="line">        <span class="string">&#x27;no-extra-semi&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止多余的冒号</span></span><br><span class="line">        <span class="string">&#x27;no-fallthrough&#x27;</span>: <span class="number">1</span>,<span class="comment">// 禁止switch穿透</span></span><br><span class="line">        <span class="string">&#x27;no-floating-decimal&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止省略浮点数中的0 .5 3.</span></span><br><span class="line">        <span class="string">&#x27;no-func-assign&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止重复的函数声明</span></span><br><span class="line">        <span class="string">&#x27;no-implicit-coercion&#x27;</span>: <span class="number">1</span>,<span class="comment">// 禁止隐式转换</span></span><br><span class="line">        <span class="string">&#x27;no-implied-eval&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止使用隐式eval</span></span><br><span class="line">        <span class="string">&#x27;no-inline-comments&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁止行内备注</span></span><br><span class="line">        <span class="string">&#x27;no-inner-declarations&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;functions&#x27;</span>,],<span class="comment">// 禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line">        <span class="string">&#x27;no-invalid-regexp&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止无效的正则表达式</span></span><br><span class="line">        <span class="string">&#x27;no-invalid-this&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line">        <span class="string">&#x27;no-irregular-whitespace&#x27;</span>: <span class="number">2</span>,<span class="comment">// 不能有不规则的空格</span></span><br><span class="line">        <span class="string">&#x27;no-iterator&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止使用__iterator__ 属性</span></span><br><span class="line">        <span class="string">&#x27;no-label-var&#x27;</span>: <span class="number">2</span>,<span class="comment">// label名不能与var声明的变量名相同</span></span><br><span class="line">        <span class="string">&#x27;no-labels&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止标签声明</span></span><br><span class="line">        <span class="string">&#x27;no-lone-blocks&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止不必要的嵌套块</span></span><br><span class="line">        <span class="string">&#x27;no-lonely-if&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止else语句内只有if语句</span></span><br><span class="line">        <span class="string">&#x27;no-loop-func&#x27;</span>: <span class="number">1</span>,<span class="comment">// 禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line">        <span class="string">&#x27;no-mixed-requires&#x27;</span>: [<span class="number">0</span>, <span class="literal">false</span>,],<span class="comment">// 声明时不能混用声明类型</span></span><br><span class="line">        <span class="string">&#x27;no-mixed-spaces-and-tabs&#x27;</span>: [<span class="number">2</span>, <span class="literal">false</span>,],<span class="comment">// 禁止混用tab和空格</span></span><br><span class="line">        <span class="string">&#x27;linebreak-style&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;windows&#x27;</span>,],<span class="comment">// 换行风格</span></span><br><span class="line">        <span class="string">&#x27;no-multi-spaces&#x27;</span>: <span class="number">1</span>,<span class="comment">// 不能用多余的空格</span></span><br><span class="line">        <span class="string">&#x27;no-multi-str&#x27;</span>: <span class="number">2</span>,<span class="comment">// 字符串不能用\换行</span></span><br><span class="line">        <span class="string">&#x27;no-multiple-empty-lines&#x27;</span>: [<span class="number">1</span>, &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">1</span>,&#125;,],<span class="comment">// 空行最多不能超过1行</span></span><br><span class="line">        <span class="string">&#x27;no-native-reassign&#x27;</span>: <span class="number">2</span>,<span class="comment">// 不能重写native对象</span></span><br><span class="line">        <span class="string">&#x27;no-negated-in-lhs&#x27;</span>: <span class="number">2</span>,<span class="comment">// in 操作符的左边不能有!</span></span><br><span class="line">        <span class="string">&#x27;no-nested-ternary&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁止使用嵌套的三目运算</span></span><br><span class="line">        <span class="string">&#x27;no-new&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁止在使用new构造一个实例后不赋值</span></span><br><span class="line">        <span class="string">&#x27;no-new-func&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止使用new Function</span></span><br><span class="line">        <span class="string">&#x27;no-new-object&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止使用new Object()</span></span><br><span class="line">        <span class="string">&#x27;no-new-require&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止使用new require</span></span><br><span class="line">        <span class="string">&#x27;no-new-wrappers&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line">        <span class="string">&#x27;no-obj-calls&#x27;</span>: <span class="number">1</span>,<span class="comment">// 不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line">        <span class="string">&#x27;no-octal&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止使用八进制数字</span></span><br><span class="line">        <span class="string">&#x27;no-octal-escape&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止使用八进制转义序列</span></span><br><span class="line">        <span class="string">&#x27;no-param-reassign&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止给参数重新赋值</span></span><br><span class="line">        <span class="string">&#x27;no-path-concat&#x27;</span>: <span class="number">0</span>,<span class="comment">// node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line">        <span class="string">&#x27;no-plusplus&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁止使用++，--</span></span><br><span class="line">        <span class="string">&#x27;no-process-env&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁止使用process.env</span></span><br><span class="line">        <span class="string">&#x27;no-process-exit&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁止使用process.exit()</span></span><br><span class="line">        <span class="string">&#x27;no-proto&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止使用__proto__属性</span></span><br><span class="line">        <span class="string">&#x27;no-redeclare&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁止重复声明变量</span></span><br><span class="line">        <span class="string">&#x27;no-regex-spaces&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line">        <span class="string">&#x27;no-restricted-modules&#x27;</span>: <span class="number">0</span>,<span class="comment">// 如果禁用了指定模块，使用就会报错</span></span><br><span class="line">        <span class="string">&#x27;no-return-assign&#x27;</span>: <span class="number">1</span>,<span class="comment">// return 语句中不能有赋值表达式</span></span><br><span class="line">        <span class="string">&#x27;no-script-url&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁止使用javascript:void(0)</span></span><br><span class="line">        <span class="string">&#x27;no-self-compare&#x27;</span>: <span class="number">2</span>,<span class="comment">// 不能比较自身</span></span><br><span class="line">        <span class="string">&#x27;no-sequences&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁止使用逗号运算符</span></span><br><span class="line">        <span class="string">&#x27;no-shadow&#x27;</span>: <span class="number">2</span>,<span class="comment">// 外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line">        <span class="string">&#x27;no-shadow-restricted-names&#x27;</span>: <span class="number">2</span>,<span class="comment">// 严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line">        <span class="string">&#x27;no-spaced-func&#x27;</span>: <span class="number">2</span>,<span class="comment">// 函数调用时 函数名与()之间不能有空格</span></span><br><span class="line">        <span class="string">&#x27;no-sparse-arrays&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止稀疏数组， [1,,2]</span></span><br><span class="line">        <span class="string">&#x27;no-sync&#x27;</span>: <span class="number">0</span>,<span class="comment">// nodejs 禁止同步方法</span></span><br><span class="line">        <span class="string">&#x27;no-ternary&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁止使用三目运算符</span></span><br><span class="line">        <span class="string">&#x27;no-trailing-spaces&#x27;</span>: <span class="number">1</span>,<span class="comment">// 一行结束后面不要有空格</span></span><br><span class="line">        <span class="string">&#x27;no-this-before-super&#x27;</span>: <span class="number">0</span>,<span class="comment">// 在调用super()之前不能使用this或super</span></span><br><span class="line">        <span class="string">&#x27;no-throw-literal&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止抛出字面量错误 throw &quot;error&quot;;</span></span><br><span class="line">        <span class="string">&#x27;no-undef&#x27;</span>: <span class="number">1</span>,<span class="comment">// 不能有未定义的变量</span></span><br><span class="line">        <span class="string">&#x27;no-undef-init&#x27;</span>: <span class="number">2</span>,<span class="comment">// 变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line">        <span class="string">&#x27;no-undefined&#x27;</span>: <span class="number">2</span>,<span class="comment">// 不能使用undefined</span></span><br><span class="line">        <span class="string">&#x27;no-unexpected-multiline&#x27;</span>: <span class="number">2</span>,<span class="comment">// 避免多行表达式</span></span><br><span class="line">        <span class="string">&#x27;no-underscore-dangle&#x27;</span>: <span class="number">1</span>,<span class="comment">// 标识符不能以_开头或结尾</span></span><br><span class="line">        <span class="string">&#x27;no-unneeded-ternary&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line">        <span class="string">&#x27;no-unreachable&#x27;</span>: <span class="number">2</span>,<span class="comment">// 不能有无法执行的代码</span></span><br><span class="line">        <span class="string">&#x27;no-unused-expressions&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止无用的表达式</span></span><br><span class="line">        <span class="string">&#x27;no-unused-vars&#x27;</span>: [<span class="number">2</span>, &#123;<span class="string">&#x27;vars&#x27;</span>: <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: <span class="string">&#x27;after-used&#x27;</span>,&#125;,],<span class="comment">// 不能有声明后未被使用的变量或参数</span></span><br><span class="line">        <span class="string">&#x27;no-use-before-define&#x27;</span>: <span class="number">2</span>,<span class="comment">// 未定义前不能使用</span></span><br><span class="line">        <span class="string">&#x27;no-useless-call&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止不必要的call和apply</span></span><br><span class="line">        <span class="string">&#x27;no-void&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁用void操作符</span></span><br><span class="line">        <span class="string">&#x27;no-var&#x27;</span>: <span class="number">0</span>,<span class="comment">// 禁用var，用let和const代替</span></span><br><span class="line">        <span class="string">&#x27;no-warning-comments&#x27;</span>: [<span class="number">1</span>, &#123; <span class="string">&#x27;terms&#x27;</span>: [<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;fixme&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>,], <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;start&#x27;</span>, &#125;,],<span class="comment">// 不能有警告备注</span></span><br><span class="line">        <span class="string">&#x27;no-with&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁用with</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;array-bracket-spacing&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>,],<span class="comment">// 是否允许非空数组里面有多余的空格</span></span><br><span class="line">        <span class="string">&#x27;arrow-parens&#x27;</span>: <span class="number">0</span>,<span class="comment">// 箭头函数用小括号括起来</span></span><br><span class="line">        <span class="string">&#x27;arrow-spacing&#x27;</span>: <span class="number">0</span>,<span class="comment">// =&gt;的前/后括号</span></span><br><span class="line">        <span class="string">&#x27;accessor-pairs&#x27;</span>: <span class="number">0</span>,<span class="comment">// 在对象中使用getter/setter</span></span><br><span class="line">        <span class="string">&#x27;block-scoped-var&#x27;</span>: <span class="number">0</span>,<span class="comment">// 块语句中使用var</span></span><br><span class="line">        <span class="string">&#x27;brace-style&#x27;</span>: [<span class="number">1</span>, <span class="string">&#x27;1tbs&#x27;</span>,],<span class="comment">// 大括号风格</span></span><br><span class="line">        <span class="string">&#x27;callback-return&#x27;</span>: <span class="number">1</span>,<span class="comment">// 避免多次调用回调什么的</span></span><br><span class="line">        <span class="string">&#x27;camelcase&#x27;</span>: <span class="number">2</span>,<span class="comment">// 强制驼峰法命名</span></span><br><span class="line">        <span class="string">&#x27;comma-dangle&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>,],<span class="comment">// 对象字面量项尾不能有逗号</span></span><br><span class="line">        <span class="string">&#x27;comma-spacing&#x27;</span>: <span class="number">0</span>,<span class="comment">// 逗号前后的空格</span></span><br><span class="line">        <span class="string">&#x27;comma-style&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;last&#x27;</span>,],<span class="comment">// 逗号风格，换行时在行首还是行尾</span></span><br><span class="line">        <span class="string">&#x27;complexity&#x27;</span>: [<span class="number">0</span>, <span class="number">11</span>,],<span class="comment">// 循环复杂度</span></span><br><span class="line">        <span class="string">&#x27;computed-property-spacing&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;never&#x27;</span>,],<span class="comment">// 是否允许计算后的键名什么的</span></span><br><span class="line">        <span class="string">&#x27;consistent-return&#x27;</span>: <span class="number">0</span>,<span class="comment">// return 后面是否允许省略</span></span><br><span class="line">        <span class="string">&#x27;consistent-this&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;that&#x27;</span>,],<span class="comment">// this别名</span></span><br><span class="line">        <span class="string">&#x27;constructor-super&#x27;</span>: <span class="number">0</span>,<span class="comment">// 非派生类不能调用super，派生类必须调用super</span></span><br><span class="line">        <span class="string">&#x27;curly&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;all&#x27;</span>,],<span class="comment">// 必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line">        <span class="string">&#x27;default-case&#x27;</span>: <span class="number">2</span>,<span class="comment">// switch语句最后必须有default</span></span><br><span class="line">        <span class="string">&#x27;dot-location&#x27;</span>: <span class="number">0</span>,<span class="comment">// 对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line">        <span class="string">&#x27;dot-notation&#x27;</span>: [<span class="number">0</span>, &#123; <span class="string">&#x27;allowKeywords&#x27;</span>: <span class="literal">true</span>, &#125;,],<span class="comment">// 避免不必要的方括号</span></span><br><span class="line">        <span class="string">&#x27;eol-last&#x27;</span>: <span class="number">0</span>,<span class="comment">// 文件以单一的换行符结束</span></span><br><span class="line">        <span class="string">&#x27;eqeqeq&#x27;</span>: <span class="number">2</span>,<span class="comment">// 必须使用全等</span></span><br><span class="line">        <span class="string">&#x27;func-names&#x27;</span>: <span class="number">0</span>,<span class="comment">// 函数表达式必须有名字</span></span><br><span class="line">        <span class="string">&#x27;func-style&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;declaration&#x27;</span>,],<span class="comment">// 函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line">        <span class="string">&#x27;generator-star-spacing&#x27;</span>: <span class="number">0</span>,<span class="comment">// 生成器函数*的前后空格</span></span><br><span class="line">        <span class="string">&#x27;guard-for-in&#x27;</span>: <span class="number">0</span>,<span class="comment">// for in循环要用if语句过滤</span></span><br><span class="line">        <span class="string">&#x27;handle-callback-err&#x27;</span>: <span class="number">0</span>,<span class="comment">// nodejs 处理错误</span></span><br><span class="line">        <span class="string">&#x27;id-length&#x27;</span>: <span class="number">0</span>,<span class="comment">// 变量名长度</span></span><br><span class="line">        <span class="string">&#x27;indent&#x27;</span>: [<span class="number">2</span>, <span class="number">4</span>,],<span class="comment">// 缩进风格</span></span><br><span class="line">        <span class="string">&#x27;init-declarations&#x27;</span>: <span class="number">0</span>,<span class="comment">// 声明时必须赋初值</span></span><br><span class="line">        <span class="string">&#x27;key-spacing&#x27;</span>: [<span class="number">0</span>, &#123; <span class="string">&#x27;beforeColon&#x27;</span>: <span class="literal">false</span>, <span class="string">&#x27;afterColon&#x27;</span>: <span class="literal">true</span>, &#125;,],<span class="comment">// 对象字面量中冒号的前后空格</span></span><br><span class="line">        <span class="string">&#x27;lines-around-comment&#x27;</span>: <span class="number">0</span>,<span class="comment">// 行前/行后备注</span></span><br><span class="line">        <span class="string">&#x27;max-depth&#x27;</span>: [<span class="number">0</span>, <span class="number">4</span>,],<span class="comment">// 嵌套块深度</span></span><br><span class="line">        <span class="string">&#x27;max-len&#x27;</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>,],<span class="comment">// 字符串最大长度</span></span><br><span class="line">        <span class="string">&#x27;max-nested-callbacks&#x27;</span>: [<span class="number">0</span>, <span class="number">2</span>,],<span class="comment">// 回调嵌套深度</span></span><br><span class="line">        <span class="string">&#x27;max-params&#x27;</span>: [<span class="number">0</span>, <span class="number">3</span>,],<span class="comment">// 函数最多只能有3个参数</span></span><br><span class="line">        <span class="string">&#x27;max-statements&#x27;</span>: [<span class="number">0</span>, <span class="number">10</span>,],<span class="comment">// 函数内最多有几个声明</span></span><br><span class="line">        <span class="string">&#x27;new-cap&#x27;</span>: <span class="number">2</span>,<span class="comment">// 函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line">        <span class="string">&#x27;new-parens&#x27;</span>: <span class="number">2</span>,<span class="comment">// new时必须加小括号</span></span><br><span class="line">        <span class="string">&#x27;newline-after-var&#x27;</span>: <span class="number">2</span>,<span class="comment">// 变量声明后是否需要空一行</span></span><br><span class="line">        <span class="string">&#x27;object-curly-spacing&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;never&#x27;</span>,],<span class="comment">// 大括号内是否允许不必要的空格</span></span><br><span class="line">        <span class="string">&#x27;object-shorthand&#x27;</span>: <span class="number">0</span>,<span class="comment">// 强制对象字面量缩写语法</span></span><br><span class="line">        <span class="string">&#x27;one-var&#x27;</span>: <span class="number">0</span>,<span class="comment">// 连续声明</span></span><br><span class="line">        <span class="string">&#x27;operator-assignment&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;always&#x27;</span>,],<span class="comment">// 赋值运算符 += -=什么的</span></span><br><span class="line">        <span class="string">&#x27;operator-linebreak&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;after&#x27;</span>,],<span class="comment">// 换行时运算符在行尾还是行首</span></span><br><span class="line">        <span class="string">&#x27;padded-blocks&#x27;</span>: <span class="number">0</span>,<span class="comment">// 块语句内行首行尾是否要空行</span></span><br><span class="line">        <span class="string">&#x27;prefer-const&#x27;</span>: <span class="number">0</span>,<span class="comment">// 首选const</span></span><br><span class="line">        <span class="string">&#x27;prefer-spread&#x27;</span>: <span class="number">0</span>,<span class="comment">// 首选展开运算</span></span><br><span class="line">        <span class="string">&#x27;prefer-reflect&#x27;</span>: <span class="number">0</span>,<span class="comment">// 首选Reflect的方法</span></span><br><span class="line">        <span class="string">&#x27;quotes&#x27;</span>: [<span class="number">1</span>, <span class="string">&#x27;single&#x27;</span>,],<span class="comment">// 引号类型 `` &quot;&quot; &#x27;&#x27;</span></span><br><span class="line">        <span class="string">&#x27;quote-props&#x27;</span>:[<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>,],<span class="comment">// 对象字面量中的属性名是否强制双引号</span></span><br><span class="line">        <span class="string">&#x27;radix&#x27;</span>: <span class="number">2</span>,<span class="comment">// parseInt必须指定第二个参数</span></span><br><span class="line">        <span class="string">&#x27;id-match&#x27;</span>: <span class="number">0</span>,<span class="comment">// 命名检测</span></span><br><span class="line">        <span class="string">&#x27;require-yield&#x27;</span>: <span class="number">0</span>,<span class="comment">// 生成器函数必须有yield</span></span><br><span class="line">        <span class="string">&#x27;semi&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>,],<span class="comment">// 语句强制分号结尾</span></span><br><span class="line">        <span class="string">&#x27;semi-spacing&#x27;</span>: [<span class="number">0</span>, &#123;<span class="string">&#x27;before&#x27;</span>: <span class="literal">false</span>, <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span>,&#125;,],<span class="comment">// 分号前后空格</span></span><br><span class="line">        <span class="string">&#x27;sort-vars&#x27;</span>: <span class="number">0</span>,<span class="comment">// 变量声明时排序</span></span><br><span class="line">        <span class="string">&#x27;space-after-keywords&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;always&#x27;</span>,],<span class="comment">// 关键字后面是否要空一格</span></span><br><span class="line">        <span class="string">&#x27;space-before-blocks&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;always&#x27;</span>,],<span class="comment">// 不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line">        <span class="string">&#x27;space-before-function-paren&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;always&#x27;</span>,],<span class="comment">// 函数定义时括号前面要不要有空格</span></span><br><span class="line">        <span class="string">&#x27;space-in-parens&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;never&#x27;</span>,],<span class="comment">// 小括号里面要不要有空格</span></span><br><span class="line">        <span class="string">&#x27;space-infix-ops&#x27;</span>: <span class="number">0</span>,<span class="comment">// 中缀操作符周围要不要有空格</span></span><br><span class="line">        <span class="string">&#x27;keyword-spacing&#x27;</span>: <span class="number">2</span>,<span class="comment">// return throw case后面要不要加空格</span></span><br><span class="line">        <span class="string">&#x27;space-unary-ops&#x27;</span>: [<span class="number">0</span>, &#123; <span class="string">&#x27;words&#x27;</span>: <span class="literal">true</span>, <span class="string">&#x27;nonwords&#x27;</span>: <span class="literal">false</span>, &#125;,],<span class="comment">// 一元运算符的前/后要不要加空格</span></span><br><span class="line">        <span class="string">&#x27;spaced-comment&#x27;</span>:  [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;always&#x27;</span>, &#123; <span class="string">&#x27;markers&#x27;</span>: [<span class="string">&#x27;/&#x27;</span>,], &#125;,],<span class="comment">// 注释风格要不要有空格什么的</span></span><br><span class="line">        <span class="string">&#x27;strict&#x27;</span>: <span class="number">2</span>,<span class="comment">// 使用严格模式</span></span><br><span class="line">        <span class="string">&#x27;use-isnan&#x27;</span>: <span class="number">2</span>,<span class="comment">// 禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line">        <span class="string">&#x27;valid-jsdoc&#x27;</span>: <span class="number">0</span>,<span class="comment">// jsdoc规则</span></span><br><span class="line">        <span class="string">&#x27;valid-typeof&#x27;</span>: <span class="number">2</span>,<span class="comment">// 必须使用合法的typeof的值</span></span><br><span class="line">        <span class="string">&#x27;vars-on-top&#x27;</span>: <span class="number">2</span>,<span class="comment">// var必须放在作用域顶部</span></span><br><span class="line">        <span class="string">&#x27;wrap-iife&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;inside&#x27;</span>,],<span class="comment">// 立即执行函数表达式的小括号风格</span></span><br><span class="line">        <span class="string">&#x27;wrap-regex&#x27;</span>: <span class="number">0</span>,<span class="comment">// 正则表达式字面量用小括号包起来</span></span><br><span class="line">        <span class="string">&#x27;yoda&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>,],<span class="comment">// 禁止尤达条件</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="vscode配置"><a href="#vscode配置" class="headerlink" title="vscode配置"></a>vscode配置</h3><h4 id="在vscode中安装eslint插件"><a href="#在vscode中安装eslint插件" class="headerlink" title="在vscode中安装eslint插件"></a>在vscode中安装eslint插件</h4><img src="/2022/01/05/vscode-eslint/WX20220105-131023@2x.png" class=""><p>然后打开vscode用户的setting.json（首选项-设置-随便找一个下方有<code>在 setting.json 中编辑</code>的按钮点开）<br>在下面添加<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;eslint.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;eslint.run&quot;</span>: <span class="string">&quot;onType&quot;</span>,</span><br><span class="line"><span class="string">&quot;eslint.options&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;overrideConfigFile&quot;</span>: <span class="string">&quot;/Users/luobin/vscode-eslint/.eslintrc.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;extensions&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.html&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">  <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">  <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">  <span class="string">&quot;html&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;eslint.alwaysShowStatus&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;eslint.format.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;eslint.probe&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">  <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">  <span class="string">&quot;typescriptreact&quot;</span>,</span><br><span class="line">  <span class="string">&quot;html&quot;</span>,</span><br><span class="line">  <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">  <span class="string">&quot;markdown&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;eslint.lintTask.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;eslint.onIgnoredFiles&quot;</span>: <span class="string">&quot;warn&quot;</span>,</span><br><span class="line"><span class="string">&quot;eslint.packageManager&quot;</span>: <span class="string">&quot;yarn&quot;</span>,</span><br></pre></td></tr></table></figure><br>这里主要的几个选项我做了注释，可以其余可根据需要添加或省略。（我这里使用的vscode版本和eslint版本可能和你的不一致，格式化或者保存项目文件的时候，输出中会提示哪个属性已经被废弃，哪个属性被替换成其他写法，根据提示修改既可以，前提是你开启了eslint.alwaysShowStatus）</p><h4 id="vscode中配置默认格式化"><a href="#vscode中配置默认格式化" class="headerlink" title="vscode中配置默认格式化"></a>vscode中配置默认格式化</h4><p>随便找一个文件，右击选择<code>使用...格式化</code>，最下面会出现一个<code>配置默认格式化程序</code>,选择<code>ESLint</code>即可。</p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>vscode的eslint插件不能脱离依赖使用，所以必须找一个安装有eslint及其需要的插件的项目来使用其中的依赖，这里我们新建了一个空项目，然后在vscode中将eslint插件的全局依赖和配置选择到我们建的空项目中，这样eslint插件就可以完美运行了。<br>此方法相当于给eslint插件一个全局的规则，如果项目中安装有eslint，并且有规则，还是会按照项目中的规则进行格式化和代码提示的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;eslint可以在模块化开发的项目中对代码进行提示和格式化，也可以配合vscode的eslint插件进行提示和格式化。&lt;br&gt;那在非模块化的项目中如何达到同样效果呢？比如只有一个index.html和index.js的普通网页中。&lt;br&gt;如图&lt;/p&gt;
&lt;p&gt;&lt;video s
      
    
    </summary>
    
      <category term="vscode" scheme="https://hakunamatata052.github.io/categories/vscode/"/>
    
    
      <category term="eslint" scheme="https://hakunamatata052.github.io/tags/eslint/"/>
    
      <category term="vscode" scheme="https://hakunamatata052.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>threeJs模型压缩、加载</title>
    <link href="https://hakunamatata052.github.io/2021/11/01/threejs-compress/"/>
    <id>https://hakunamatata052.github.io/2021/11/01/threejs-compress/</id>
    <published>2021-11-01T04:00:00.000Z</published>
    <updated>2022-01-05T07:51:52.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="压缩模型"><a href="#压缩模型" class="headerlink" title="压缩模型"></a>压缩模型</h1><h2 id="安装压缩器"><a href="#安装压缩器" class="headerlink" title="安装压缩器"></a>安装压缩器</h2><p>全局安装gltf-pipeline<br>git地址：<code>https://gitee.com/apis-cloud/gltf-pipeline.git</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g gltf-pipeline</span><br></pre></td></tr></table></figure></p><h3 id="转换格式"><a href="#转换格式" class="headerlink" title="转换格式"></a>转换格式</h3><p>如果是glb或fbx格式，首选需要转换格式glft，这个插件是自带格式转换的<br>在模型所在文件夹执行命令<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gltf-pipeline -i model.glb -j</span><br></pre></td></tr></table></figure></p><h3 id="执行压缩"><a href="#执行压缩" class="headerlink" title="执行压缩"></a>执行压缩</h3><p>再执行压缩操作（model.gltf是转换格式后的文件名，modelDraco.gltf是压缩后的文件名）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gltf-pipeline -i model.gltf -o modelDraco.gltf -d -s</span><br></pre></td></tr></table></figure><br>压缩后得到两个文件</p><ul><li>modelDraco.gltf</li><li>modelDraco.bin</li></ul><p>将两个文件放在DRACOLoader指定的文件夹即可</p><h1 id="导入模型"><a href="#导入模型" class="headerlink" title="导入模型"></a>导入模型</h1><p>最后使用DRACOLoader加载器加载压缩模型即可<br><a href="/images/draco.zip">点击下载</a>WASM/JS解码库文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loader = <span class="keyword">new</span> GLTFLoader() <span class="comment">//创建模型加载器对象</span></span><br><span class="line"><span class="keyword">var</span> dracoloader = <span class="keyword">new</span> DRACOLoader() <span class="comment">//draco加载器(压缩模型解码器) </span></span><br><span class="line">dracoloader.setDecoderPath( <span class="string">&#x27;stl/&#x27;</span> ) <span class="comment">//指定包含WASM / JS解码库的文件夹的路径。</span></span><br><span class="line">loader.setDRACOLoader( dracoloader ) </span><br><span class="line">loader.load(<span class="string">&quot;stl/modelDraco.gltf&quot;</span>, <span class="function"><span class="params">gltf</span> =&gt;</span> &#123;</span><br><span class="line">    gltf.scene.scale.set(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    gltf.scene.position.set(<span class="number">0</span>, -<span class="number">0.2</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">this</span>.scene.add(gltf.scene)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;压缩模型&quot;&gt;&lt;a href=&quot;#压缩模型&quot; class=&quot;headerlink&quot; title=&quot;压缩模型&quot;&gt;&lt;/a&gt;压缩模型&lt;/h1&gt;&lt;h2 id=&quot;安装压缩器&quot;&gt;&lt;a href=&quot;#安装压缩器&quot; class=&quot;headerlink&quot; title=&quot;安装压缩器&quot;&gt;
      
    
    </summary>
    
      <category term="JS" scheme="https://hakunamatata052.github.io/categories/JS/"/>
    
      <category term="three.js" scheme="https://hakunamatata052.github.io/categories/JS/three-js/"/>
    
    
      <category term="three.js" scheme="https://hakunamatata052.github.io/tags/three-js/"/>
    
      <category term="threejs" scheme="https://hakunamatata052.github.io/tags/threejs/"/>
    
      <category term="three" scheme="https://hakunamatata052.github.io/tags/three/"/>
    
  </entry>
  
  <entry>
    <title>封装微信小程序请求</title>
    <link href="https://hakunamatata052.github.io/2021/05/07/requset/"/>
    <id>https://hakunamatata052.github.io/2021/05/07/requset/</id>
    <published>2021-05-07T02:05:00.000Z</published>
    <updated>2022-04-21T06:41:12.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h1><p>首先看下小程序官方的登录流程图<br><img src="https://res.wx.qq.com/wxdoc/dist/assets/img/api-login.2fcc9f35.jpg" alt="登录流程图"><br>大致的登录流程是这样的：</p><ul><li>前端：小程序请求是先使用<code>wx.checkSession</code>验证小程序服务器登录态是否失效，如果失效，则使用<code>wx.login</code>进行登录，然后获取到code发送给业务服务器。<ul><li>后端：业务服务器拿到code后请求小程序服务器获取用户的openid等信息。</li><li>后端：业务服务器使用openid去匹配服务器中用户的数据，如果openid存在，说明用户已注册，如果不存在，则直接注册一个用户，并将openid保存在数据库以便下次验证。<ul><li>后端：如果用户已注册，后端直接执行登录操作，即返回用户的业务登录态（token），也可以加上需要的用户信息等。</li><li>前端：拿到业务端的登录态后，再次携带登录态访问业务端接口。</li><li>后端：验证用户登录态是否有效，有效则返回业务接口数据。</li><li>后端：无效则返回登录态失效信息。</li><li>前端：如果请求返回的是登录态失效，则再次使用<code>wx.login</code>拿到code请求业务端登录接口，获取业务的登录态。</li></ul></li></ul></li><li>前端：如果验证小程序登录态没有失效，则前端直接请求业务端接口（请求中携带业务端登录态，即业务的token）。<ul><li>后端：验证用户登录态是否有效，有效则返回业务接口数据。</li><li>后端：无效则返回登录态失效信息。</li><li>前端：如果请求返回的是登录态失效，则再次使用<code>wx.login</code>拿到code请求业务端登录接口，获取业务的登录态。<br>大致的前后端流程就是这样。</li></ul></li></ul><p>然后需要将上面的流程中的前端请求封装一下。<br>调用的时候直接使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http(route, data, config).then(res=&#123;&#125;).catch=(<span class="function"><span class="params">err</span>=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><br>config暂时没有写配置，可以自定义一下，如请求方式（get，post…），还有是否弹出错误提示和正确提示，是否显示加载等。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;RootObject&#125; <span class="keyword">from</span> <span class="string">&#x27;../model/rootObject&#x27;</span></span><br><span class="line">interface option &#123;</span><br><span class="line">  method?: <span class="string">&#x27;OPTIONS&#x27;</span> | <span class="string">&#x27;GET&#x27;</span> | <span class="string">&#x27;HEAD&#x27;</span> | <span class="string">&#x27;POST&#x27;</span> | <span class="string">&#x27;PUT&#x27;</span> | <span class="string">&#x27;DELETE&#x27;</span> | <span class="string">&#x27;TRACE&#x27;</span> | <span class="string">&#x27;CONNECT&#x27;</span> | <span class="literal">undefined</span></span><br><span class="line">  errAlert?: boolean | <span class="string">&#x27;toast&#x27;</span></span><br><span class="line">  resAlert?: boolean | <span class="string">&#x27;toast&#x27;</span></span><br><span class="line">  loading?: boolean</span><br><span class="line">  maxRefresh?:number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Http</span> </span>&#123;</span><br><span class="line">    <span class="attr">route</span>:string</span><br><span class="line">    <span class="attr">options</span>:option</span><br><span class="line">    <span class="attr">data</span>:unknown</span><br><span class="line">    <span class="attr">refresh</span>:number <span class="comment">// 当前熔断次数</span></span><br><span class="line">    <span class="attr">maxRefresh</span>:number <span class="comment">// 最大熔断次数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.route = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">this</span>.data = &#123;&#125;</span><br><span class="line">        <span class="built_in">this</span>.refresh = <span class="number">0</span></span><br><span class="line">        <span class="built_in">this</span>.options = &#123;</span><br><span class="line">            <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;errAlert&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;resAlert&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&#x27;loading&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;maxRefresh&#x27;</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.maxRefresh = &lt;number&gt; <span class="built_in">this</span>.options.maxRefresh</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> request(route:string, <span class="attr">data</span>:unknown = &#123;&#125;, options?:option):<span class="built_in">Promise</span>&lt;RootObject&lt;unknown&gt;&gt;&#123;</span><br><span class="line">        <span class="built_in">this</span>.route = route</span><br><span class="line">        <span class="built_in">this</span>.data = data</span><br><span class="line">        <span class="built_in">this</span>.options = &#123;</span><br><span class="line">            <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;errAlert&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;resAlert&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&#x27;loading&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;maxRefresh&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">            ...options</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.maxRefresh = &lt;number&gt; <span class="built_in">this</span>.options.maxRefresh</span><br><span class="line">        <span class="built_in">this</span>.showLoading()</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">await</span> <span class="built_in">this</span>.checkSession()) &#123;</span><br><span class="line">            <span class="keyword">const</span> loginStatus = <span class="keyword">await</span> <span class="built_in">this</span>.login()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!loginStatus)&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.refresh &gt;= <span class="built_in">this</span>.maxRefresh)&#123;</span><br><span class="line">                    <span class="built_in">this</span>.hideLoading()</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;登录态获取失败&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">await</span> <span class="built_in">this</span>.sleep(<span class="number">500</span>)</span><br><span class="line">                <span class="built_in">this</span>.refresh++</span><br><span class="line">                <span class="keyword">await</span> <span class="built_in">this</span>.request(<span class="built_in">this</span>.route, <span class="built_in">this</span>.data, <span class="built_in">this</span>.options)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.HttpClient()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (res?.code === <span class="number">500</span>) &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="built_in">this</span>.login()</span><br><span class="line">            res = <span class="keyword">await</span> <span class="built_in">this</span>.HttpClient()</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.hideLoading()</span><br><span class="line">        <span class="keyword">if</span> (res?.code === <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.successToast(<span class="string">&#x27;resAlert&#x27;</span>, res.msg)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.successToast(<span class="string">&#x27;errAlert&#x27;</span>, res.msg || <span class="string">&#x27;服务器故障&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> HttpClient():<span class="built_in">Promise</span>&lt;RootObject&lt;unknown&gt;&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">            wx.request(&#123;</span><br><span class="line">                <span class="string">&#x27;url&#x27;</span>: config.api + <span class="built_in">this</span>.route,</span><br><span class="line">                <span class="string">&#x27;data&#x27;</span>: &#123;</span><br><span class="line">                    ...&lt;object&gt; <span class="built_in">this</span>.data</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&#x27;method&#x27;</span>: <span class="built_in">this</span>.options &amp;&amp; <span class="built_in">this</span>.options.method || <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;header&#x27;</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;token&#x27;</span>: wx.getStorageSync(<span class="string">&#x27;token&#x27;</span>) || <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&#x27;success&#x27;</span>: <span class="function">(<span class="params">res</span>)=&gt;</span> &#123;</span><br><span class="line">                    resolve(&lt;RootObject&lt;any&gt;&gt;res.data)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&#x27;fail&#x27;</span>: <span class="function">(<span class="params">err</span>)=&gt;</span> &#123;</span><br><span class="line">                    reject(err)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检测登录态  返回true不需要重新登录 返回false需要重新登录</span></span><br><span class="line">    checkSession():<span class="built_in">Promise</span>&lt;boolean&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            wx.checkSession(&#123;</span><br><span class="line">                <span class="string">&#x27;success&#x27;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> token = wx.getStorageSync(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">                        resolve(<span class="literal">false</span>)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        resolve(<span class="literal">true</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&#x27;fail&#x27;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    resolve(<span class="literal">true</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="keyword">async</span> login():<span class="built_in">Promise</span>&lt;boolean&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            wx.login(&#123;</span><br><span class="line">                <span class="string">&#x27;success&#x27;</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    wx.request(&#123;</span><br><span class="line">                        <span class="string">&#x27;url&#x27;</span>: config.api + <span class="string">&#x27;wxlogin&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;data&#x27;</span>: &#123;</span><br><span class="line">                            <span class="string">&#x27;code&#x27;</span>: res.code</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;header&#x27;</span>: &#123;</span><br><span class="line">                            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&#x27;success&#x27;</span>: <span class="function">(<span class="params">loginRes</span>)=&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loginRes.statusCode === <span class="number">200</span>)&#123;</span><br><span class="line">                                resolve(<span class="literal">true</span>)</span><br><span class="line">                                wx.setStorageSync(<span class="string">&#x27;token&#x27;</span>, (loginRes.data <span class="keyword">as</span> RootObject&lt;any&gt;).data.token)</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                resolve(<span class="literal">false</span>)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&#x27;fail&#x27;</span>: <span class="function">()=&gt;</span> &#123;</span><br><span class="line">                            resolve(<span class="literal">false</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(time:number):<span class="built_in">Promise</span>&lt;<span class="keyword">void</span>&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;, time)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">showLoading</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.options.loading)&#123;</span><br><span class="line">            wx.showLoading(&#123;</span><br><span class="line">                <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">hideLoading</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.options.loading)&#123;</span><br><span class="line">            wx.hideLoading()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">successToast</span>(<span class="params">type:<span class="string">&#x27;resAlert&#x27;</span>|<span class="string">&#x27;errAlert&#x27;</span>, content:string, title = <span class="string">&#x27;提示&#x27;</span>, confirm?:<span class="built_in">Function</span>, cancel?:<span class="built_in">Function</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span>.options[type] === <span class="string">&#x27;boolean&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.options[type])&#123;</span><br><span class="line">                wx.showModal(&#123;</span><br><span class="line">                    <span class="string">&#x27;title&#x27;</span>: title,</span><br><span class="line">                    <span class="string">&#x27;content&#x27;</span>: content,</span><br><span class="line">                    <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">                            confirm &amp;&amp; confirm()</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.cancel) &#123;</span><br><span class="line">                            cancel &amp;&amp; cancel()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.options[type] === <span class="string">&#x27;toast&#x27;</span>)&#123;</span><br><span class="line">            wx.showToast(&#123;</span><br><span class="line">                <span class="string">&#x27;title&#x27;</span>: content,</span><br><span class="line">                <span class="string">&#x27;icon&#x27;</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;duration&#x27;</span>: <span class="number">2000</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Http()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;登录流程&quot;&gt;&lt;a href=&quot;#登录流程&quot; class=&quot;headerlink&quot; title=&quot;登录流程&quot;&gt;&lt;/a&gt;登录流程&lt;/h1&gt;&lt;p&gt;首先看下小程序官方的登录流程图&lt;br&gt;&lt;img src=&quot;https://res.wx.qq.com/wxdoc/dist/
      
    
    </summary>
    
      <category term="JS" scheme="https://hakunamatata052.github.io/categories/JS/"/>
    
      <category term="小程序" scheme="https://hakunamatata052.github.io/categories/JS/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="https://hakunamatata052.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="请求封装" scheme="https://hakunamatata052.github.io/tags/%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>ACT常用开发套路</title>
    <link href="https://hakunamatata052.github.io/2021/04/16/ulink/"/>
    <id>https://hakunamatata052.github.io/2021/04/16/ulink/</id>
    <published>2021-04-16T06:13:00.000Z</published>
    <updated>2021-04-16T07:16:57.669Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6f5d750ca378f0b8b8e86e3e55f3c0fb478f61d1d44dee6aeb20e9f30a2ddd35"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      请输入密码.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小程序和H5中input在光标位置中插入</title>
    <link href="https://hakunamatata052.github.io/2021/04/16/cursor-position-insert/"/>
    <id>https://hakunamatata052.github.io/2021/04/16/cursor-position-insert/</id>
    <published>2021-04-16T02:25:36.000Z</published>
    <updated>2022-04-21T06:40:51.223Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个需要是聊天添加表情功能，本来很简单，点就表情追加到input内容里即可。<br>但是表情只能追加到字符串最后面，这就很恼火。<br>有没有办法在光标制定位置插入呢？当然有，只不过小程序做法和H5略有区别，这里两种都介绍一下。</p><p><img src="/images/IMG_6928.PNG" alt="安装成功"></p><h1 id="首先是H5"><a href="#首先是H5" class="headerlink" title="首先是H5"></a>首先是H5</h1><p>这里我直接抛出代码，原理也很简单，主要利用的是input和textarea中的setSelectionRange属性获取光标位置。这里不做过多解释，主要看下小程序<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">setCaret</span>(<span class="params">textObj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (textObj.createTextRange) &#123;</span></span><br><span class="line"><span class="javascript">                textObj.caretPos = <span class="built_in">document</span>.selection.createRange().duplicate();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">insertAtCaret</span>(<span class="params">textObj, textFeildValue</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (textObj.createTextRange &amp;&amp; textObj.caretPos) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> caretPos = textObj.caretPos;</span></span><br><span class="line"><span class="javascript">                    caretPos.text = caretPos.text.charAt(caretPos.text.length - <span class="number">1</span>) == <span class="string">&#x27;   &#x27;</span> ? textFeildValue + <span class="string">&#x27;   &#x27;</span> : textFeildValue;</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    textObj.value = textFeildValue;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (textObj.setSelectionRange) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> rangeStart = textObj.selectionStart;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> rangeEnd = textObj.selectionEnd;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> tempStr1 = textObj.value.substring(<span class="number">0</span>, rangeStart);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> tempStr2 = textObj.value.substring(rangeEnd);</span></span><br><span class="line"><span class="javascript">                    textObj.value = tempStr1 + textFeildValue + tempStr2;</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;This   version   of   Mozilla   based   browser   does   not   support   setSelectionRange&quot;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;text/plain&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tarea&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:300px;height:120px;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">onselect</span>=<span class="string">&quot;setCaret(this);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;setCaret(this);&quot;</span> <span class="attr">onkeyup</span>=<span class="string">&quot;setCaret(this);&quot;</span>&gt;</span>例子例子例子例子例子<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;textfield&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:220px;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;插入FireFox&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;插入&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;insertAtCaret(this.form.tarea,this.form.textfield.value);&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">contenteditable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:1px solid #ccc; width:300px; height:200px;&quot;</span>&gt;</span>sljfldjfldf<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h1><p>小程序需要在textarea或input中绑定失焦事件<code>bindblur=&quot;onBlur&quot;</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">auto-focus</span>=<span class="string">&quot;true&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入文章内容&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;content&#125;&#125;&quot;</span> <span class="attr">bindinput</span>=<span class="string">&quot;onInput&quot;</span> <span class="attr">bindblur</span>=<span class="string">&quot;onBlur&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><br>然后在失焦事件获取失焦时光标的位置，即光标在文本域中的下标<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">onBlur</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">    <span class="attr">cursor</span>: e.detail.cursor</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>然后在插入表情的实践中将表情插入文本域字符串中（也就是表情的点击事件中）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">inputGif</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> index = e.currentTarget.dataset.index</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      <span class="attr">content</span>: <span class="built_in">this</span>.data.content.slice(<span class="number">0</span>, <span class="built_in">this</span>.data.cursor) + <span class="built_in">this</span>.data.gif[index].code + <span class="built_in">this</span>.data.content.slice(<span class="built_in">this</span>.data.cursor)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>这里我使用了<code>setTimeout</code>延时了100ms执行，原因是如果执行，失焦实践是在点击事件之后触发的，就会出现插入的位置是上一次失焦时的位置，所以需要插入时延迟100ms先让文本域失焦并设置好光标位置，再执行插入。<br>至此小程序的光标制定位置插入内容就完成了，有木有很简单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近遇到一个需要是聊天添加表情功能，本来很简单，点就表情追加到input内容里即可。&lt;br&gt;但是表情只能追加到字符串最后面，这就很恼火。&lt;br&gt;有没有办法在光标制定位置插入呢？当然有，只不过小程序做法和H5略有区别，这里两种都介绍一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/
      
    
    </summary>
    
      <category term="JS" scheme="https://hakunamatata052.github.io/categories/JS/"/>
    
      <category term="小程序" scheme="https://hakunamatata052.github.io/categories/JS/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="setSelectionRange" scheme="https://hakunamatata052.github.io/tags/setSelectionRange/"/>
    
      <category term="光标位置插入" scheme="https://hakunamatata052.github.io/tags/%E5%85%89%E6%A0%87%E4%BD%8D%E7%BD%AE%E6%8F%92%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>使用uniapp打包H5时使用微信SDK</title>
    <link href="https://hakunamatata052.github.io/2021/03/13/uniapp-wxSDK/"/>
    <id>https://hakunamatata052.github.io/2021/03/13/uniapp-wxSDK/</id>
    <published>2021-03-13T02:25:36.000Z</published>
    <updated>2022-01-05T07:51:18.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>原本的一个需求是开发微信小程序，但是因为产品变更需求，需要重新改为H5，为了重构页面和前端逻辑不做太大改动，所以决定先把小程序改为uniapp，在用uniapp打包为H5<br>因为uniapp里的方法和小程序类似，所以代码复用率高。<br>有了思路之后就开始着手进行。</p><h2 id="第一步：将微信小程序转为uniapp"><a href="#第一步：将微信小程序转为uniapp" class="headerlink" title="第一步：将微信小程序转为uniapp"></a>第一步：将微信小程序转为uniapp</h2><p>这里使用的是官方出的一款插件<code>miniprogram-to-uniapp</code></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用命令行进行全局安装</p><p>windows:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install miniprogram-to-uniapp -g</span><br></pre></td></tr></table></figure><br>mac &amp; Linux:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install miniprogram-to-uniapp -g</span><br></pre></td></tr></table></figure></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>使用命令<code>wtu -V</code>验证是否安装成功，返回版本号说明安装成功</p><p><img src="/images/WX20210312-111605@2x.png" alt="安装成功"></p><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p>使用命令<code>wtu -i 小程序根目录路径</code>进行转换<br>小程序根目录路径可以是绝对路径，也可以是命令行打开的相对路径<br><img src="/images/WX20210312-112000@2x.png" alt="转换成功"><br>转换成功后在小程序目录同级目录下会生成一个<code>文件名_uni</code>的文件夹</p><p>这里存放的就是转换后的uniapp，你可以是用Hbuilder打开，或者使用官方脚手架然后用vscode打开，笔者使用的后者。</p><h2 id="第二步引入微信SDK"><a href="#第二步引入微信SDK" class="headerlink" title="第二步引入微信SDK"></a>第二步引入微信SDK</h2><p>由于我们小程序内获取的登录态是小程序的，如果改成微信内登录的H5，需要将登录态转换为微信H5的登录态。<br>这里就需要用到微信的SDK。<br>由于笔者使用的uniapp脚手架，所以需要修改<code>public</code>目录下的<code>index.html</code>文件，即H5的模版文件。（Hbuilder打开的话需要在配置文件中配置模版文件）</p><h3 id="引入微信SDK"><a href="#引入微信SDK" class="headerlink" title="引入微信SDK"></a>引入微信SDK</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://res.wx.qq.com/open/js/jweixin-1.2.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在你需要调用的组建里配置微信SDK<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">    <span class="attr">appId</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 必填，企业号的唯一标识，此处填写企业号corpid</span></span><br><span class="line">    <span class="attr">timestamp</span>: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">    nonceStr: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">    <span class="attr">signature</span>: <span class="string">&#x27;&#x27;</span>,<span class="comment">// 必填，签名，见附录1</span></span><br><span class="line">    <span class="attr">jsApiList</span>: [] <span class="comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>这个时候问题就来了！<br>执行会发现<code>wx</code>对象中没有<code>config</code>方法,但是wx对象是存在的？</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>原来是因为uniapp中已经向window中声明了一个wx变量，这个wx变量是小程序的wx对象而不是微信SDK的。<br>因为uniapp在打包时将<code>app.js</code>打包在了<code>&lt;/body&gt;</code>之前，所以我们引入的微信SDK的变量被uniapp的覆盖了。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>找到原因就好办了，直接将SDK在<code>&lt;/body&gt;</code>之后<code>&lt;/html&gt;</code>之前引入。</p><p>再跑一下，完美解决！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里找问题原因花了很长时间，因为引入js方式，登录态检测这些我都简化叙述了，还用到了各种抓包，本地代理线上文件。但是思路就是遇到问题可以想想多种解决方案，多打断点，多console。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;原本的一个需求是开发微信小程序，但是因为产品变更需求，需要重新改为H5，为了重构页面和前端逻辑不做太大改动，所以决定先把小程序改为uniap
      
    
    </summary>
    
      <category term="JS" scheme="https://hakunamatata052.github.io/categories/JS/"/>
    
      <category term="uniapp" scheme="https://hakunamatata052.github.io/categories/JS/uniapp/"/>
    
    
      <category term="uniapp" scheme="https://hakunamatata052.github.io/tags/uniapp/"/>
    
      <category term="微信SDK" scheme="https://hakunamatata052.github.io/tags/%E5%BE%AE%E4%BF%A1SDK/"/>
    
  </entry>
  
  <entry>
    <title>html转jsx</title>
    <link href="https://hakunamatata052.github.io/2020/08/31/html2jsx/"/>
    <id>https://hakunamatata052.github.io/2020/08/31/html2jsx/</id>
    <published>2020-08-31T02:18:00.000Z</published>
    <updated>2022-01-05T07:51:18.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h1><p>之前做的一个阿里需求，是将原有的HTML的静态页面重构成前后分离的项目，要求是用dva-cli脚手架来开发<br>那么就牵扯到一个问题就是这么多的HTML页面肯定不能手动转成jsx语法啊。<br>毕竟差别还是有很多的，尤其是写div的类名<br>我们知道，在普通HTML中是这样写div和类名的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是在jsx语法中尤其是同一div上应用了多个类名，jsx写起来会很让热挠头<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123;[styles.demo,styles.div1].join(<span class="string">&#x27; &#x27;</span>)&#125;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>于是乎就做了一个小工具，可以将html转换为jsx语法，这里需要注意一下styles是我引入的less后赋值的变量名<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;../assets/css/index.css&#x27;</span></span><br></pre></td></tr></table></figure></p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>左边输入html点击转换会自动生成在右边的文本域中</p><iframe src="/2020/08/31/html2jsx/html2jsx.html" width="600" height="300" frameborder="no" border="0" marginwidth="0" marginheight="0" allowtransparency="yes"></iframe><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>这个小Demo的原理非常简单，就是通过正则匹配到所有<code>class=“”</code>里的内容，然后通过<code>replace</code>方法替换<br>值得注意的是<code>replace</code>方法的第二个参数可以传一个固定的字符串，也可以传一个函数，函数的返回值作为替换的内容<br>这里我们不能把类名替换成固定的值，而是需要将类名做处理，所有在<code>replace</code>第二个参数中传入一个函数，函数的参数，就是匹配到的内容<br>获得内容就很好办了，先把类名用空格拆分成数组，然后写个jsx中的格式即可</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;text&#x27;</span>).value            </span><br><span class="line">    con = con.replace(<span class="regexp">/class=&quot;.*?&quot;/ig</span>, <span class="function"><span class="params">value</span> =&gt;</span>&#123;</span><br><span class="line">        value = value.replace(<span class="string">&#x27;class=&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        value = value.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(value)</span><br><span class="line">        <span class="keyword">if</span>(value.length&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            value = value.map(<span class="function"><span class="params">item</span>=&gt;</span><span class="string">`styles.<span class="subst">$&#123;item&#125;</span>`</span>)</span><br><span class="line">            value = <span class="string">`[<span class="subst">$&#123;value.join(<span class="string">&#x27;,&#x27;</span>)&#125;</span>].join(&#x27; &#x27;)`</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            value = <span class="string">`styles.<span class="subst">$&#123;value&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`className=&#123;<span class="subst">$&#123;value&#125;</span>&#125;`</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;text2&#x27;</span>).value = con</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;初衷&quot;&gt;&lt;a href=&quot;#初衷&quot; class=&quot;headerlink&quot; title=&quot;初衷&quot;&gt;&lt;/a&gt;初衷&lt;/h1&gt;&lt;p&gt;之前做的一个阿里需求，是将原有的HTML的静态页面重构成前后分离的项目，要求是用dva-cli脚手架来开发&lt;br&gt;那么就牵扯到一个问题就是这
      
    
    </summary>
    
      <category term="JS" scheme="https://hakunamatata052.github.io/categories/JS/"/>
    
      <category term="react" scheme="https://hakunamatata052.github.io/categories/JS/react/"/>
    
    
      <category term="react jsx" scheme="https://hakunamatata052.github.io/tags/react-jsx/"/>
    
  </entry>
  
  <entry>
    <title>Three.js设置DIV跟随场景的两种方法</title>
    <link href="https://hakunamatata052.github.io/2020/08/26/three-sprite-css2d/"/>
    <id>https://hakunamatata052.github.io/2020/08/26/three-sprite-css2d/</id>
    <published>2020-08-26T07:39:00.000Z</published>
    <updated>2022-01-05T07:51:52.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法一：使用Sprite对象"><a href="#方法一：使用Sprite对象" class="headerlink" title="方法一：使用Sprite对象"></a>方法一：使用Sprite对象</h1><p>首先实例化一个SpriteMaterial，设置好材质或颜色，可以是透明的<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> spriteMap = <span class="keyword">new</span> TextureLoader().load(<span class="string">&quot;./static/img/img.png&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> pinMaterial = <span class="keyword">new</span> SpriteMaterial(&#123;</span><br><span class="line">    <span class="attr">map</span>: spriteMap</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>然后创建一个div或者绑定html上现有的div元素,设置好默认的位置属性，可以用css来设置默认样式<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">Div.className = <span class="string">&#x27;text&#x27;</span></span><br><span class="line">Div.id = <span class="string">&quot;text&quot;</span></span><br><span class="line">Div.style.left = <span class="number">0</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">Div.style.top = <span class="number">0</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(Div)</span><br></pre></td></tr></table></figure><br>然后声明一个坐标点并初始化，之后用来保存每次改变后的坐标点</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> circleData: Vector3</span><br><span class="line">...</span><br><span class="line"><span class="built_in">this</span>.circleData = <span class="keyword">new</span> Vector3(-<span class="number">0.2</span>, <span class="number">2.3</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>接着创建一个创建一个Sprite对象（这里我使用的是webpack引用依赖的方式，因此不需要THREE.Sprite）,并设置坐标点是初始化的坐标点<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pin: Sprite = <span class="keyword">new</span> Sprite(pinMaterial);</span><br><span class="line">pin.position.set(</span><br><span class="line">    <span class="built_in">this</span>.circleData.x,</span><br><span class="line">    <span class="built_in">this</span>.circleData.y,</span><br><span class="line">    <span class="built_in">this</span>.circleData.z</span><br><span class="line">);</span><br><span class="line">pin.scale.set(<span class="number">0.3</span>, <span class="number">0.3</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><br>然后写一个方法用来更新坐标点并设置div的坐标，其原理是每次render时使用Vector3中的project方法将Sprite对象中的世界坐标点转换为屏幕坐标点，并且改变div的css位置信息<br>project接受一个参数是相机实例<br>最后通过一个固定公式转换成屏幕坐标点<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> textShow(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> worldVector = <span class="keyword">new</span> Vector3(</span><br><span class="line">        <span class="built_in">this</span>.circleData.x,</span><br><span class="line">        <span class="built_in">this</span>.circleData.y,</span><br><span class="line">        <span class="built_in">this</span>.circleData.z</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">let</span> standardVector = worldVector.project(<span class="built_in">this</span>.camera);</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">this</span>.$window.clientWidth / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">this</span>.$window.clientHeight / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">Math</span>.round(standardVector.x * a + a);</span><br><span class="line">    <span class="keyword">let</span> y = <span class="built_in">Math</span>.round(-standardVector.y * b + b);</span><br><span class="line">    <span class="keyword">let</span> Div: HTMLElement = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    Div.style.left = x + <span class="number">30</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    Div.style.top = y + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后在render方法中调用textShow方法即可<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> render(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(<span class="function">() =&gt;</span> <span class="built_in">this</span>.render());</span><br><span class="line">    <span class="built_in">this</span>.textShow();</span><br><span class="line">    <span class="built_in">this</span>.renderer.render(<span class="built_in">this</span>.scene, <span class="built_in">this</span>.camera); <span class="comment">// 必须放在这个位置</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="方法二：使用CSS2DObject和CSS2DRenderer渲染器"><a href="#方法二：使用CSS2DObject和CSS2DRenderer渲染器" class="headerlink" title="方法二：使用CSS2DObject和CSS2DRenderer渲染器"></a>方法二：使用CSS2DObject和CSS2DRenderer渲染器</h1><p>这个方法的原理是将dom元素通过CSS2DObject方法转换为three对象，然后利用CSS2DRenderer渲染器将其渲染在页面上<br>首先引入CSS2DObject和CSS2DRenderer<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CSS2DObject, CSS2DRenderer &#125; <span class="keyword">from</span> <span class="string">&quot;three/examples/jsm/renderers/CSS2DRenderer&quot;</span>;</span><br></pre></td></tr></table></figure><br>接着声明一个CSS2DRenderer<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> labelRenderer: CSS2DRenderer</span><br></pre></td></tr></table></figure><br>新建一个div设置一些类名或者样式，然后将div传入CSS2DObject对象的实例中<br>将实例add进场景，再声明一个CSS2DRenderer，通过setSize方法设置渲染器的大小<br>通过labelRenderer.domElement来设置被转换成three对象之后的dom元素的样式<br>最后将labelRenderer.domElement对象appendChild到你想要的元素中<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Div: HTMLElement = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">Div.id = <span class="string">&#x27;trace&#x27;</span></span><br><span class="line">Div.className = <span class="string">&#x27;text&#x27;</span></span><br><span class="line">Div.textContent = <span class="string">&quot;CSS2D方法&quot;</span></span><br><span class="line"><span class="keyword">var</span> moonLabel = <span class="keyword">new</span> CSS2DObject(Div);</span><br><span class="line">moonLabel.position.set(<span class="number">0</span>, -<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">this</span>.scene.add(moonLabel);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.labelRenderer = <span class="keyword">new</span> CSS2DRenderer();</span><br><span class="line"><span class="built_in">this</span>.labelRenderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line"><span class="built_in">this</span>.labelRenderer.domElement.style.position = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line"><span class="built_in">this</span>.labelRenderer.domElement.style.top = <span class="number">0</span> + <span class="string">&#x27;px&#x27;</span>;        </span><br><span class="line"><span class="built_in">document</span>.body.appendChild(<span class="built_in">this</span>.labelRenderer.domElement)</span><br></pre></td></tr></table></figure><br>最后直接再render方法中执行labelRenderer的render，传入场景和相机<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.labelRenderer.render(<span class="built_in">this</span>.scene, <span class="built_in">this</span>.camera);</span><br></pre></td></tr></table></figure><br>这里有个问题，如果场景有<code>OrbitControls</code>控制器，那么将会失效，因为CSS2DRenderer会先生成有个和渲染大小一样的div（就是setSize方法设置的大小）<br>如果能正常显示出div那么它的<code>z-index</code>是高于WebGLRenderer渲染出的canvas的层级，这样<code>OrbitControls</code>控制器就会失效<br>解决方法也很简单粗暴：给这个生成出来的div给一个<code>pointer-events: none;</code>样式即可</p><p>相比之下，我觉得方案二还是更简单一点，但是如果需要设置多个或不确定数量的div，那么可以使用第一个，使用for循环来处理</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/less/index.less&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; OrbitControls &#125; <span class="keyword">from</span> <span class="string">&#x27;three/examples/jsm/controls/OrbitControls&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Scene, PerspectiveCamera, WebGLRenderer, AmbientLight, DirectionalLight, AnimationMixer, AnimationAction, BoxGeometry, MeshBasicMaterial, Mesh, DoubleSide, Clock, Raycaster, Vector2, Vector3, Group, TextureLoader, Sprite, SpriteMaterial, LoopOnce &#125; <span class="keyword">from</span> <span class="string">&quot;three&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; GLTFLoader, GLTF &#125; <span class="keyword">from</span> <span class="string">&quot;three/examples/jsm/loaders/GLTFLoader&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CSS2DObject, CSS2DRenderer &#125; <span class="keyword">from</span> <span class="string">&quot;three/examples/jsm/renderers/CSS2DRenderer&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Three</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> scene: Scene</span><br><span class="line">    <span class="keyword">private</span> camera: PerspectiveCamera</span><br><span class="line">    <span class="keyword">private</span> renderer: WebGLRenderer</span><br><span class="line">    <span class="keyword">private</span> controls: OrbitControls</span><br><span class="line">    <span class="keyword">private</span> mixer: AnimationMixer</span><br><span class="line">    <span class="keyword">private</span> clock: Clock</span><br><span class="line">    <span class="keyword">private</span> mainGroup: Group</span><br><span class="line">    <span class="keyword">private</span> circleGroup: Group</span><br><span class="line">    <span class="keyword">private</span> $window: HTMLElement</span><br><span class="line">    <span class="keyword">private</span> fov: <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">private</span> originalCamera: Vector3</span><br><span class="line">    <span class="keyword">private</span> circleData: Vector3</span><br><span class="line">    <span class="keyword">private</span> gltf: GLTF</span><br><span class="line">    <span class="keyword">private</span> anindex: <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">private</span> animation: AnimationAction</span><br><span class="line">    <span class="keyword">private</span> isAnimate: <span class="built_in">boolean</span></span><br><span class="line">    <span class="keyword">private</span> labelRenderer: CSS2DRenderer</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fov = <span class="number">26</span></span><br><span class="line">        <span class="built_in">this</span>.originalCamera = <span class="keyword">new</span> Vector3(-<span class="number">2.3363492363063805</span>, <span class="number">5.3542278380602655</span>, <span class="number">13.216669448945213</span>)</span><br><span class="line">        <span class="built_in">this</span>.$window = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.clock = <span class="keyword">new</span> Clock()</span><br><span class="line">        <span class="built_in">this</span>.circleData = <span class="keyword">new</span> Vector3(-<span class="number">0.2</span>, <span class="number">2.3</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">this</span>.anindex = <span class="number">0</span></span><br><span class="line">        <span class="built_in">this</span>.isAnimate = <span class="literal">false</span></span><br><span class="line">        <span class="built_in">this</span>.initScene();</span><br><span class="line">        <span class="built_in">this</span>.initThree();</span><br><span class="line">        <span class="built_in">this</span>.initCamera();</span><br><span class="line">        <span class="built_in">this</span>.initControls()</span><br><span class="line">        <span class="built_in">this</span>.initLight();</span><br><span class="line">        <span class="built_in">this</span>.initPulseCircle()</span><br><span class="line">        <span class="built_in">this</span>.initTrace()</span><br><span class="line">        <span class="built_in">this</span>.render()</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> <span class="built_in">this</span>.onWindowResize());</span><br><span class="line">        <span class="built_in">this</span>.renderer.domElement.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="params">event</span> =&gt;</span> <span class="built_in">this</span>.modelTrigger(event));</span><br><span class="line">        <span class="built_in">this</span>.renderer.domElement.addEventListener(<span class="string">&quot;touchstart&quot;</span>, <span class="function"><span class="params">event</span> =&gt;</span> <span class="built_in">this</span>.modelTrigger(event));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> loader = <span class="keyword">new</span> GLTFLoader(); <span class="comment">//创建模型加载器对象</span></span><br><span class="line">        <span class="comment">// let dracoloader = new DRACOLoader();//draco加载器</span></span><br><span class="line">        <span class="keyword">const</span> textureLoader = <span class="keyword">new</span> TextureLoader();</span><br><span class="line">        <span class="keyword">const</span> skyboxGeometry = <span class="keyword">new</span> BoxGeometry(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="keyword">const</span> skyboxMaterials = [</span><br><span class="line">            <span class="keyword">new</span> MeshBasicMaterial(&#123; <span class="attr">map</span>: textureLoader.load(<span class="string">&#x27;./static/textures/rt.png&#x27;</span>), <span class="attr">side</span>: DoubleSide &#125;),</span><br><span class="line">            <span class="keyword">new</span> MeshBasicMaterial(&#123; <span class="attr">map</span>: textureLoader.load(<span class="string">&#x27;./static/textures/lf.png&#x27;</span>), <span class="attr">side</span>: DoubleSide &#125;),</span><br><span class="line">            <span class="keyword">new</span> MeshBasicMaterial(&#123; <span class="attr">map</span>: textureLoader.load(<span class="string">&#x27;./static/textures/up.png&#x27;</span>), <span class="attr">side</span>: DoubleSide &#125;),</span><br><span class="line">            <span class="keyword">new</span> MeshBasicMaterial(&#123; <span class="attr">map</span>: textureLoader.load(<span class="string">&#x27;./static/textures/dn.png&#x27;</span>), <span class="attr">side</span>: DoubleSide &#125;),</span><br><span class="line">            <span class="keyword">new</span> MeshBasicMaterial(&#123; <span class="attr">map</span>: textureLoader.load(<span class="string">&#x27;./static/textures/bk.png&#x27;</span>), <span class="attr">side</span>: DoubleSide &#125;),</span><br><span class="line">            <span class="keyword">new</span> MeshBasicMaterial(&#123; <span class="attr">map</span>: textureLoader.load(<span class="string">&#x27;./static/textures/ft.png&#x27;</span>), <span class="attr">side</span>: DoubleSide &#125;),</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">const</span> skyboxMesh = <span class="keyword">new</span> Mesh(skyboxGeometry, skyboxMaterials);</span><br><span class="line">        skyboxMesh.name = <span class="string">&#x27;skyboxMesh&#x27;</span>;</span><br><span class="line">        skyboxMesh.position.y = <span class="number">97.45</span></span><br><span class="line">        <span class="built_in">this</span>.scene.add(skyboxMesh);</span><br><span class="line"></span><br><span class="line">        loader.load(<span class="string">&#x27;./static/models/glb/RobotExpressive.glb&#x27;</span>, <span class="function"><span class="params">object</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">object</span>)</span><br><span class="line">            <span class="built_in">this</span>.gltf = <span class="built_in">object</span></span><br><span class="line">            <span class="built_in">this</span>.gltf.scene.position.set(<span class="number">0</span>, -<span class="number">2.5</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">this</span>.scene.add(<span class="built_in">this</span>.gltf.scene);</span><br><span class="line">            <span class="built_in">this</span>.mixer = <span class="keyword">new</span> AnimationMixer(<span class="built_in">this</span>.gltf.scene);</span><br><span class="line">            <span class="built_in">this</span>.selectAnim(<span class="number">5</span>, <span class="string">&#x27;点我的身体会有惊喜!&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;submit&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.send()</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;input&quot;</span>).addEventListener(<span class="string">&quot;keyup&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">            <span class="keyword">if</span> (event.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;submit&quot;</span>).click();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> send(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value: <span class="built_in">string</span> = (&lt;HTMLInputElement&gt;<span class="built_in">document</span>.getElementById(<span class="string">&#x27;input&#x27;</span>)).value;</span><br><span class="line">        (&lt;HTMLInputElement&gt;<span class="built_in">document</span>.getElementById(<span class="string">&#x27;input&#x27;</span>)).value = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/跳舞/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/死/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/闲/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">2</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/开心|哈哈|ha/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">3</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/生气/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">4</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/牛|666/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">5</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/你好|hey|hello/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">6</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/是|不/</span>.test(value)) &#123;</span><br><span class="line">            index = <span class="number">7</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">9</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">this</span>.selectAnim(<span class="number">0</span>, <span class="string">&#x27;啦~~啦~~~啦~~~&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">this</span>.selectAnim(<span class="number">1</span>, <span class="string">&#x27;狗带！&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">this</span>.selectAnim(<span class="number">2</span>, <span class="string">&#x27;无所事事。。。&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">this</span>.selectAnim(<span class="number">3</span>, <span class="string">&#x27;开心&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">this</span>.selectAnim(<span class="number">5</span>, <span class="string">&#x27;好气哦！&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="built_in">this</span>.selectAnim(<span class="number">9</span>, <span class="string">&#x27;你牛逼！&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">this</span>.selectAnim(<span class="number">12</span>, <span class="string">&#x27;你好！&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="built_in">this</span>.selectAnim(<span class="number">13</span>, <span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="built_in">this</span>.selectAnim(<span class="number">4</span>, <span class="string">&#x27;你说什么我听不懂？&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="built_in">this</span>.selectAnim(<span class="number">4</span>, <span class="string">&#x27;你说什么我听不懂？&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> modelTrigger(event): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> Sx = event.clientX; <span class="comment">//鼠标单击位置横坐标</span></span><br><span class="line">        <span class="keyword">const</span> Sy = event.clientY; <span class="comment">//鼠标单击位置纵坐标</span></span><br><span class="line">        <span class="comment">//屏幕坐标转标准设备坐标</span></span><br><span class="line">        <span class="keyword">const</span> x = (Sx / <span class="built_in">window</span>.innerWidth) * <span class="number">2</span> - <span class="number">1</span>; <span class="comment">//标准设备横坐标</span></span><br><span class="line">        <span class="keyword">const</span> y = -(Sy / <span class="built_in">window</span>.innerHeight) * <span class="number">2</span> + <span class="number">1</span>; <span class="comment">//标准设备纵坐标</span></span><br><span class="line">        <span class="comment">//创建射线投射器对象</span></span><br><span class="line">        <span class="keyword">const</span> raycaster = <span class="keyword">new</span> Raycaster();</span><br><span class="line">        <span class="comment">//返回射线选中的对象</span></span><br><span class="line">        raycaster.setFromCamera(<span class="keyword">new</span> Vector2(x, y), <span class="built_in">this</span>.camera);</span><br><span class="line">        <span class="keyword">const</span> intersects = raycaster.intersectObjects(<span class="built_in">this</span>.scene.children, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">const</span> intersect = intersects.filter(<span class="function"><span class="params">intersect</span> =&gt;</span> intersect.object.name !== <span class="string">&#x27;skyboxMesh&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (intersect.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> result = intersect.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.object.name === <span class="string">&#x27;Torso_0&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> (result.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.selectAnim(<span class="number">5</span>, <span class="string">&#x27;不要乱摸&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span> (intersect[<span class="number">0</span>].object.name) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;Head_1&#x27;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.selectAnim(<span class="number">3</span>, <span class="string">&#x27;摸头杀&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;Head_2&#x27;</span>:</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;头&#x27;</span>)</span><br><span class="line">                    <span class="built_in">this</span>.selectAnim(<span class="number">1</span>, <span class="string">&#x27;我的眼睛！！&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;Torso_1&#x27;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.selectAnim(<span class="number">12</span>, <span class="string">&#x27;给我捶捶背&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;FootL&#x27;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.selectAnim(<span class="number">3</span>, <span class="string">&#x27;左脚可以摸&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;FootR&#x27;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.selectAnim(<span class="number">5</span>, <span class="string">&#x27;别碰我的jiong&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> selectAnim(index: <span class="built_in">number</span>, text?: <span class="built_in">string</span>, loop?: <span class="built_in">boolean</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isAnimate) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.isAnimate = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// animation</span></span><br><span class="line">        <span class="built_in">this</span>.mixer.uncacheClip(<span class="built_in">this</span>.gltf.animations[<span class="built_in">this</span>.anindex])</span><br><span class="line">        <span class="built_in">this</span>.animation = <span class="built_in">this</span>.mixer.clipAction(<span class="built_in">this</span>.gltf.animations[index])</span><br><span class="line">        <span class="built_in">this</span>.animation.clampWhenFinished = <span class="literal">true</span>;   <span class="comment">//播放完停留在最后一帧</span></span><br><span class="line">        <span class="keyword">if</span> (!loop) &#123;</span><br><span class="line">            <span class="built_in">this</span>.animation.setLoop(LoopOnce, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.animation.fadeIn(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">this</span>.animation.play()</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.isAnimate = <span class="literal">false</span></span><br><span class="line">        &#125;, <span class="built_in">this</span>.gltf.animations[index].duration * <span class="number">1000</span>);</span><br><span class="line">        <span class="built_in">this</span>.anindex = index</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;text&#x27;</span>).innerText = text</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建场景</span></span><br><span class="line">    <span class="keyword">private</span> initScene(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.scene = <span class="keyword">new</span> Scene();</span><br><span class="line">        <span class="built_in">this</span>.scene.position.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">this</span>.scene.lookAt(<span class="built_in">this</span>.scene.position);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建相机</span></span><br><span class="line">    <span class="keyword">private</span> initCamera(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.camera = <span class="keyword">new</span> PerspectiveCamera(</span><br><span class="line">            <span class="built_in">this</span>.fov,</span><br><span class="line">            <span class="built_in">this</span>.$window.clientWidth / <span class="built_in">this</span>.$window.clientHeight,</span><br><span class="line">            <span class="number">0.1</span>,</span><br><span class="line">            <span class="number">5000</span></span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">this</span>.camera.position.x = <span class="built_in">this</span>.originalCamera.x</span><br><span class="line">        <span class="built_in">this</span>.camera.position.y = <span class="built_in">this</span>.originalCamera.y</span><br><span class="line">        <span class="built_in">this</span>.camera.position.z = <span class="built_in">this</span>.originalCamera.z</span><br><span class="line">        <span class="built_in">this</span>.camera.lookAt(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建3D渲染器</span></span><br><span class="line">    <span class="keyword">private</span> initThree(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.renderer = <span class="keyword">new</span> WebGLRenderer();</span><br><span class="line">        <span class="built_in">this</span>.renderer.setSize(</span><br><span class="line">            <span class="built_in">this</span>.$window.clientWidth,</span><br><span class="line">            <span class="built_in">this</span>.$window.clientHeight</span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">this</span>.renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line">        <span class="built_in">this</span>.renderer.setClearColor(<span class="number">0xb34149</span>, <span class="number">1</span>); <span class="comment">//设置背景颜色</span></span><br><span class="line">        <span class="built_in">this</span>.$window.appendChild(<span class="built_in">this</span>.renderer.domElement);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建光源</span></span><br><span class="line">    <span class="keyword">private</span> initLight(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// 环境光</span></span><br><span class="line">        <span class="built_in">this</span>.scene.add(<span class="keyword">new</span> AmbientLight(<span class="number">0xd29c96</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 平行光</span></span><br><span class="line">        <span class="keyword">let</span> light = <span class="keyword">new</span> DirectionalLight(<span class="number">0xffffff</span>, <span class="number">0.6</span>);</span><br><span class="line">        light.position.set(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="built_in">this</span>.scene.add(light);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启控制器</span></span><br><span class="line">    <span class="keyword">private</span> initControls(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.controls = <span class="keyword">new</span> OrbitControls(<span class="built_in">this</span>.camera, <span class="built_in">this</span>.renderer.domElement);</span><br><span class="line">        <span class="built_in">this</span>.controls.enableDamping = <span class="literal">true</span>; <span class="comment">// 惯性滑动，滑动大小默认0.25</span></span><br><span class="line">        <span class="built_in">this</span>.controls.dampingFactor = <span class="number">0.05</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// //控制</span></span><br><span class="line">        <span class="built_in">this</span>.controls.enableZoom = <span class="literal">true</span>; <span class="comment">// 缩放</span></span><br><span class="line">        <span class="built_in">this</span>.controls.enableKeys = <span class="literal">true</span>; <span class="comment">// 键盘</span></span><br><span class="line">        <span class="built_in">this</span>.controls.enablePan = <span class="literal">false</span>; <span class="comment">// 是否开启右键拖拽</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 旋转速度</span></span><br><span class="line">        <span class="built_in">this</span>.controls.rotateSpeed = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动旋转</span></span><br><span class="line">        <span class="built_in">this</span>.controls.autoRotate = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">this</span>.controls.autoRotateSpeed = -<span class="number">0.01</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置仰视角和俯视角,后续进行重置</span></span><br><span class="line">        <span class="built_in">this</span>.controls.maxPolarAngle = <span class="built_in">Math</span>.PI / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">this</span>.controls.minPolarAngle = <span class="built_in">Math</span>.PI / <span class="number">4</span>;</span><br><span class="line">        <span class="built_in">this</span>.controls.zoomSpeed = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//设置相机距离原点的最远距离</span></span><br><span class="line">        <span class="comment">// controls.minDistance = 120;</span></span><br><span class="line">        <span class="comment">//设置相机距离原点的最远距离</span></span><br><span class="line">        <span class="comment">// controls.maxDistance = 120 + 120 * 0.5;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建发光点</span></span><br><span class="line">    <span class="keyword">private</span> initPulseCircle(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mainGroup = <span class="keyword">new</span> Group();</span><br><span class="line">        <span class="built_in">this</span>.scene.add(<span class="built_in">this</span>.mainGroup);</span><br><span class="line">        <span class="keyword">var</span> spriteMap = <span class="keyword">new</span> TextureLoader().load(<span class="string">&quot;./static/img/img.png&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> pinMaterial = <span class="keyword">new</span> SpriteMaterial(&#123;</span><br><span class="line">            <span class="attr">map</span>: spriteMap</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">this</span>.circleGroup = <span class="keyword">new</span> Group();</span><br><span class="line">        <span class="keyword">let</span> container = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">        container.className = <span class="string">&#x27;show&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> Div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">        Div.className = <span class="string">&#x27;text&#x27;</span></span><br><span class="line">        Div.id = <span class="string">&quot;text&quot;</span></span><br><span class="line">        Div.style.left = <span class="number">0</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        Div.style.top = <span class="number">0</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(Div)</span><br><span class="line">        <span class="keyword">let</span> pin: Sprite = <span class="keyword">new</span> Sprite(pinMaterial);</span><br><span class="line">        pin.position.set(</span><br><span class="line">            <span class="built_in">this</span>.circleData.x,</span><br><span class="line">            <span class="built_in">this</span>.circleData.y,</span><br><span class="line">            <span class="built_in">this</span>.circleData.z</span><br><span class="line">        );</span><br><span class="line">        pin.scale.set(<span class="number">0.3</span>, <span class="number">0.3</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">this</span>.circleGroup.add(pin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发光点DOM文本</span></span><br><span class="line">    <span class="keyword">private</span> textShow(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> worldVector = <span class="keyword">new</span> Vector3(</span><br><span class="line">            <span class="built_in">this</span>.circleData.x,</span><br><span class="line">            <span class="built_in">this</span>.circleData.y,</span><br><span class="line">            <span class="built_in">this</span>.circleData.z</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">let</span> standardVector = worldVector.project(<span class="built_in">this</span>.camera);</span><br><span class="line">        <span class="keyword">let</span> a = <span class="built_in">this</span>.$window.clientWidth / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">let</span> b = <span class="built_in">this</span>.$window.clientHeight / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="built_in">Math</span>.round(standardVector.x * a + a);</span><br><span class="line">        <span class="keyword">let</span> y = <span class="built_in">Math</span>.round(-standardVector.y * b + b);</span><br><span class="line">        <span class="keyword">let</span> Div: HTMLElement = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">        Div.style.left = x + <span class="number">30</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        Div.style.top = y + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> initTrace(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> Div: HTMLElement = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">        Div.id = <span class="string">&#x27;trace&#x27;</span></span><br><span class="line">        Div.className = <span class="string">&#x27;text&#x27;</span></span><br><span class="line">        Div.textContent = <span class="string">&quot;Moon&quot;</span></span><br><span class="line">        <span class="keyword">var</span> moonLabel = <span class="keyword">new</span> CSS2DObject(Div);</span><br><span class="line">        moonLabel.position.set(<span class="number">0</span>, -<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">this</span>.scene.add(moonLabel);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.labelRenderer = <span class="keyword">new</span> CSS2DRenderer();</span><br><span class="line">        <span class="built_in">this</span>.labelRenderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line">        <span class="built_in">this</span>.labelRenderer.domElement.style.position = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.labelRenderer.domElement.style.top = <span class="number">0</span> + <span class="string">&#x27;px&#x27;</span>;        </span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(<span class="built_in">this</span>.labelRenderer.domElement)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> render(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame(<span class="function">() =&gt;</span> <span class="built_in">this</span>.render());</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.mixer) &#123;</span><br><span class="line">            <span class="built_in">this</span>.mixer.update(<span class="built_in">this</span>.clock.getDelta());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.controls.update();</span><br><span class="line">        <span class="built_in">this</span>.textShow();</span><br><span class="line">        <span class="built_in">this</span>.renderer.render(<span class="built_in">this</span>.scene, <span class="built_in">this</span>.camera); <span class="comment">// 必须放在这个位置</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.labelRenderer.render(<span class="built_in">this</span>.scene, <span class="built_in">this</span>.camera);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> onWindowResize(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line">        <span class="built_in">this</span>.camera.aspect = <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.innerHeight;</span><br><span class="line">        <span class="built_in">this</span>.camera.updateProjectionMatrix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;方法一：使用Sprite对象&quot;&gt;&lt;a href=&quot;#方法一：使用Sprite对象&quot; class=&quot;headerlink&quot; title=&quot;方法一：使用Sprite对象&quot;&gt;&lt;/a&gt;方法一：使用Sprite对象&lt;/h1&gt;&lt;p&gt;首先实例化一个SpriteMaterial，
      
    
    </summary>
    
      <category term="JS" scheme="https://hakunamatata052.github.io/categories/JS/"/>
    
      <category term="three.js" scheme="https://hakunamatata052.github.io/categories/JS/three-js/"/>
    
    
      <category term="three.js" scheme="https://hakunamatata052.github.io/tags/three-js/"/>
    
      <category term="threejs" scheme="https://hakunamatata052.github.io/tags/threejs/"/>
    
      <category term="three" scheme="https://hakunamatata052.github.io/tags/three/"/>
    
  </entry>
  
  <entry>
    <title>当年的元歌比露娜还秀</title>
    <link href="https://hakunamatata052.github.io/2020/08/25/yuange/"/>
    <id>https://hakunamatata052.github.io/2020/08/25/yuange/</id>
    <published>2020-08-25T08:25:36.000Z</published>
    <updated>2020-08-26T07:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<video src="/2020/08/25/yuange/4852abda01b06d0270ff57cff566085c.mp4" controls style="display:block;margin:auto"></video>]]></content>
    
    <summary type="html">
    
      
      
        &lt;video src=&quot;/2020/08/25/yuange/4852abda01b06d0270ff57cff566085c.mp4&quot; controls style=&quot;display:block;margin:auto&quot;&gt;&lt;/video&gt;
      
    
    </summary>
    
      <category term="日常" scheme="https://hakunamatata052.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="元歌 王者荣耀" scheme="https://hakunamatata052.github.io/tags/%E5%85%83%E6%AD%8C-%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
  </entry>
  
  <entry>
    <title>快速搭建webpack4.0+</title>
    <link href="https://hakunamatata052.github.io/2020/08/25/webpack/"/>
    <id>https://hakunamatata052.github.io/2020/08/25/webpack/</id>
    <published>2020-08-25T06:14:00.000Z</published>
    <updated>2020-08-25T08:43:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化npm"><a href="#初始化npm" class="headerlink" title="初始化npm"></a>初始化npm</h3><p>使用-y来快速创建<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></p><h3 id="安装webpack和webpack-cli脚手架"><a href="#安装webpack和webpack-cli脚手架" class="headerlink" title="安装webpack和webpack-cli脚手架"></a>安装webpack和webpack-cli脚手架</h3><p>从webpack4.0开始，webpack打包工具和命令行工具就开成两个包了，需要同时安装<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure></p><h3 id="创建工程目录"><a href="#创建工程目录" class="headerlink" title="创建工程目录"></a>创建工程目录</h3><p>新建src目录，之后写的js、html、css等源文件放在这里,在src目录下新建一个index.js作为入口文件<br><code>src/index.js</code>是webpack默认的入口文件目录，因为不需要单独配置，如果不想使用这个路径，需要在<code>webpack.config.js</code>中单独配置<br>此处目录结构应为</p><ul><li>node_modules</li><li>src<ul><li>index.js</li></ul></li><li>package.json</li></ul><h3 id="安装webpack-dev-server"><a href="#安装webpack-dev-server" class="headerlink" title="安装webpack-dev-server"></a>安装webpack-dev-server</h3><p>此时webpack只能每次执行打包命令后才能看到打包结果，开发过程中我们需要实时编译，因此需要一个本地服务<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure></p><h3 id="安装html-webpack-plugin插件"><a href="#安装html-webpack-plugin插件" class="headerlink" title="安装html-webpack-plugin插件"></a>安装html-webpack-plugin插件</h3><p>虽然现在可以试试打包js，但是我们的html依然不能进行热更新，而且打包上线时，打包的资源文件一般会进行哈希命名，每次打包手动修改index.html文件中的资源文件名着实很费劲<br>因此需要html-webpack-plugin插件帮我们自动完成资源引用并增加热更新功能<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure><br>安装好后在项目根目录下新建<code>webpack.config.js</code>文件，并设置html-webpack-plugin的对应html模板<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports =&#123;</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="attr">filename</span>:<span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">template</span>:<span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在src下新建index.html文件<br>之后目录应为</p><ul><li>node_modules</li><li>src<ul><li>index.js</li><li>index.html</li></ul></li><li>package.json</li><li>webpack.config.js</li></ul><h3 id="新增命令行"><a href="#新增命令行" class="headerlink" title="新增命令行"></a>新增命令行</h3><p>在<code>package.json</code>的scripts中新增一个命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>:<span class="string">&quot;webpack-dev-server --host 192.168.0.2 --hot --https --port 80 --open&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>其中<br><code>--host 192.138.0.2</code>表示配置本地服务的ip<br><code>--hot</code>表示开启热更新模式<br><code>--https</code>表示开始https<br><code>--port 80</code>表示端口为80<br><code>--open</code>表示启动后自动打开游览器，后面可以跟游览器的标识，不写表示打开默认游览器<br>到此本地服务就搭建完毕了，接下来需要配置loader和打包选项，今天先更到这里</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初始化npm&quot;&gt;&lt;a href=&quot;#初始化npm&quot; class=&quot;headerlink&quot; title=&quot;初始化npm&quot;&gt;&lt;/a&gt;初始化npm&lt;/h3&gt;&lt;p&gt;使用-y来快速创建&lt;br&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="JS" scheme="https://hakunamatata052.github.io/categories/JS/"/>
    
      <category term="webpack" scheme="https://hakunamatata052.github.io/categories/JS/webpack/"/>
    
    
      <category term="webpack" scheme="https://hakunamatata052.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Promise和async/await</title>
    <link href="https://hakunamatata052.github.io/2020/08/25/promise/"/>
    <id>https://hakunamatata052.github.io/2020/08/25/promise/</id>
    <published>2020-08-25T03:18:00.000Z</published>
    <updated>2022-01-05T07:51:52.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要用Promise"><a href="#为什么要用Promise" class="headerlink" title="为什么要用Promise"></a>为什么要用Promise</h3><p>一般情况我们一次性调用API就可以完成请求。<br>有些情况需要多次调用服务器API，就会形成一个链式调用，比如为了完成一个功能，我们需要调用API1、API2、API3，依次按照顺序进行调用，这个时候就会出现回调地狱的问题</p><h3 id="Promise的链式结构"><a href="#Promise的链式结构" class="headerlink" title="Promise的链式结构"></a>Promise的链式结构</h3><p>使用Promise可以做到链式结构，即一个请求结束后在then方法中执行下一个异步请求，再下一个异步请求放在上一个异步请求的then方法中,但是需要再每个then方法中return一个Promise对象<br>这样我们就得到了一个扁平的结构而不是回调套回调。<br>eg.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        res()</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res2, rej2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">            res2()</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res3, rej4</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">            res3()</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;结束&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>执行结果是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">结束</span><br></pre></td></tr></table></figure></p><h3 id="使用all方法"><a href="#使用all方法" class="headerlink" title="使用all方法"></a>使用all方法</h3><p>但是通常在真是项目中，每个请求会有单独的方法封装，而且每个Promise会有独立的then方法，这时可以使用Promise对象的all方法<br>他表示无论三个异步请求谁先执行谁后执行，都等待三个异步请求全部结束后执行all中的函数。<br>如果后一个请求需要得到前一个请求中的数据，那么还是需要使用前面的链式结构才行。<br>如果既要使用已经封装好的Promise函数，有需要按步调用，可以使用ES7中的async/await<br>eg.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        res()</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">        res()</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">        res()</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2, promise3]).then(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;结束&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>执行结果是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">结束</span><br></pre></td></tr></table></figure></p><h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><p>首先封装的方法需要return一个Promise对象，接着在请求的函数前面添加async关键字，在请求函数的内部使用变量或常量接受封装的Promise对象即可，但是封装的Promise对象前需要加await<br>这时接收到的结果就是Promise对象中then方法中return的结果<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&quot;666&quot;</span>)</span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">ajaxAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> r = <span class="keyword">await</span> ajax()    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(r)    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line">ajaxAsync()</span><br></pre></td></tr></table></figure><br>执行结果是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span>  <span class="comment">// 5s后</span></span><br><span class="line"><span class="number">666</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要用Promise&quot;&gt;&lt;a href=&quot;#为什么要用Promise&quot; class=&quot;headerlink&quot; title=&quot;为什么要用Promise&quot;&gt;&lt;/a&gt;为什么要用Promise&lt;/h3&gt;&lt;p&gt;一般情况我们一次性调用API就可以完成请求。&lt;br&gt;有些情况
      
    
    </summary>
    
      <category term="JS" scheme="https://hakunamatata052.github.io/categories/JS/"/>
    
    
      <category term="Promise async/await async await 同步异步 异步" scheme="https://hakunamatata052.github.io/tags/Promise-async-await-async-await-%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5-%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Three.js 入门</title>
    <link href="https://hakunamatata052.github.io/2020/08/24/three.js/"/>
    <id>https://hakunamatata052.github.io/2020/08/24/three.js/</id>
    <published>2020-08-24T08:21:00.000Z</published>
    <updated>2022-01-05T07:51:52.455Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装three-js"><a href="#安装three-js" class="headerlink" title="安装three.js"></a>安装three.js</h3><p>使用npm安装three.js<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i three -S</span><br></pre></td></tr></table></figure><br>导入场景、相机、灯光、渲染器等类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Scene, PerspectiveCamera, WebGLRenderer ,AmbientLight ,DirectionalLight&#125; <span class="keyword">from</span> <span class="string">&quot;three&quot;</span></span><br></pre></td></tr></table></figure><br>创建并暴露一个类，定义场景、相机、灯光等，并设置渲染的DOM容器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Three</span> </span>&#123;</span><br><span class="line">    private scene: Scene</span><br><span class="line">    private camera: PerspectiveCamera</span><br><span class="line">    private renderer: WebGLRenderer</span><br><span class="line">    private $window: HTMLElement</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.$window = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建场景"><a href="#创建场景" class="headerlink" title="创建场景"></a>创建场景</h3><p>初始化一个场景,这里我设置了一个私有方法，之后会在constructor中调用<br>scene.position.set可以设置场景在坐标系的位置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建场景</span></span><br><span class="line">private initScene(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.scene = <span class="keyword">new</span> Scene();</span><br><span class="line">    <span class="built_in">this</span>.scene.position.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">this</span>.scene.lookAt(<span class="built_in">this</span>.scene.position);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="创建相机"><a href="#创建相机" class="headerlink" title="创建相机"></a>创建相机</h3><p>接着初始化相机,这里使用的是透视相机PerspectiveCamera，相机接受4个参数，分别是</p><ul><li>PerspectiveCamera(fov, aspect, near, far)</li><li>Fov – 相机的视锥体的垂直视野角</li><li>Aspect – 相机视锥体的长宽比</li><li>Near – 相机视锥体的近平面</li><li>Far – 相机视锥体的远平面<br>相机的位置可以使用camera.position.x，camera.position.y，camera.position.z进行赋值来改变<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建相机</span></span><br><span class="line">private initCamera(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.camera = <span class="keyword">new</span> PerspectiveCamera(</span><br><span class="line">        <span class="number">25</span>,</span><br><span class="line">        <span class="built_in">this</span>.$window.clientWidth / <span class="built_in">this</span>.$window.clientHeight,</span><br><span class="line">        <span class="number">0.1</span>,</span><br><span class="line">        <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">this</span>.camera.lookAt(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建光源"><a href="#创建光源" class="headerlink" title="创建光源"></a>创建光源</h3>接着初始化灯光,这里添加了两个灯光，一个环境光，一个平行光，可添加多个光源<br>灯光的构造函数中传入灯光颜色和透明度，颜色必须是0x+16进制色<br>环境光没有位置属性，平行光可以添加光源的位置，使用light.position.set来设置位置，传入三个参数分别是x坐标，y坐标，z坐标<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建光源</span></span><br><span class="line">private initLight(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="comment">// 环境光</span></span><br><span class="line">    <span class="built_in">this</span>.scene.add(<span class="keyword">new</span> AmbientLight(<span class="number">0xd29c96</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 平行光</span></span><br><span class="line">    <span class="keyword">let</span> light = <span class="keyword">new</span> DirectionalLight(<span class="number">0xffffff</span>, <span class="number">0.6</span>);</span><br><span class="line">    light.position.set(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">this</span>.scene.add(light);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建3D渲染器"><a href="#创建3D渲染器" class="headerlink" title="创建3D渲染器"></a>创建3D渲染器</h3>接着创建渲染器,使用three内置的WebGLRenderer渲染器来渲染，渲染器可以通过setSize方法设置大小，这里我们设置一个和画布一样大的渲染器，如果渲染尺寸小于画布大小，则超出渲染器大小的位置将不被渲染<br>使用setClearColor方法可以设置渲染区域的背景色<br>最后将渲染器的domElement属性appendChild进需要的DOM标签内即可<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建3D渲染器</span></span><br><span class="line">private initThree(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.renderer = <span class="keyword">new</span> WebGLRenderer();</span><br><span class="line">    <span class="built_in">this</span>.renderer.setSize(</span><br><span class="line">        <span class="built_in">this</span>.$window.clientWidth,</span><br><span class="line">        <span class="built_in">this</span>.$window.clientHeight</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">this</span>.renderer.setClearColor(<span class="number">0xb34149</span>, <span class="number">1</span>); <span class="comment">//设置背景颜色</span></span><br><span class="line">    <span class="built_in">this</span>.$window.appendChild(<span class="built_in">this</span>.renderer.domElement);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>接着将这些方法添加进constructor内，让实例创建时自动执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Three</span> </span>&#123;</span><br><span class="line">    private scene: Scene</span><br><span class="line">    private camera: PerspectiveCamera</span><br><span class="line">    private renderer: WebGLRenderer</span><br><span class="line">    private $window: HTMLElement</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.$window = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#app&quot;</span>);        </span><br><span class="line">        <span class="built_in">this</span>.initScene();</span><br><span class="line">        <span class="built_in">this</span>.initThree();</span><br><span class="line">        <span class="built_in">this</span>.initCamera();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启控制器"><a href="#开启控制器" class="headerlink" title="开启控制器"></a>开启控制器</h3>接着使用renderer.render方法就可以渲染了，但是这样只能渲染一帧画面，我们需要做鼠标控制，或者3D动画是需要实时渲染的<br>例如加一个鼠标控制<br>首先导入控制器<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; OrbitControls &#125; <span class="keyword">from</span> <span class="string">&#x27;three/examples/jsm/controls/OrbitControls&#x27;</span>;</span><br></pre></td></tr></table></figure>接着初始化这个控制器，这里依然使用一个方法,然后添加进constructor<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启控制器</span></span><br><span class="line">private initControls(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.controls = <span class="keyword">new</span> OrbitControls(<span class="built_in">this</span>.camera, <span class="built_in">this</span>.renderer.domElement);</span><br><span class="line">    <span class="built_in">this</span>.controls.enableDamping = <span class="literal">true</span>; <span class="comment">// 惯性滑动，滑动大小默认0.25</span></span><br><span class="line">    <span class="built_in">this</span>.controls.dampingFactor = <span class="number">0.05</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// //控制</span></span><br><span class="line">    <span class="built_in">this</span>.controls.enableZoom = <span class="literal">false</span>; <span class="comment">// 缩放</span></span><br><span class="line">    <span class="built_in">this</span>.controls.enableKeys = <span class="literal">false</span>; <span class="comment">// 键盘</span></span><br><span class="line">    <span class="built_in">this</span>.controls.enablePan = <span class="literal">false</span>; <span class="comment">// 是否开启右键拖拽</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旋转速度</span></span><br><span class="line">    <span class="built_in">this</span>.controls.rotateSpeed = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动旋转</span></span><br><span class="line">    <span class="built_in">this</span>.controls.autoRotate = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.controls.autoRotateSpeed = -<span class="number">0.01</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置仰视角和俯视角,后续进行重置</span></span><br><span class="line">    <span class="built_in">this</span>.controls.maxPolarAngle = <span class="built_in">Math</span>.PI / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">this</span>.controls.minPolarAngle = <span class="built_in">Math</span>.PI / <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">this</span>.controls.zoomSpeed = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//设置相机距离原点的最远距离</span></span><br><span class="line">    <span class="comment">// controls.minDistance = 120;</span></span><br><span class="line">    <span class="comment">//设置相机距离原点的最远距离</span></span><br><span class="line">    <span class="comment">// controls.maxDistance = 120 + 120 * 0.5;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3>这样添加的控制器虽然可以控制场景，但是画布不会重新渲染，所以我们需要添加一个渲染函数并且每次调用自身来更新画面<br>这里使用的是requestAnimationFrame函数来调用自身，也可以使用setInterval但是setInterval是固定时间渲染，如果场景过大，过复杂，可能时间到了还没渲染好又得渲染下一帧，这样会导致页面卡死<br>requestAnimationFrame没有固定时间，他会在当前帧渲染完毕后执行下一次，这样就不会导致页面卡死了<br>接着在render方法中使用controls.update()来更新每次的控制，使用renderer.render来更新画面<br>最后在constructor函数中调用render即可<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private render(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(<span class="function">() =&gt;</span> <span class="built_in">this</span>.render());</span><br><span class="line">    <span class="built_in">this</span>.controls.update();</span><br><span class="line">    <span class="built_in">this</span>.renderer.render(<span class="built_in">this</span>.scene, <span class="built_in">this</span>.camera);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>最后在需要需要的地方导入并new Three()就可以了</li></ul><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><iframe src="/2020/08/24/three.js/three.html" width="600" height="600" frameborder="no" border="0" marginwidth="0" marginheight="0" allowtransparency="yes"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装three-js&quot;&gt;&lt;a href=&quot;#安装three-js&quot; class=&quot;headerlink&quot; title=&quot;安装three.js&quot;&gt;&lt;/a&gt;安装three.js&lt;/h3&gt;&lt;p&gt;使用npm安装three.js&lt;br&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="JS" scheme="https://hakunamatata052.github.io/categories/JS/"/>
    
      <category term="three.js" scheme="https://hakunamatata052.github.io/categories/JS/three-js/"/>
    
    
      <category term="three.js" scheme="https://hakunamatata052.github.io/tags/three-js/"/>
    
      <category term="threejs" scheme="https://hakunamatata052.github.io/tags/threejs/"/>
    
      <category term="three" scheme="https://hakunamatata052.github.io/tags/three/"/>
    
  </entry>
  
  <entry>
    <title>制作菱形图片遮罩</title>
    <link href="https://hakunamatata052.github.io/2019/03/01/mark/"/>
    <id>https://hakunamatata052.github.io/2019/03/01/mark/</id>
    <published>2019-03-01T02:56:52.000Z</published>
    <updated>2022-01-05T07:51:52.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>使用box-shadow制作菱形遮罩</p><p>需要在原有结构内增加一个shaow遮罩层</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://picsum.photos/300/300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shadow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外层div设置相对定位position: relative;<br>将shadow层旋转45度，并设置阴影；<br>box-shadow中的值分别是：<br>box-shadow：水平位移 垂直位移 阴影宽度 模糊程度 颜色<br>这里水平和垂直位移这只为0，即从中间开始向四周出现阴影。 阴影宽度一定要宽于外框，模糊程度可以填0，即不模糊，颜色填白色。</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shadow</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">200px</span> <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><iframe src="/2019/03/01/mark/mark.html" width="600" height="600" frameborder="no" border="0" marginwidth="0" marginheight="0" allowtransparency="yes"></iframe><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>使用两次旋转达到菱形效果</p><h3 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://picsum.photos/300/300&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">250px</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><iframe src="/2019/03/01/mark/mark2.html" width="650" height="500" frameborder="no" border="0" marginwidth="0" marginheight="0" allowtransparency="yes"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h1&gt;&lt;p&gt;使用box-shadow制作菱形遮罩&lt;/p&gt;
&lt;p&gt;需要在原有结构内增加一个shaow遮罩层&lt;/p&gt;
&lt;h3 id=&quot;HTML&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="CSS" scheme="https://hakunamatata052.github.io/categories/CSS/"/>
    
    
      <category term="CSS CSS3" scheme="https://hakunamatata052.github.io/tags/CSS-CSS3/"/>
    
  </entry>
  
  <entry>
    <title>科学上网（翻墙）神器【蓝灯】</title>
    <link href="https://hakunamatata052.github.io/2019/01/21/lantern/"/>
    <id>https://hakunamatata052.github.io/2019/01/21/lantern/</id>
    <published>2019-01-21T01:08:46.000Z</published>
    <updated>2022-01-05T07:51:52.364Z</updated>
    
    <content type="html"><![CDATA[<p>给大家介绍一款免费限制流量的科学上网神器<strong>蓝灯lantren</strong><br>下载地址：<a href="https://github.com/HakunaMatata052/lantern-binaries">Github</a><br>里面包含Windows，Android，macOS三个版本。<br>点击对应拓展名文件进入下载即可</p><h2 id="以Windows为例"><a href="#以Windows为例" class="headerlink" title="以Windows为例"></a>以Windows为例</h2><p>点击3.0最新版的exe文件<br><img src="/2019/01/21/lantern/01.png" class=""></p><p>点击download下载<br></p><p>下载先来后双击安装即可。<br><img src="/2019/01/21/lantern/03.jpg" class=""><br>速度还可以~~</p><p>每个月有500MB的免费流量，可以升级到专业版，不限制流量。<br>博主500MB基本足够。<br>而且他采用的是只能切换线路，如果访问的是国内站点，是不通过VPN的，也不会消耗流量。只有当你访问被墙网站的时候才会切换vpn线路。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给大家介绍一款免费限制流量的科学上网神器&lt;strong&gt;蓝灯lantren&lt;/strong&gt;&lt;br&gt;下载地址：&lt;a href=&quot;https://github.com/HakunaMatata052/lantern-binaries&quot;&gt;Github&lt;/a&gt;&lt;br&gt;里面包含Wi
      
    
    </summary>
    
    
      <category term="科学上网" scheme="https://hakunamatata052.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
      <category term="翻墙" scheme="https://hakunamatata052.github.io/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>一句代码解决bootstrap栅格几个设置5等分</title>
    <link href="https://hakunamatata052.github.io/2019/01/04/bootstrap-offset/"/>
    <id>https://hakunamatata052.github.io/2019/01/04/bootstrap-offset/</id>
    <published>2019-01-04T07:45:01.000Z</published>
    <updated>2020-08-21T02:57:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-offset-1 col-xs-2 text-center&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-2 text-center&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-2 text-center&quot;</span>&gt;</span>番茄<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-2 text-center&quot;</span>&gt;</span>石榴<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-2 text-center&quot;</span>&gt;</span>芒果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>正常设置每个栅格2等分，最后会在末尾空余出2等分（共12等分），然后第一个栅格设置col-xs-offset-1，意思是偏移一格，等于把最后的2等分其中一份放在最前面了。<br>这样做可以解决bootstrap栅格5等分的问题，但是最终宽度会比正常窄，可以单独设置container的宽来解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTML&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="HTML" scheme="https://hakunamatata052.github.io/categories/HTML/"/>
    
      <category term="BOOTSTRAP" scheme="https://hakunamatata052.github.io/categories/HTML/BOOTSTRAP/"/>
    
    
      <category term="bootstrap" scheme="https://hakunamatata052.github.io/tags/bootstrap/"/>
    
      <category term="offset" scheme="https://hakunamatata052.github.io/tags/offset/"/>
    
  </entry>
  
  <entry>
    <title>This is dobby!</title>
    <link href="https://hakunamatata052.github.io/2019/01/03/dobby/"/>
    <id>https://hakunamatata052.github.io/2019/01/03/dobby/</id>
    <published>2019-01-03T09:22:09.000Z</published>
    <updated>2020-08-26T07:38:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><video src="/2019/01/03/dobby/3bc53ac5ca4fde47810af8abb0c0a601.mp4" controls style="display:block;margin:auto"></video><br>这就是Dobby Orz.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;video src=&quot;/2019/01/03/dobby/3bc53ac5ca4fde47810af8abb0c0a601.mp4&quot; controls style=&quot;display:block;margin:auto&quot;&gt;&lt;/video&gt;&lt;br&gt;这就是Dobby Orz.&lt;
      
    
    </summary>
    
      <category term="日常" scheme="https://hakunamatata052.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>如何使用fonts.googleapis.com使自己的网站增加更多字体</title>
    <link href="https://hakunamatata052.github.io/2019/01/02/fonts-googleapis/"/>
    <id>https://hakunamatata052.github.io/2019/01/02/fonts-googleapis/</id>
    <published>2019-01-02T09:04:17.000Z</published>
    <updated>2022-01-05T07:51:52.318Z</updated>
    
    <content type="html"><![CDATA[<p>首先，fonts.googleapis.com解决的是客户端电脑没有安装字体，但是网站主又想客户看到自己想要的字体，通常的做法就是网站的css调用网站内部的字体文件，但是这样做非常不灵活，我们需要更换字体时，不然需要修改css，还需要替换字体文件，于是fonts.googleapis.com就可以解决这个问题。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>CSS引入<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;//fonts.googleapis.com/css?family=Monda:300,300italic,400,400italic,700,700italic|PT Mono:300,300italic,400,400italic,700,700italic&amp;subset=latin,latin-ext&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>链接的具体构成就是：<br>fonts.googleapis.com/css?family=<strong>字体名称</strong>:<strong>加粗程度</strong>,<strong>加粗程度+是否斜体</strong>&amp;subset=latin,latin-ext<br>其中如果需要多种字体用  <strong>|</strong>  隔开，如果有多种加粗程度<br>最后在需要使用的元素上加入font-family属性即可<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Monda&#x27;</span>, <span class="string">&#x27;PT Mono&#x27;</span> , serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>fonts.googleapis.com还有一种ajax请求方式，这里不推荐使用，css是最快也最容易维护的方式。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先，fonts.googleapis.com解决的是客户端电脑没有安装字体，但是网站主又想客户看到自己想要的字体，通常的做法就是网站的css调用网站内部的字体文件，但是这样做非常不灵活，我们需要更换字体时，不然需要修改css，还需要替换字体文件，于是fonts.googl
      
    
    </summary>
    
      <category term="HTML" scheme="https://hakunamatata052.github.io/categories/HTML/"/>
    
    
      <category term="googleapis" scheme="https://hakunamatata052.github.io/tags/googleapis/"/>
    
      <category term="字体" scheme="https://hakunamatata052.github.io/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加置顶功能和标识</title>
    <link href="https://hakunamatata052.github.io/2018/12/29/hexo-top/"/>
    <id>https://hakunamatata052.github.io/2018/12/29/hexo-top/</id>
    <published>2018-12-29T09:29:09.000Z</published>
    <updated>2022-01-05T07:51:52.409Z</updated>
    
    <content type="html"><![CDATA[<p>首先看下效果<br><img src="https://i.loli.net/2018/12/29/5c273ed38214d.png" alt="效果图"></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><h3 id="新建-修改-文章"><a href="#新建-修改-文章" class="headerlink" title="新建/修改 文章"></a>新建/修改 文章</h3><p>新建或修改文章时在文章<strong>Front-matter</strong>中加入<strong>top: true</strong>即可<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 无JS实现在线客服的切换效果</span><br><span class="line">date: 2018-12-20 15:05:17</span><br><span class="line">tags:</span><br><span class="line">    - css</span><br><span class="line">    - css3</span><br><span class="line">categories: CSS</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><blockquote><p>到此为止，文章的置顶功能就实现了,但是我们还需要给置顶的文章加个标识，如<br><img src="https://i.loli.net/2018/12/29/5c2740bd13582.png" alt=""><br>So，我们需要加一个图标或者文字标签<br>这里我做了一个简单的，你可以修改一下，做一个好看的图标</p></blockquote><h3 id="添加标识"><a href="#添加标识" class="headerlink" title="添加标识"></a>添加标识</h3><p>如果你使用的是<strong>next</strong>的主题，打开目录<strong>themes/next/layout/_macro</strong>，找到文件post.swig，搜索<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/&#123;% if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;% endif %&#125;&gt;</span><br></pre></td></tr></table></figure><br>大概在65行，在他上面添加<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">    &lt;span style=&quot;color:#f00;border:1px solid #f00;padding:2px 5px;font-size:12px;&quot;&gt;置顶&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><br>这是你会发现标识出现了，但是高度有些错位，在<strong>themes/next/source/_custom</strong>中找到<strong>custom.styl</strong>文件，添加一行<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-title</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这时你就可以看到具体的效果了</p><blockquote><p>当然你可以添加更好看的图标，只需要修改HTML和CSS即可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先看下效果&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2018/12/29/5c273ed38214d.png&quot; alt=&quot;效果图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;具体实现&quot;&gt;&lt;a href=&quot;#具体实现&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="hexo" scheme="https://hakunamatata052.github.io/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="https://hakunamatata052.github.io/tags/Hexo/"/>
    
      <category term="next" scheme="https://hakunamatata052.github.io/tags/next/"/>
    
  </entry>
  
</feed>
